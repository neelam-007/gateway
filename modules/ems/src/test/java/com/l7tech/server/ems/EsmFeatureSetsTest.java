package com.l7tech.server.ems;

import java.io.PrintStream;
import java.util.*;
import java.util.logging.Logger;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import org.junit.Test;
import org.junit.Assert;

/**
 * @author mike
 * @noinspection JavaDoc
 */
public class EsmFeatureSetsTest {
    /** @noinspection UnusedDeclaration*/
    private static Logger log = Logger.getLogger(EsmFeatureSetsTest.class.getName());

    @Test
    public void testEmitWikiDocs_ServiceNames() throws Exception {
        emit(System.out, "Service Names", collectServices(Arrays.asList(ALL_SERVICES)), new HashSet<String>(), false);
    }

    @Test
    public void testEmitWikiDocs_UiFeatures() throws Exception {
        emit(System.out, "UI Features", collectServices(Arrays.asList(ALL_UI)), new HashSet<String>(), false);
    }

    @Test
    public void testEmitWikiDocs_BuldingBlocks() throws Exception {
        emit(System.out, "Building Blocks", EsmFeatureSets.getRootFeatureSets(), new HashSet<String>(), true);
    }

    @Test
    public void testEmitWikiDocs_ProductProfiles() throws Exception {
        emit(System.out, "Product Profiles", EsmFeatureSets.getProductProfiles(), new HashSet<String>(), true);
    }

    private Map<String, EsmFeatureSet> collectServices(List<String> names) {
        Map<String, EsmFeatureSet> services = new HashMap<String, EsmFeatureSet>();
        Set<String> allServNames = new LinkedHashSet<String>(names);
        for (String servName : allServNames) {
            EsmFeatureSet serv = EsmFeatureSets.getAllFeatureSets().get(servName);
            Assert.assertNotNull(serv);
            services.put(servName, serv);
        }
        return services;
    }

    private void emit(PrintStream out, String what, Map<String, EsmFeatureSet> sets, Set<String> visited, boolean includeLastTwoColumns) {
        out.println("\n\n<!-- Begin generated by " + getClass().getName() + " -- do not edit below this line -- " + what + " -->");
        String lasttwoHeaders = includeLastTwoColumns ? "!! Included Feature Sets !! Notes" : "";
        out.println("{| border=\"1\" cellpadding=\"3\" cellspacing=\"0\" style=\"font-size: 90%; border: gray solid 2px; border-collapse: collapse; text-align: left; width: 95%\" \n" +
                "|- \n" +
                "! Name !! Short Description " + lasttwoHeaders);
        for (Map.Entry<String, EsmFeatureSet> entry : sets.entrySet()) {
            String name = entry.getKey();
            EsmFeatureSet fs = entry.getValue();
            if (visited.contains(name)) continue;
            visited.add(name);
            out.println("|-");
            out.println("| " + name + " || " + fs.desc + (includeLastTwoColumns ? " || " : ""));
            for (EsmFeatureSet dep : fs.sets) {
                out.println("* " + dep.name);
            }
            if (includeLastTwoColumns)
                out.println("|| " + fs.getNote());
        }
        out.println("|}");
        out.println("<!-- End generated by " + getClass().getName() + " -- do not edit above this line -- " + what + " -->\n");
    }

    private static final String[] ALL_SERVICES = findStaticStringValuesWithPrefix("SERVICE_");
    private static final String[] ALL_UI = findStaticStringValuesWithPrefix("UI_");
    private static final String[] ALL_FEATURES = findStaticStringValuesWithPrefix("FEATURE_");

    private static String[] findStaticStringValuesWithPrefix(String prefix) {
        Set<String> servs = new HashSet<String>();

        Field[] fields = EsmFeatureSets.class.getFields();
        for (Field field : fields) {
            if (Modifier.isStatic(field.getModifiers()) &&
                field.getName().startsWith(prefix) &&
                    field.getType().equals(String.class))
            {
                try {
                    servs.add((String)field.get(null));
                } catch (IllegalAccessException e) {
                    throw new Error(e);
                }
            }
        }

        return servs.toArray(new String[servs.size()]);
    }

    /** Makes sure that all registered services are included in ALL_SERVICES.  Dual of testAllServicesMapped. */
    @Test
    public void testAllServicesKnown() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        Set<String> allServs = new HashSet<String>(Arrays.asList(ALL_SERVICES));
        Set<String> names = new HashSet<String>();
        profileAll.collectAllFeatureNames(names);

        for (String name : names) {
            if (name.startsWith("service:") && !allServs.contains(name))
                throw new RuntimeException("Service is registered as a feature but is not present in ALL_SERVICES: " + name);
        }
    }

    /** Makes sure that all registered services are included in ALL_SERVICES.  Dual of testAllServicesMapped. */
    @Test
    public void testAllFeaturesKnown() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        Set<String> allFeatures = new HashSet<String>(Arrays.asList(ALL_FEATURES));
        Set<String> names = new HashSet<String>();
        profileAll.collectAllFeatureNames(names);

        for (String name : names) {
            if (name.startsWith("feature:") && !allFeatures.contains(name))
                throw new RuntimeException("Feature is registered as a feature but is not present in ALL_FEATURES: " + name);
        }
    }

    @Test
    public void testAllUiKnown() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        Set<String> allServs = new HashSet<String>(Arrays.asList(ALL_UI));
        Set<String> names = new HashSet<String>();
        profileAll.collectAllFeatureNames(names);

        for (String name : names) {
            if (name.startsWith("ui:") && !allServs.contains(name))
                throw new RuntimeException("UI feature is registered as a feature but is not present in ALL_UI: " + name);
        }
    }

    /** Makes sure that all services in ALL_SERVICES are registered.  Dual of testAllServicesKnown. */
    @Test
    public void testAllServicesMapped() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        for (String name : ALL_SERVICES) {
            if (!profileAll.contains(name))
                throw new RuntimeException("Service is not enabled by the full-featured Product Profile: " + name);
        }
    }

    /** Makes sure that all features in ALL_FEATURES are registered.  Dual of testAllFeaturesKnown. */
    @Test
    public void testAllFeaturessMapped() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        for (String name : ALL_FEATURES) {
            if (!profileAll.contains(name))
                throw new RuntimeException("Feature is not enabled by the full-featured Product Profile: " + name);
        }
    }

    /** Makes sure that all services in ALL_UI are registered.  Dual of testAllServicesKnown. */
    @Test
    public void testAllUIMapped() throws Exception {
        EsmFeatureSet profileAll = EsmFeatureSets.getBestProductProfile();

        for (String name : ALL_UI) {
            if (!profileAll.contains(name))
                throw new RuntimeException("UI feature is not enabled by the full-featured Product Profile: " + name);
        }
    }


}