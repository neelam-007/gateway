<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation= "http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

    <!-- enable automatic proxy generation for any class or superclass annotated with @Transactional -->
    <tx:annotation-driven/>

    <bean name="systemProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="properties">
            <!-- default properties if not overridden by system properties -->
            <map>
                <entry key="com.l7tech.ems.httpPort" value="8182"/>
                <entry key="com.l7tech.ems.httpsPort" value="8545"/>
            </map>
        </property>
    </bean>

    <bean name="servletContainer" class="com.l7tech.server.ems.EmsServletContainer">
        <constructor-arg index="0" value="${com.l7tech.ems.httpPort}"/>
    </bean>

    <bean id="dataSource" class="org.apache.derby.jdbc.EmbeddedDataSource40">
        <property name="databaseName" value="emsdb"/>
        <property name="createDatabase" value="create"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>com.l7tech.gateway.common.cluster.ClusterProperty</value>
                <value>com.l7tech.identity.internal.InternalUser</value>
                <value>com.l7tech.identity.IdentityProviderConfig</value>
            </list>
        </property>
        <property name="hibernateProperties" value="hibernate.dialect=org.hibernate.dialect.DerbyDialect"/>
        <property name="schemaUpdate" value="true"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Abstract "parent" of any bean that needs access to sessionFactory and transactionManager -->
    <bean id="hibernateBean" abstract="true">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="clusterPropertyManager" class="com.l7tech.server.cluster.ClusterPropertyManagerImpl" parent="hibernateBean"/>

    <bean id="licenseManager" class="com.l7tech.server.GatewayLicenseManager">
        <constructor-arg ref="clusterPropertyManager"/>
    </bean>

    <!-- ID provider framework -->
    <bean id="identityProviderFactory" class="com.l7tech.server.identity.IdentityProviderFactory">
        <constructor-arg ref="identityProviderConfigManager"/>
    </bean>
    <bean id="identityProviderConfigManager" class="com.l7tech.server.identity.IdProvConfManagerServer" parent="hibernateBean">
        <!-- roleManager can be null since the EMS currently does not allow ID provider configs to be created or updated -->
        <property name="roleManager"><null/></property>
    </bean>

    <!-- Internal identity provider -->
    <bean id="internalIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.internal.InternalIdentityProviderImpl"/>
        <constructor-arg value="internalIdentityProvider"/>
    </bean>
    <bean name="internalUserManager" class="com.l7tech.server.identity.internal.InternalUserManagerImpl" parent="hibernateBean">
        <constructor-arg index="0"><null/></constructor-arg>
        <constructor-arg index="1"><null/></constructor-arg>
    </bean>
    <bean id="internalIdentityProvider" class="com.l7tech.server.identity.internal.InternalIdentityProviderImpl">
        <property name="clientCertManager"><null/></property>
        <property name="keystore"><null/></property>
        <property name="certificateAuthenticator"><null/></property>
        <property name="userManager" ref="internalUserManager"/>
        <property name="groupManager"><null/></property>
    </bean>

    <!-- Initial setup manager -->
    <bean name="setupManager" class="com.l7tech.server.ems.SetupManagerImpl" depends-on="internalIdentityProvider">
        <constructor-arg index="0" ref="licenseManager"/>        
        <constructor-arg index="1" ref="identityProviderFactory"/>
        <constructor-arg index="2" ref="identityProviderConfigManager"/>
    </bean>

    <!-- Security Manager -->
    <bean name="securityManager" class="com.l7tech.server.ems.EmsSecurityManagerImpl">
        <constructor-arg index="0" ref="identityProviderFactory"/>        
    </bean>

    <!--
      Values provided to the FreeMarker templates.  This constitutes the API the templates are "coded" against.
      In addition to these values, the TemplateFinder adds a value "applicationContext" after initialization.
    -->
    <bean name="templateDataModel" class="java.util.HashMap">
        <constructor-arg index="0">
            <map key-type="java.lang.String" value-type="java.lang.Object">
                <entry key="emsVersion" value="0.1"/>
            </map>
        </constructor-arg>
    </bean>

</beans>
