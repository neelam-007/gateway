<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation= "http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!-- enable automatic proxy generation for any class or superclass annotated with @Transactional -->
    <tx:annotation-driven/>

    <!-- export beans to JMX -->
    <context:mbean-export/>

    <bean id="systemProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="properties">
            <!-- default properties if not overridden by system properties -->
            <map>
                <entry key="com.l7tech.ems.httpPort" value="8182"/>
                <entry key="com.l7tech.ems.httpsPort" value="8545"/>
            </map>
        </property>
    </bean>

    <bean id="creationDataSource" class="org.apache.derby.jdbc.EmbeddedDataSource40">
        <property name="databaseName" value="var/db/emsdb"/>
        <property name="createDatabase" value="create"/>
    </bean>

   <bean id="createDB"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.l7tech.server.ems.SetupManagerImpl.testDataSource"/>
        <property name="arguments">
            <list>
                <ref local="creationDataSource"/>
                <list>
                    <value>classpath:com/l7tech/server/ems/resources/db/audit.sql</value>
                </list>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="org.apache.derby.jdbc.EmbeddedDataSource40" depends-on="createDB">
        <property name="databaseName" value="var/db/emsdb"/>
    </bean>

    <bean id="dataSourceExplorer" class="com.l7tech.server.util.DataSourceExplorer">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <!-- RBAC Entities -->
                <value>com.l7tech.gateway.common.security.rbac.Role</value>
                <value>com.l7tech.gateway.common.security.rbac.RoleAssignment</value>
                <value>com.l7tech.gateway.common.security.rbac.Permission</value>
                <value>com.l7tech.gateway.common.security.rbac.ScopePredicate</value>
                <value>com.l7tech.gateway.common.security.rbac.AttributePredicate</value>
                <value>com.l7tech.gateway.common.security.rbac.ObjectIdentityPredicate</value>

                <!-- Audit Entities -->
                <value>com.l7tech.gateway.common.audit.AdminAuditRecord</value>
                <value>com.l7tech.gateway.common.audit.SystemAuditRecord</value>
                <value>com.l7tech.gateway.common.audit.MessageSummaryAuditRecord</value> <!-- Required for export format -->
                <value>com.l7tech.gateway.common.audit.AuditDetail</value>
                <value>com.l7tech.gateway.common.mapping.MessageContextMappingKeys</value> <!-- TODO [steve] create subclass of msar and remove mapping key/values? -->
                <value>com.l7tech.gateway.common.mapping.MessageContextMappingValues</value>

                <!-- General -->                
                <value>com.l7tech.gateway.common.cluster.ClusterProperty</value>
                <value>com.l7tech.identity.internal.InternalUser</value>
                <value>com.l7tech.identity.internal.PasswordChangeRecord</value>
                <value>com.l7tech.identity.IdentityProviderConfig</value>
                <value>com.l7tech.server.ems.user.UserProperty</value>
                <value>com.l7tech.server.logon.LogonInfo</value>
            </list>
        </property>
        <property name="hibernateProperties" value="hibernate.dialect=org.hibernate.dialect.DerbyDialect"/>
        <property name="entityInterceptor" ref="persistenceEventInterceptor"/>
        <property name="schemaUpdate" value="true"/>
    </bean>

    <bean id="schemaExport" class="com.l7tech.server.ems.EmsDbSchemaExport" init-method="init" depends-on="sessionFactory">
        <constructor-arg index="0">
           <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetObject" ref="&amp;sessionFactory"/>
                <property name="targetMethod" value="getConfiguration"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="1" value="var/db/ems.sql"/>
    </bean>

    <bean id="persistenceEventInterceptor" class="com.l7tech.server.PersistenceEventInterceptor">
        <constructor-arg index="0" ref="auditContext"/>
    </bean>

    <bean id="managedBackgroundTimer" class="com.l7tech.server.util.ManagedTimer">
        <constructor-arg value="Background timer"/>
    </bean>

    <!-- Use managed timer for all background tasks -->
    <bean id="configureBackgroundTimer"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.l7tech.util.Background.installTimer"/>
        <property name="arguments">
            <list>
                <ref local="managedBackgroundTimer"/>
            </list>
        </property>
    </bean>


    <bean id="whirlyLife" class="com.l7tech.server.WhirlyLifecycle"/>

    <bean id="timerLife" class="com.l7tech.server.ManagedTimerLifecycle"/>

    <bean id="exceptionLogger" class="com.l7tech.server.util.UncaughtExceptionLogger" factory-method="createAndInstall"/>

    <!--
    * singleton using the factory method. This is transitional, as it is referencef from
    * too many places.
    -->
    <bean id="serverConfig" class="com.l7tech.server.ServerConfig" factory-method="getInstance" depends-on="configureBackgroundTimer">
        <property name="propertyChangeListener">
            <bean class="com.l7tech.server.util.LazyPropertyChangeDispatcher">
                <constructor-arg>
                    <map>
                        <entry key="auditLogListenerTarget"><list><value>auditBatchExternal</value></list></entry>
                        <entry key="auditDetailFilter"><list><value>auditAssociatedLogsThreshold</value></list></entry>
                    </map>
                </constructor-arg>
            </bean>
        </property>
        <property name="clusterPropertyCache" ref="clusterPropertyCache"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="applicationEventProxy" class="com.l7tech.server.util.ApplicationEventProxy"/>
    <bean id="entityInvalidator" class="com.l7tech.server.EntityVersionChecker">
        <property name="applicationEventProxy" ref="applicationEventProxy"/>
        <property name="entityManagers">
            <list>
                <ref bean="clusterPropertyManager"/>
                <ref bean="identityProviderConfigManager"/>
            </list>
        </property>
        <property name="timer">
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="EntityVersionChecker"/>
            </bean>
        </property>
    </bean>

    <!-- server side log manager -->
    <bean id="logRecordManager" class="com.l7tech.server.audit.LogRecordManager">
        <constructor-arg index="0"><null/></constructor-arg>
        <constructor-arg index="1" ref="logRecordRingBuffer"/>
        <constructor-arg index="2"><null/></constructor-arg>
    </bean>

    <!-- server side log ring buffer -->
    <bean id="logRecordRingBuffer" class="com.l7tech.server.log.LogRecordRingBuffer" init-method="init">
        <property name="loggerName" value="com.l7tech"/>
        <property name="bufferSize" value="500"/> <!-- NOTE that the max retrieval block size is 600, this should be less than that -->
    </bean>

    <!-- server side audit record manager -->
    <bean id="auditRecordManager" class="com.l7tech.server.audit.AuditRecordManagerImpl" parent="hibernateBean">
        <property name="serverConfig" ref="serverConfig"/>
    </bean>

    <!-- server side audit download manager -->
    <bean id="auditDownloadManager" class="com.l7tech.server.audit.AuditDownloadManager">
        <constructor-arg><null/></constructor-arg> <!-- TODO [steve] signing for audit downloads --> 
    </bean>

    <!-- server side audit exporter -->
    <bean id="auditExporter" class="com.l7tech.server.audit.AuditExporterImpl" scope="prototype">
        <constructor-arg index="0" value="DERBY"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="auditContext" class="com.l7tech.server.audit.ThreadLocalAuditContext">
        <property name="targetId" value="auditContextImpl"/>
    </bean>

    <bean id="auditContextImpl" class="com.l7tech.server.audit.AuditContextImpl" scope="singleton">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="auditRecordManager"/>
        <!--<property name="keystore" ref="keystore"/>-->
        <property name="auditLogListener" ref="auditLogListener"/>
    </bean>

    <bean id="auditLogListener" class="com.l7tech.server.log.LoggingAuditLogListener"/>

    <bean id="auditDetailProcessingAuditListener" class="com.l7tech.server.audit.AuditDetailProcessingAuditListener">
        <constructor-arg ref="auditContext"/>
    </bean>

    <bean id="adminAuditListener" class="com.l7tech.server.audit.AdminAuditListener">
        <!-- TODO node id for ems -->
        <constructor-arg value="EMS"/>
        <constructor-arg ref="auditContext"/>
    </bean>

    <bean id="systemAuditListener" class="com.l7tech.server.audit.SystemAuditListener">
        <!-- TODO node id for ems -->
        <constructor-arg value="EMS"/>
        <constructor-arg ref="auditContext"/>
    </bean>

    <!-- Abstract "parent" of any bean that needs access to sessionFactory and transactionManager -->
    <bean id="hibernateBean" abstract="true">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="clusterPropertyManager" class="com.l7tech.server.cluster.ClusterPropertyManagerImpl" parent="hibernateBean"/>

    <bean id="clusterPropertyCache" class="com.l7tech.server.cluster.ClusterPropertyCache">
        <property name="clusterPropertyManager" ref="clusterPropertyManager"/>
        <property name="clusterPropertyListener" ref="serverConfig"/>
    </bean>

    <bean id="licenseManager" class="com.l7tech.server.GatewayLicenseManager">
        <constructor-arg ref="clusterPropertyManager"/>
    </bean>

    <!-- ID provider framework -->
    <bean id="identityProviderFactory" class="com.l7tech.server.identity.IdentityProviderFactory">
        <constructor-arg ref="identityProviderConfigManager"/>
    </bean>
    <bean id="identityProviderConfigManager" class="com.l7tech.server.identity.IdProvConfManagerServer" parent="hibernateBean">
        <!-- roleManager can be null since the EMS currently does not allow ID provider configs to be created or updated -->
        <property name="roleManager"><null/></property>
    </bean>

    <!-- Internal identity provider -->
    <bean id="internalIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.internal.InternalIdentityProviderImpl"/>
        <constructor-arg value="internalIdentityProvider"/>
    </bean>
    <bean id="internalUserManager" class="com.l7tech.server.identity.internal.InternalUserManagerImpl" parent="hibernateBean" scope="prototype" >
        <constructor-arg index="0" ref="roleManager"/>
        <constructor-arg index="1"><null/></constructor-arg>
        <constructor-arg index="2" ref="logonManager"/>
    </bean>
    <bean id="internalIdentityProvider" class="com.l7tech.server.identity.internal.InternalIdentityProviderImpl" scope="prototype">
        <property name="clientCertManager"><null/></property>
        <property name="keystore"><null/></property>
        <property name="certificateAuthenticator"><null/></property>
        <property name="userManager" ref="internalUserManager"/>
        <property name="groupManager"><null/></property>
        <property name="logonService" ref="logonService"/>
    </bean>

    <bean id="roleManager" class="com.l7tech.server.security.rbac.RoleManagerImpl" parent="hibernateBean"/>

    <!-- logon manager handles the persistence of login attempts information to the database layer -->
    <bean id="logonManager" class="com.l7tech.server.logon.LogonInfoManagerImpl" parent="hibernateBean"/>

    <!-- Logon service that monitors the login attempts in the SSM -->
    <bean id="logonService" class="com.l7tech.server.logon.SSMLogonService">
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="logonManager"/>
        <constructor-arg ref="serverConfig"/>
    </bean>

    <!-- password enforcer to enforce the password constraints -->
    <bean id="passwordEnforcerManager" class="com.l7tech.server.security.PasswordEnforcerManager">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="roleManager"/>
    </bean>

    <!-- Account manager -->
    <bean id="emsAccountManager" class="com.l7tech.server.ems.EmsAccountManagerImpl">
        <constructor-arg ref="identityProviderFactory"/>
    </bean>

    <!-- Initial setup manager -->
    <bean id="setupManager" class="com.l7tech.server.ems.SetupManagerImpl" depends-on="internalIdentityProvider">
        <constructor-arg index="0" ref="licenseManager"/>        
        <constructor-arg index="1" ref="identityProviderFactory"/>
        <constructor-arg index="2" ref="identityProviderConfigManager"/>
        <constructor-arg index="3" ref="roleManager"/>
        <constructor-arg index="4" ref="auditContext"/>
    </bean>

    <!-- Security Manager -->
    <bean id="securityManager" class="com.l7tech.server.ems.EmsSecurityManagerImpl">
        <constructor-arg index="0" ref="identityProviderFactory"/>        
        <constructor-arg index="1" ref="roleManager"/>
    </bean>

    <bean id="servletContainer" class="com.l7tech.server.ems.EmsServletContainer">
        <constructor-arg index="0" value="${com.l7tech.ems.httpPort}"/>
    </bean>

    <bean id="userPropertyManager" class="com.l7tech.server.ems.user.UserPropertyManagerImpl" parent="hibernateBean"/>

    <bean id="setAuditResourceAuditDownloadManager"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.l7tech.server.ems.AuditResource.setAuditDownloadManager"/>
        <property name="arguments">
            <list>
                <ref local="auditDownloadManager"/>
            </list>
        </property>
    </bean>

    <bean id="setResourceSecurityManager"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.l7tech.server.ems.SecureResource.setSecurityManager"/>
        <property name="arguments">
            <list>
                <ref local="securityManager"/>
            </list>
        </property>
    </bean>

</beans>
