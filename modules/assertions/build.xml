<?xml version="1.0" encoding="UTF-8"?>
<!-- Ant build file for all modules. -->
<project name="modules" default="package">

    <description>
        Builds all modular assertions.
    </description>

    <property file="../../build.version"/>
    <fail unless="build.version.major">Missing build version property "build.version.major"</fail>
    <fail unless="build.version.minor">Missing build version property "build.version.minor"</fail>
    <!-- Declare props to keep idea happy -->
    <property name="build.version.major" value=""/>
    <property name="build.version.minor" value=""/>
    <property name="build.version.subminor" value=""/>
    <condition property="build.version"
               value="${build.version.major}.${build.version.minor}"
               else="${build.version.major}.${build.version.minor}.${build.version.subminor}">
        <!-- Append dot subminor only if not empty. -->
        <equals arg1="${build.version.subminor}" arg2=""/>
    </condition>
    <tstamp/>

    <target name="OFFICIAL-package-init-version" unless="build.version">
        <!-- Prompt for version number if not already supplied by a calling build file. -->
        <input message="Enter a version number:" addproperty="build.version"/>
    </target>

    <target name="OFFICIAL-package"
            description="Creates the distributables after prompting for a version number."
            depends="OFFICIAL-package-init-version">
        <subant target="OFFICIAL-package" inheritAll="false" verbose="true">
            <property name="build.version" value="${build.version}"/>
            <fileset dir="."  includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="package" description="Creates the distributables.">
        <subant genericantfile="build.xml" target="package" inheritAll="false" verbose="true">
            <property name="build.version" value="${build.version}"/>
            <fileset dir="." includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="deploy" description="Deploys all .aar files to ssg.home/modules/assertions">
        <subant genericantfile="build.xml" target="deploy" inheritAll="false" verbose="true">
            <property name="build.version" value="${build.version}"/>
            <fileset dir="." includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="undeploy" description="Removes all deployed .aar files from ssg.home/modules/assertions">
        <subant genericantfile="build.xml" target="undeploy" inheritAll="false" verbose="true">
            <property name="build.version" value="${build.version}"/>
            <fileset dir="." includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="clean" description="Deletes all generated files.">
        <subant target="clean" inheritAll="false" verbose="true">
            <fileset dir="." includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="test" description="Runs test on all assertion modules.">
        <subant target="test" inheritAll="false" verbose="true">
            <fileset dir="." includes="*Assertion/build.xml"/>
        </subant>
    </target>

    <target name="new" description="Create a new (empty) assertion module (-Dass.camel=NameHere, -Dass.lower=namehere).">
        <fail unless="ass.camel">You must set an assertion name (-Dass.camel=NameHere, -Dass.lower=namehere)</fail>
        <fail unless="ass.lower">You must set an assertion name (-Dass.camel=NameHere, -Dass.lower=namehere)</fail>

        <property name="assertion.name" value="${ass.camel}"/>
        <property name="assertion.name.lower" value="${ass.lower}"/>

        <available file="${assertion.name}Assertion" property="assertion.module.exists"/>
        <fail if="assertion.module.exists">The assertion "${assertion.name}" already exists.</fail>

        <mkdir dir="${assertion.name}Assertion/lib"/>
        <mkdir dir="${assertion.name}Assertion/src/com/l7tech/external/assertions/${assertion.name.lower}/console/resources"/>
        <mkdir dir="${assertion.name}Assertion/src/com/l7tech/external/assertions/${assertion.name.lower}/server"/>
        <mkdir dir="${assertion.name}Assertion/tests/com/l7tech/external/assertions/${assertion.name.lower}/server"/>

        <filterset id="assertion.module.filterset">
            <filter token="assertion" value="${assertion.name.lower}"/>
            <filter token="ASSERTION" value="${assertion.name}"/>
        </filterset>

        <copy file="templates/TEMPLATE_build.xml" tofile="${assertion.name}Assertion/build.xml">
            <filterset refid="assertion.module.filterset"/>
        </copy>

        <copy file="templates/TEMPLATE_Assertion.txt" tofile="${assertion.name}Assertion/src/com/l7tech/external/assertions/${assertion.name.lower}/${assertion.name}Assertion.java">
            <filterset refid="assertion.module.filterset"/>
        </copy>

        <copy file="templates/TEMPLATE_ServerAssertion.txt" tofile="${assertion.name}Assertion/src/com/l7tech/external/assertions/${assertion.name.lower}/server/Server${assertion.name}Assertion.java">
            <filterset refid="assertion.module.filterset"/>
        </copy>

        <copy file="templates/TEMPLATE_ServerAssertionTest.txt" tofile="${assertion.name}Assertion/tests/com/l7tech/external/assertions/${assertion.name.lower}/server/Server${assertion.name}AssertionTest.java">
            <filterset refid="assertion.module.filterset"/>
        </copy>

    </target>

</project>
