dialog.title = Comparison Assertion Properties
expression.label=&Expression:
dataType.label=Data &Type:
predicatesPanel.label=Rules
addPredicateButton.label=&Add...
deletePredicateButton.label=&Remove
okButton.label=&OK
cancelButton.label=&Cancel
editRuleButton.label=E&dit

predicateSelection.text=Select the type of rule:
predicateSelection.title=Rule Selection

emptyPredicate.name = Empty
emptyPredicatePanel.dialogTitle = Empty Rule

dataTypePredicate.name = Data Type
dataTypePredicatePanel.dialogTitle = Data Type Rule

minMaxPredicatePanel.unlimitedCheckbox.label=&Unlimited
minMaxPredicatePanel.boundsError=Maximum must be >= Minimum

cardinalityPredicate.name = Number of Values
cardinalityPredicatePanel.dialogTitle = Number of Values Rule
cardinalityPredicatePanel.minPanel.label=Minimum Number of Values:
cardinalityPredicatePanel.maxPanel.label=Maximum Number of Values:
cardinalityPredicatePanel.unitsLabel=values

stringLengthPredicate.name = String Length
stringLengthPredicatePanel.dialogTitle = String Length Rule
stringLengthPredicatePanel.minPanel.label=Minimum Length:
stringLengthPredicatePanel.maxPanel.label=Maximum Length:
stringLengthPredicatePanel.unitsLabel=characters

regexPredicate.name = Regular Expression
regexPredicatePanel.dialogTitle = Regular Expression Rule
regexPredicatePanel.regexLabel=&Regular Expression:

binaryPredicate.name = Simple Comparison
binaryPredicatePanel.dialogTitle = Simple Comparison Rule
binaryPredicatePanel.topLabel=Proceed if...
binaryPredicatePanel.negateCheckbox.label=&not
binaryPredicatePanel.valueField.label=&Right Expression:
binaryPredicatePanel.caseCheckbox.label=Case &Sensitive
binaryPredicatePanel.leftValue.label=&Left Expression:
binaryPredicatePanel.error.rightValueRequired=A value is required
binaryPredicatePanel.error.operatorRequired=An operator must be selected

booleanBinaryPredicatePanel.proceedLabel=Proceed If...
booleanBinaryPredicatePanel.isLabel=is:
booleanBinaryPredicatePanel.trueRadio.label=&True
booleanBinaryPredicatePanel.falseRadio.label=&False

binaryPredicate.eq.desc = {0} equal to {1}
binaryPredicate.eq.verb = verb.is
binaryPredicate.lt.desc = {0} less than {1}
binaryPredicate.lt.verb = verb.is
binaryPredicate.gt.desc = {0} greater than {1}
binaryPredicate.gt.verb = verb.is
binaryPredicate.le.desc = {0} less than or equal to {1}
binaryPredicate.le.verb = verb.is
binaryPredicate.ge.desc = {0} greater than or equal to {1}
binaryPredicate.ge.verb = verb.is
binaryPredicate.empty.desc = {0} empty
binaryPredicate.empty.verb = verb.is
binaryPredicate.contains.nonNegatedDesc = contains {0}
binaryPredicate.contains.negatedDesc = does not contain {0}
# {0} is the normal description
binaryPredicate.caseSensitive = {0} (case sensitive)

# {0} is has/has not, {1} is min, {2} is max
cardinalityPredicate.desc = {0} between {1} and {2} values
cardinalityPredicate.desc.1 = {0} exactly {1} value
cardinalityPredicate.desc.n = {0} exactly {1} values
cardinalityPredicate.desc.atLeast1 = {0} at least {1} value
cardinalityPredicate.desc.atLeastN = {0} at least {1} values

# {0} is has/has not, {1} is min, {2} is max
stringLengthPredicate.desc = {0} between {1} and {2} characters
stringLengthPredicate.desc.1 = {0} exactly {1} character
stringLengthPredicate.desc.n = {0} exactly {1} characters
stringLengthPredicate.desc.atLeast1 = {0} at least {1} character
stringLengthPredicate.desc.atLeastN = {0} at least {1} characters

proceed=Proceed if

verb.does=does
verb.doesNot=does not
verb.is=is
verb.isNot=is not
verb.has=has
verb.hasNot=does not have
article.a = a
article.an = an

# {0} is is/does, {1} is the article; {2} is the .desc
dataTypePredicate.desc = {0} {1} {2}

dataTypePredicate.string.desc = String
dataTypePredicate.string.article = article.a

dataTypePredicate.cert.desc = X.509 Certificate
dataTypePredicate.cert.article = article.an

dataTypePredicate.int.desc = Integer
dataTypePredicate.int.article = article.an

dataTypePredicate.decimal.desc = Decimal Number
dataTypePredicate.decimal.article = article.a

dataTypePredicate.float.desc = Floating Point Number
dataTypePredicate.float.article = article.a

dataTypePredicate.xml.desc = XML Element
dataTypePredicate.xml.article = article.an

dataTypePredicate.boolean.desc = Boolean
dataTypePredicate.boolean.article = article.a

dataTypePredicate.other.desc = Other
# no article for Other -- it should never appear in a description

regexPredicate.desc = matches {0}
regexPredicate.negatedDesc = does not match {0}
