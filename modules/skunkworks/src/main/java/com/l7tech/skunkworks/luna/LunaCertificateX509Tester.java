package com.l7tech.skunkworks.luna;

import com.chrysalisits.crypto.LunaCertificateX509;
import com.chrysalisits.crypto.LunaTokenManager;
import org.junit.*;

/**
 * Test that LunaCertificateX509 can parse various ECC certificates.
 * This test failed with the Luna JSP pre-4.4.1 but now passes.
 */
public class LunaCertificateX509Tester {
    byte[] testEccCert_SHA1withECDSA = new byte[]{ 48, -126, 2, -116, 48, -126, 2, 26, -96, 3, 2, 1, 2, 2, 3, 14, -28, -33, 48, 9, 6, 7, 42, -122, 72, -50, 61, 4, 1, 48, 20, 49, 18, 48, 16, 6, 3, 85, 4, 3, 19, 9, 113, 119, 101, 113, 119, 101, 97, 115, 102, 48, 30, 23, 13, 48, 57, 48, 52, 49, 48, 48, 50, 50, 49, 48, 48, 90, 23, 13, 49, 52, 48, 52, 48, 57, 48, 50, 50, 49, 48, 48, 90, 48, 20, 49, 18, 48, 16, 6, 3, 85, 4, 3, 19, 9, 113, 119, 101, 113, 119, 101, 97, 115, 102, 48, -126, 1, -75, 48, -126, 1, 77, 6, 7, 42, -122, 72, -50, 61, 2, 1, 48, -126, 1, 64, 2, 1, 1, 48, 60, 6, 7, 42, -122, 72, -50, 61, 1, 1, 2, 49, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 48, 100, 4, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -4, 4, 48, -77, 49, 47, -89, -30, 62, -25, -28, -104, -114, 5, 107, -29, -8, 45, 25, 24, 29, -100, 110, -2, -127, 65, 18, 3, 20, 8, -113, 80, 19, -121, 90, -58, 86, 57, -115, -118, 46, -47, -99, 42, -123, -56, -19, -45, -20, 42, -17, 4, 97, 4, -86, -121, -54, 34, -66, -117, 5, 55, -114, -79, -57, 30, -13, 32, -83, 116, 110, 29, 59, 98, -117, -89, -101, -104, 89, -9, 65, -32, -126, 84, 42, 56, 85, 2, -14, 93, -65, 85, 41, 108, 58, 84, 94, 56, 114, 118, 10, -73, 54, 23, -34, 74, -106, 38, 44, 111, 93, -98, -104, -65, -110, -110, -36, 41, -8, -12, 29, -67, 40, -102, 20, 124, -23, -38, 49, 19, -75, -16, -72, -64, 10, 96, -79, -50, 29, 126, -127, -99, 122, 67, 29, 124, -112, -22, 14, 95, 2, 49, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -57, 99, 77, -127, -12, 55, 45, -33, 88, 26, 13, -78, 72, -80, -89, 122, -20, -20, 25, 106, -52, -59, 41, 115, 2, 1, 1, 3, 98, 0, 4, -61, -41, -96, 3, 60, 23, -39, 60, -124, -84, 39, 65, -85, -2, 13, 78, 105, 121, -78, 5, -114, -74, 45, -123, -9, -91, 19, 126, -4, 119, 34, 89, 94, -40, 101, 62, 2, -127, 54, 78, 106, -2, 94, -109, 84, 80, 45, -24, 67, -70, -7, -116, 84, 44, 28, 122, -73, 77, -25, -12, -10, -65, -31, 94, 36, -65, -120, 0, 89, -119, 85, 6, 51, 8, -15, -108, -55, 69, -95, 57, -73, 94, -23, -9, -19, -50, 35, -20, 12, 110, -5, -91, -97, -60, 3, 122, 48, 9, 6, 7, 42, -122, 72, -50, 61, 4, 1, 3, 97, 0, 103, 72, -11, 31, 116, 61, -57, 73, 126, -23, 25, -21, 63, 87, 44, -71, -27, 13, -74, 100, 5, -31, 62, -16, -73, -115, -91, -24, 27, -29, 37, 57, 81, -23, -49, -33, 125, -64, -53, 64, 25, -108, 91, -112, -92, 36, -112, -46, -80, 119, -57, 58, 96, 71, 55, -40, 50, 82, 105, 39, -72, -21, 70, -92, -16, -102, -1, -95, 60, 85, -53, 125, 94, 78, 77, 96, -101, 40, -83, 106, 64, 37, 91, -59, 6, -6, -19, -91, 18, 68, -107, 51, 8, 38, 19, 19};
    byte[] testEccCert_SHA256withECDSA = new byte[]{ 48, -126, 1, 87, 48, -127, -34, -96, 3, 2, 1, 2, 2, 3, 20, -81, 117, 48, 10, 6, 8, 42, -122, 72, -50, 61, 4, 3, 2, 48, 22, 49, 20, 48, 18, 6, 3, 85, 4, 3, 19, 11, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 48, 30, 23, 13, 48, 57, 48, 52, 49, 49, 50, 51, 53, 50, 52, 49, 90, 23, 13, 49, 52, 48, 52, 49, 48, 50, 51, 53, 50, 52, 49, 90, 48, 22, 49, 20, 48, 18, 6, 3, 85, 4, 3, 19, 11, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 48, 118, 48, 16, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 5, 43, -127, 4, 0, 34, 3, 98, 0, 4, 93, 119, -5, -8, -114, -93, 71, 79, 32, -98, 118, -82, 104, 6, -3, 27, 49, 7, -13, -67, -89, -72, 56, -54, -100, -1, -88, 64, -72, 87, -26, 14, -98, -20, -125, -49, 6, -15, 49, -14, -74, -63, -46, -119, 91, -66, 2, 7, -105, 79, 75, 76, -58, 13, -87, -117, -108, 69, -127, -65, 16, -20, -48, -8, 78, 72, -110, -20, -19, 122, -43, 81, -107, -54, 46, -38, -127, -111, 6, -2, 121, 30, 37, -119, -121, 41, 39, 22, -86, -50, -117, -45, 40, -8, 71, 18, 48, 10, 6, 8, 42, -122, 72, -50, 61, 4, 3, 2, 3, 104, 0, 48, 101, 2, 48, 12, 28, 56, -45, -96, -109, 107, -32, 48, -70, 90, 4, 102, 14, -65, -125, -16, -120, -57, 11, 1, 30, 65, 21, -15, 25, 113, -123, 2, -30, 118, 124, -14, -92, 43, -24, 17, -8, 20, -59, 49, -13, 87, -98, 93, 16, 56, -73, 2, 49, 0, -84, 124, 106, -74, -118, -13, 123, -17, -104, -33, 103, 2, -88, -21, 77, -119, -67, 10, -112, -67, 63, -88, 35, -38, 93, 76, -104, 49, 86, -27, 110, 74, 80, -103, -8, -40, 105, 89, 63, 123, 15, -30, -115, 93, -68, -11, -46, -65 };
    byte[] testEccCert_SHA384withECDSA = new byte[]{ 48, -126, 1, 87, 48, -127, -34, -96, 3, 2, 1, 2, 2, 3, 26, 22, -25, 48, 10, 6, 8, 42, -122, 72, -50, 61, 4, 3, 3, 48, 22, 49, 20, 48, 18, 6, 3, 85, 4, 3, 19, 11, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 48, 30, 23, 13, 48, 57, 48, 52, 49, 49, 50, 51, 48, 57, 48, 49, 90, 23, 13, 49, 52, 48, 52, 49, 48, 50, 51, 48, 57, 48, 49, 90, 48, 22, 49, 20, 48, 18, 6, 3, 85, 4, 3, 19, 11, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 48, 118, 48, 16, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 5, 43, -127, 4, 0, 34, 3, 98, 0, 4, -13, -90, -118, -122, 90, -58, -123, -86, -20, 73, -107, 117, -31, 83, 22, -55, -62, 55, 52, -66, -11, -13, 119, -76, 38, -16, 65, 82, -122, 13, 19, 68, -5, -115, -77, -15, -94, -78, -41, 9, -125, 78, -3, 46, -6, 121, 115, 117, 109, -28, -71, -108, 119, 57, -9, -106, -22, 84, -114, 6, 102, -56, -93, -128, 97, -3, -37, 40, 98, -25, -36, -103, 96, -102, -107, 25, -95, -15, -32, 82, -8, -98, 37, 95, -69, 76, 83, 21, 21, 28, -42, -17, -12, 25, -61, 119, 48, 10, 6, 8, 42, -122, 72, -50, 61, 4, 3, 3, 3, 104, 0, 48, 101, 2, 48, 92, 97, -84, 17, 77, 91, -109, -30, -46, -71, -116, -35, -111, 49, 94, 112, 53, -85, -56, -103, -5, -46, -40, -23, 120, -38, 35, 35, -75, -91, -93, 45, -6, 45, 99, 38, 113, -29, 36, 87, -59, -83, -117, -63, 44, 8, 30, 103, 2, 49, 0, -122, -106, -81, -40, 55, -23, 41, -83, -32, -73, -9, 21, -68, 50, -83, 60, 62, 72, 93, -110, 45, 98, -101, 100, 103, -112, -34, -23, -30, -84, 26, 46, -55, -35, -111, 82, 80, -107, 78, 3, -36, 22, 74, 114, -112, -81, 121, 106 };

    @BeforeClass
    public static void logIntoToken() {
        LunaTokenManager.getInstance().Login(String.valueOf(TestLunaCommon.getTokenPin()));
    }

    /**
     * Test decode of an X.509 certificate that uses SHA1withECDSA.
     *
     * @throws Exception always throws com.chrysalisits.crypto.X509.AsnDecodingException: Couldn't recognize OID in algorithm identifier sequence: AsnOID(1.2.840.10045.4.1)
     */
    @Test
    public void testSHA1withECDSACertificate() throws Exception {
        new LunaCertificateX509(testEccCert_SHA1withECDSA);
    }

    /**
     * Test decode of an X.509 certificate that uses SHA256withECDSA.
     *
     * @throws Exception always throws com.chrysalisits.crypto.X509.AsnDecodingException: Couldn't recognize OID in algorithm identifier sequence: AsnOID(1.2.840.10045.4.3.2)
     */
    @Test
    public void testSHA256withECDSACertificate() throws Exception {
        new LunaCertificateX509(testEccCert_SHA256withECDSA);
    }

    /**
     * Test decode of an X.509 certificate that uses SHA384withECDSA.
     *
     * @throws Exception always throws com.chrysalisits.crypto.X509.AsnDecodingException: Couldn't recognize OID in algorithm identifier sequence: AsnOID(1.2.840.10045.4.3.3)
     */
    @Test
    public void testSHA384withECDSACertificate() throws Exception {
        new LunaCertificateX509(testEccCert_SHA384withECDSA);
    }
}
