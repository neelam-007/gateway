assertion.unknown = This assertion is not available on this Gateway cluster and may cause all requests to this service to fail.
assertion.unrecognized = This assertion is unrecognized and may cause all requests to this service to fail.
assertion.uncommon.multipleidentities = Uncommon use of multiple user identities in the same path.
assertion.uncommon.multipleauthassertions = Uncommon use of multiple authentication assertions in the same path.
assertion.uncommon.requestusage = Assertion targets the request after a response is available.

assertion.response.usebeforeavailable = Assertion targeting the response must not be positioned before a response is available.
assertion.response.beforeresponse = This assertion will not work because there is no response yet. Move this assertion after a routing assertion.

assertion.routing.normallybefore = This assertion is typically positioned before routing.
assertion.routing.shouldbebefore = This assertion should occur before the request is routed.
assertion.routing.isafter = The assertion is after route.
assertion.routing.mustbebefore = The assertion must occur before routing.

assertion.notuseful = This assertion is not useful when the child of an All assertion.
assertion.stylesheetprocessinginstruction = This assertion is configured to require an &lt;?xml-stylesheet?&gt; processing instruction, but SOAP messages do not allow them.
assertion.missingpasswordcollection = This assertion should be preceded by an assertion that collects a password.
assertion.policyxml.invalid = This manually specified policy XML is not valid.
assertion.requiressoap = This assertion only works with SOAP services.

assertion.composite.nochildren = This composite assertion does not contain any children and will always fail.

routing.emptyurl = The assertion might not work as configured. The protected service URL is empty.
routing.malformedurl = The assertion might not work as configured. The protected service URL is malformed.
routing.metapolicy.loop = When routing from a metapolicy, take care not to cause a loop by routing to a service that will directly or indirectly trigger the same metapolicy.

auditing.excessivediskspace = Saving request or response XML may result in excessive disk space usage; do not enable for production services.


allassertion.notusefullchild=This assertion is not useful when the child of an All assertion.

wssecurity.1_1.insufficientassertions = WS-Security version 1.1 is specified but insufficient WS-Security signing or encryption assertions exist in the policy.
wssecurity.nosecuritybeforeroute = No WS-Security signing or encryption assertion before route. Policy may not produce WSS v1.1 compliant messages.
wssecurity.nosecurityafterroute = No WS-Security signing or encryption assertion after route. Policy may not produce WSS v1.1 compliant messages.
wssecurity.wsssignature.alreadyrequired = WSS Signature(s) already required for {0}
wssecurity.multiplesignatures.conflicting = WSS Signature assertion has conflicting multiple signature setting.
wssecurity.secureconversation.alreadyspecified = WS Secure Conversation already specified.
wssecurity.wssrecipient.notenforced = A WSS Recipient other than "Default" will not be enforced by the gateway. This assertion will always succeed.
wssecurity.missingpriorsecurityassertion = This assertion should be preceded by a Require WS-Security Signature Credentials assertion, a Require WS-SecureConversation assertion, a Require SAML Token Profile Credentials assertion, a Require Encrypted UsernameToken Profile Credentials assertion or a Require WS-Security Kerberos Token Profile Credentials assertion.
wssecurity.missingpriorsecurityassertion.actor = This assertion should be preceded by a Require WS-Security Signature Credentials assertion, a Require Encrypted UsernameToken Profile Credentials assertion, a Require WS-Security Kerberos Token Profile Credentials assertion or a Require SAML Token Profile Credentials assertion (for actor {0}).
wssecurity.missingpriorcredentialassertion = This assertion should be preceded by a credential assertion (Require HTTP Basic Credentials, Require XPath Credentials, Require WS-Security UsernameToken Profile Credentials, Require SAML Token Profile Credentials or Retrieve SAML Browser Artifact).
wssecurity.missingpriorcredentialassertion.short = This assertion should be preceded by a credential assertion (Require HTTP Basic Credentials, Require XPath Credentials or Require WS-Security UsernameToken Profile Credentials)
wssecurity.dsig.relativenamespaceuri = The service refers to a relative namespace URI, which will prevent XML digital signatures from functioning properly.

saml.alreadyspecified = SAML Assertion already specified.
saml.missingbefore = This assertion should be preceded by a SAML assertion.
saml.sendervouces.notauthenticated = Routing with SAML Sender-Vouches but credentials are not authenticated.

transport.missingbefore = This assertion should be preceded by a Require SSL or TLS Transport assertion.

jms.noqueuedefined = The assertion might not work as configured. There is no protected service JMS queue defined.

unsupported.encoding = The encoding '{0}' is not supported.

accesscontrol.noauthscheme = Access control specified without authentication scheme.
accesscontrol.alreadyprovided = You already have an access control Custom Assertion in this path.
accesscontrol.userorgroupnotallowed = No user or group assertions are allowed when an access control Custom Assertion is used.
accesscontrol.uncommonuse = Uncommon use of multiple access control.



