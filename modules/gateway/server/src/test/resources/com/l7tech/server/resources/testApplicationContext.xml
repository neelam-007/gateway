<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-2.5.xsd
                            http://www.springframework.org/schema/util
                            http://www.springframework.org/schema/util/spring-util-2.5.xsd">

    <context:annotation-config/>

    <!--
     * singleton using the factory method. This is transitional, as it is referenced from
     * too many places.
     -->
    <bean id="serverConfig" class="com.l7tech.server.ServerConfigStub">
        <property name="clusterPropertyCache" ref="clusterPropertyCache"/>
    </bean>

   <bean id="clusterPropertyCache" class="com.l7tech.server.cluster.ClusterPropertyCache">
        <property name="clusterPropertyManager" ref="clusterPropertyManager"/>
    </bean>

    <!-- server side identity provider factory (same as the prod)-->
    <bean id="identityProviderFactory" class="com.l7tech.server.identity.IdentityProviderFactory">
        <constructor-arg ref="identityProviderConfigManager"/>
    </bean>

    <!-- test identity configuration manager -->
    <bean id="identityProviderConfigManager" class="com.l7tech.server.identity.TestIdentityProviderConfigManager">
    </bean>

    <!--
        Test Identity Provider Factory
    -->
    <bean id="testIdentityProviderFactory" class="com.l7tech.server.identity.TestIdentityProvider$Factory"/>

    <!-- LDAP IdentityProvider, UserManager and GroupManager factories -->
    <bean id="ldapIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.ldap.LdapIdentityProviderImpl"/>
        <constructor-arg value="ldapIdentityProvider"/>
    </bean>
    <bean id="ldapRuntimeConfig" class="com.l7tech.server.identity.ldap.LdapRuntimeConfig">
        <constructor-arg index="0" ref="serverConfig"/>
    </bean>
    <bean id="ldapIdentityProvider" class="com.l7tech.server.identity.ldap.LdapIdentityProviderImpl" scope="prototype">
        <property name="clientCertManager" ref="clientCertManager"/>
        <property name="ldapRuntimeConfig" ref="ldapRuntimeConfig"/>
        <property name="certificateAuthenticator" ref="certificateAuthenticator"/>
        <property name="userManager">
            <bean class="com.l7tech.server.identity.ldap.LdapUserManagerImpl" scope="prototype">
                <property name="ldapRuntimeConfig" ref="ldapRuntimeConfig"/>
            </bean>
        </property>
        <property name="groupManager">
            <bean class="com.l7tech.server.identity.ldap.LdapGroupManagerImpl" scope="prototype">
                <property name="ldapRuntimeConfig" ref="ldapRuntimeConfig"/>
            </bean>
        </property>
        <property name="configManager" ref="identityProviderConfigManager"/>
    </bean>

    <!--  test service admin -->
    <bean id="serviceAdmin" class="com.l7tech.server.service.ServiceAdminStub">
        <property name="policyValidator" ref="defaultPolicyValidator"/>
        <property name="serviceManager" ref="serviceManager"/>
    </bean>

    <bean id="resolutionConfigurationManager" class="com.l7tech.server.transport.ResolutionConfigurationManagerStub"/>

    <bean id="folderManager" class="com.l7tech.server.folder.FolderManagerStub"/>

    <bean id="folderCache" class="com.l7tech.server.folder.FolderCacheImpl">
        <constructor-arg index="0" ref="folderManager"/>
    </bean>

    <!-- service cache -->
    <bean id="serviceCache" class="com.l7tech.server.service.ServiceCacheStub" depends-on="wsdlStrategyServiceDocumentsInitializer">
        <constructor-arg index="0" ref="policyCache"/>
        <constructor-arg index="1"><null/></constructor-arg>
        <constructor-arg index="2" ref="serviceManager"/>
        <constructor-arg index="3" ref="serviceUsageManager"/>
        <constructor-arg index="4">
            <bean class="com.l7tech.server.service.resolution.ServiceResolutionManager">
                <constructor-arg index="0" ref="resolutionConfigurationManager"/>
                <constructor-arg index="1" value="Default"/>
                <constructor-arg index="2">
                    <list>
                        <bean class="com.l7tech.server.service.resolution.ServiceIdResolver"><constructor-arg ref="auditFactory"/></bean>
                        <bean class="com.l7tech.server.service.resolution.UriResolver"><constructor-arg ref="auditFactory"/></bean>
                        <bean class="com.l7tech.server.service.resolution.SoapActionResolver"><constructor-arg ref="auditFactory"/></bean>
                        <bean class="com.l7tech.server.service.resolution.UrnResolver"><constructor-arg ref="auditFactory"/></bean>
                    </list>
                </constructor-arg>
                <constructor-arg index="3">
                    <list>
                        <bean class="com.l7tech.server.service.resolution.SoapOperationResolver">
                            <constructor-arg ref="auditFactory"/>
                            <constructor-arg ref="serviceDocumentManager"/>
                        </bean>
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg index="5" ref="clusterInfoManager"/>
        <constructor-arg index="6"><null/></constructor-arg>
    </bean>

    <!-- server side service manager -->
    <bean id="serviceManager" class="com.l7tech.server.service.ServiceManagerStub">
        <constructor-arg ref="policyManager"/>
    </bean>

    <bean id="serviceUsageManager" class="com.l7tech.server.cluster.ServiceUsageManagerStub"/>

    <!-- test config uses the policy validator without persistence -->
    <bean id="defaultPolicyValidator" class="com.l7tech.policy.validator.DefaultPolicyValidator">
        <constructor-arg ref="policyManager"/>
        <constructor-arg ref="policyPathBuilderFactory"/>
    </bean>

    <!-- server side policy factory -->
    <bean id="policyFactory" class="com.l7tech.server.policy.ServerPolicyFactory">
        <constructor-arg ref="licenseManager"/>
        <constructor-arg ref="injector"/>
    </bean>

    <!-- server side trusted cert manager -->
    <bean id="trustedCertManager" name="trustedCertCache" class="com.l7tech.server.identity.cert.TestTrustedCertManager">
        <constructor-arg ref="defaultKey"/>
    </bean>

    <bean id="trustedCertServices" class="com.l7tech.server.identity.cert.TrustedCertServicesImpl">
        <constructor-arg ref="trustedCertCache"/>
    </bean>
    
    <!-- server side custom assertions registrar -->
    <bean id="customAssertionRegistrar" class="com.l7tech.server.policy.custom.CustomAssertionsRegistrarStub">
    </bean>

    <!-- server side client cert manager -->
    <bean id="clientCertManager" class="com.l7tech.server.identity.cert.ClientCertManagerStub">
    </bean>

    <!-- stub audit record manager -->
    <bean id="auditRecordManager" class="com.l7tech.server.audit.AuditRecordManagerStub">
    </bean>

    <!-- server side HTTP routing client trust manager -->
    <bean id="trustManager" class="com.l7tech.server.transport.http.SslClientTrustManager">
        <constructor-arg ref="trustedCertServices"/>
        <constructor-arg ref="certValidationProcessor"/>
        <constructor-arg>
            <bean class="com.l7tech.server.security.cert.CertValidationProcessor$Facility" factory-method="valueOf">
                <constructor-arg><value>OTHER</value></constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    <bean id="routingTrustManager" class="com.l7tech.server.transport.http.SslClientTrustManager">
        <constructor-arg ref="trustedCertServices"/>
        <constructor-arg ref="certValidationProcessor"/>
        <constructor-arg>
            <bean class="com.l7tech.server.security.cert.CertValidationProcessor$Facility" factory-method="valueOf">
                <constructor-arg><value>ROUTING</value></constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    <!-- server side HTTP routing hostname verifier -->
    <bean id="hostnameVerifier" class="com.l7tech.server.transport.http.SslClientHostnameVerifier">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="trustedCertServices"/>
    </bean>

    <!-- create test keys -->
    <!--<bean id="testKeys" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
        <!--<property name="staticMethod" value="com.l7tech.gateway.common.security.Keys.createTestSsgKeystoreProperties"/>-->
    <!--</bean>-->

    <bean id="masterPasswordManager" class="com.l7tech.server.security.MasterPasswordManagerStub">
        <constructor-arg>
            <value>test_mp_12345</value>
        </constructor-arg>
    </bean>

    <!-- ssl config  -->
    <bean id="defaultKey" class="com.l7tech.server.TestDefaultKey"/>

    <bean id="sslKeyEntry" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="defaultKey"/>
        <property name="targetMethod" value="getSslInfo"/>
    </bean>

    <bean id="sslKeystoreCertificate" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="sslKeyEntry"/>
        <property name="targetMethod" value="getCertificate"/>
    </bean>

    <bean id="sslKeystoreKey" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="sslKeyEntry"/>
        <property name="targetMethod" value="getPrivateKey"/>
    </bean>

    <bean id="sslKeyManagers" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="defaultKey"/>
        <property name="targetMethod" value="getSslKeyManagers"/>
    </bean>

    <!-- server Wss Decorator -->
    <bean id="wssDecorator" class="com.l7tech.security.xml.decorator.WssDecoratorImpl">
    </bean>

    <!-- server Message Processor -->
    <bean id="messageProcessor" class="com.l7tech.server.TestMessageProcessor">
        <constructor-arg ref="serviceCache"/>
        <constructor-arg ref="policyCache"/>
        <constructor-arg ref="wssDecorator"/>
        <constructor-arg ref="inboundSecureConversationContextManager"/>
    </bean>

    <!-- server side policy filter manager  -->
    <bean id="policyFilterManager" class="com.l7tech.server.policy.filter.FilterManager">
        <constructor-arg ref="identityProviderFactory"/>
        <constructor-arg>
            <list>
                <value>com.l7tech.server.policy.filter.IdentityRule</value>
                <value>com.l7tech.server.policy.filter.HideUnsupportedClientAssertions</value>
            </list>
        </constructor-arg>
    </bean>


    <bean id="auditContextFactory" class="com.l7tech.server.audit.AuditContextFactoryStub">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" value="testNodeId"/>
    </bean>

    <bean id="auditFactory" class="com.l7tech.server.audit.Auditor$DefaultAuditorFactory">
        <constructor-arg index="0"><null/></constructor-arg>
        <constructor-arg index="1"><null/></constructor-arg>
    </bean>

    <bean id="messageSummaryAuditFactory" class="com.l7tech.server.audit.MessageSummaryAuditFactory">
        <constructor-arg value="1234567890"/>
        <property name="messageContextMappingManager" ref="messageContextMappingManager"/>
        <property name="identityProviderFactory" ref="identityProviderFactory" />
    </bean>

    <bean id="messageProcessingAuditListener" class="com.l7tech.server.audit.MessageProcessingAuditListener">
        <constructor-arg index="0" ref="messageSummaryAuditFactory"/>
        <constructor-arg index="1" ref="messageProcessingEventChannel"/>
    </bean>

    <bean id="securityTokenResolver" class="com.l7tech.security.xml.SimpleSecurityTokenResolver">
        <constructor-arg index="0" ref="sslKeystoreCertificate"/>
        <constructor-arg index="1" ref="sslKeystoreKey"/>
    </bean>

    <bean id="licenseManager" class="com.l7tech.server.TestLicenseManager">
    </bean>

    <bean id="serviceTemplateBootstrapService" class="com.l7tech.server.service.ServiceTemplateBootstrapService">
        <constructor-arg index="0" ref="folderManager"/>
        <constructor-arg index="1" ref="serviceManager"/>
        <constructor-arg index="2" ref="serviceDocumentManager"/>
        <constructor-arg index="3" ref="policyVersionManager"/>
        <constructor-arg index="4" ref="serviceTemplateManager"/>
    </bean>

    <bean id="serviceTemplateManager" class="com.l7tech.server.service.ServiceTemplateManagerImpl"/>


    <bean id="certificateAuthenticator" class="com.l7tech.server.identity.cert.CertificateAuthenticator">
        <constructor-arg ref="clientCertManager"/>
        <constructor-arg ref="certValidationProcessor"/>
    </bean>
    
    <bean id="soapFaultManager" class="com.l7tech.server.util.SoapFaultManager">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" >
            <null/>
        </constructor-arg>
    </bean>

    <bean id="clusterPropertyManager" class="com.l7tech.server.MockClusterPropertyManager"/>

    <bean id="schemaConfiguration" class="com.l7tech.server.communityschemas.SchemaConfiguration" depends-on="clusterPropertyManager">
        <constructor-arg ref="serverConfig"/>
    </bean>

    <bean id="schemaManager" class="com.l7tech.server.communityschemas.SchemaManagerImpl">
        <constructor-arg index="0" ref="schemaConfiguration"/>
        <constructor-arg index="1" >
            <null/>
        </constructor-arg>
        <constructor-arg index="2">
            <list/>
        </constructor-arg>
        <constructor-arg index="3" >
            <null/>
        </constructor-arg>
    </bean>

    <bean id="httpClientFactory" class="com.l7tech.server.util.HttpClientFactory">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="trustManager"/>
        <constructor-arg ref="hostnameVerifier"/>
    </bean>

    <bean id="anonHttpClientFactory" class="com.l7tech.server.util.HttpClientFactory">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="trustManager"/>
        <constructor-arg ref="hostnameVerifier"/>
    </bean>

    <bean id="anonUrlHttpClientFactory" class="com.l7tech.server.util.HttpClientFactory">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="trustManager"/>
        <constructor-arg ref="hostnameVerifier"/>
    </bean>


    <!-- Http connection clean up for http client 4.X -->
    <bean id="httpConnectionIdleTimeoutManager" class="com.l7tech.server.transport.http.HttpConnectionIdleTimeoutManager">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1">
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="HTTP Connection Idle Timeout"/>
            </bean>
        </constructor-arg>
    </bean>
    <!-- server side HTTP routing HTTP client factory -->
    <bean id="httpRoutingHttpClientFactory2"
          class="com.l7tech.server.util.TestingHttpClientFactory"/>

    <bean id="stashManagerFactory" class="com.l7tech.server.TestStashManagerFactory" factory-method="getInstance"/>

    <bean id="clusterInfoManager" class="com.l7tech.server.ClusterInfoManagerStub"/>

    <bean id="assertionRegistry" class="com.l7tech.policy.AssertionRegistry"/>

    <bean id="wspReader" class="com.l7tech.policy.wsp.WspReader">
        <constructor-arg ref="assertionRegistry"/>
    </bean>

    <bean id="jmsPropertyMapper" class="com.l7tech.server.transport.jms.JmsPropertyMapper">
        <constructor-arg ref="trustedCertManager"/>
        <constructor-arg ref="defaultKey"/>
    </bean>

    <bean id="jmsResourceManager" class="com.l7tech.server.transport.jms2.JmsResourceManager">
        <constructor-arg index="0" value="JmsRoutingTest"/>
        <constructor-arg index="1" ref="serverConfig"/>
    </bean>

    <bean id="jmsEndpointManager" class="com.l7tech.server.transport.jms.JmsEndpointManagerStub"/>

    <bean id="jmsConnectionManager" class="com.l7tech.server.transport.jms.JmsConnectionManagerStub"/>

    <bean id="jmsBlockPolicy" class="com.l7tech.server.transport.jms2.JmsBlockPolicy"/>

    <bean id="jmsThreadPool" class="com.l7tech.server.util.ThreadPoolBean">
        <constructor-arg index="0"  ref="serverConfig" />
        <constructor-arg index="1" value="JMS Thread Pool" />
        <constructor-arg index="2" value="jmsListenerThreadLimit" />
        <constructor-arg index="3" value="jms.listenerThreadLimit" />
        <constructor-arg index="4" value="25" />
    </bean>

    <bean id="jmsBootprocess" class="com.l7tech.server.transport.jms2.JmsBootProcess">
        <constructor-arg index="0" ref="jmsThreadPool" />
        <constructor-arg index="1"  ref="licenseManager"/>
        <constructor-arg index="2"  ref="jmsConnectionManager"/>
        <constructor-arg index="3"  ref="jmsEndpointManager"/>
        <constructor-arg index="4"  ref="jmsPropertyMapper"/>
        <constructor-arg index="5">
            <!--<bean class="com.l7tech.server.transport.jms2.synch.LegacyJmsEndpointListenerFactory"/>-->
            <bean class="com.l7tech.server.transport.jms2.asynch.PooledJmsEndpointListenerFactory"/>
        </constructor-arg>
        <constructor-arg index="6"><null/></constructor-arg>
    </bean>
    <!-- Jms2 -->

    <bean id="applicationEventProxy" class="com.l7tech.server.util.ApplicationEventProxy"/>

    <bean id="messageProcessingEventChannel" class="com.l7tech.server.util.EventChannel"/>

    <bean id="crlCache" class="com.l7tech.server.TestCrlCache"/>

    <bean id="certValidationProcessor" class="com.l7tech.server.security.cert.TestCertValidationProcessor"/>

    <bean id="policyManager" class="com.l7tech.server.policy.PolicyManagerStub"/>

    <bean id="policyVersionManager" class="com.l7tech.server.policy.PolicyVersionManagerStub"/>

    <bean id="policyCache" class="com.l7tech.server.policy.PolicyCacheImpl">
        <constructor-arg index="0"><null/></constructor-arg>
        <constructor-arg index="1" ref="policyFactory"/>
        <constructor-arg index="2" ref="folderCache"/>
        <property name="policyManager" ref="policyManager"/>
    </bean>

    <bean id="policyPathBuilderFactory" class="com.l7tech.policy.PolicyPathBuilderFactory">
        <constructor-arg ref="policyManager"/>
        <constructor-arg ref="entityFinder"/>
    </bean>

    <bean id="distributedMessageIdManager" class="com.l7tech.server.StubMessageIdManager"/>

    <bean id="messageContextMappingManager" class="com.l7tech.server.mapping.MessageContextMappingManagerStub"/>

    <bean id="mockJdbcDatabaseManager" class="com.l7tech.server.jdbc.MockJdbcDatabaseManager"/>

    <bean id="cassandraEntityManager" class="com.l7tech.server.cassandra.CassandraConnectionEntityManagerStub"/>

    <bean id="cassandraConnectionManager" class="com.l7tech.server.cassandra.CassandraConnectionManagerStub"/>

    <bean id="cassandraQueryManager" class="com.ca.datasources.cassandra.CassandraQueryManagerStub"/>

    <bean id="encapsulatedAssertionConfigManager" class="com.l7tech.server.policy.MockEncapsulatedAssertionConfigManager"/>

    <bean id="jdbcQueryingManager" class="com.l7tech.server.jdbc.JdbcQueryingManagerStub">
        <constructor-arg ref="mockJdbcDatabaseManager"/>
    </bean>

    <bean id="passwordEnforcerManager" class="com.l7tech.server.security.PasswordEnforcerManager">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="passwordPolicyManger"/>
        <constructor-arg ref="roleManager"/>
        <constructor-arg ref="passwordHasher"/>
        <constructor-arg ref="testPasswordPolicy"/>
        <constructor-arg ref="testPasswordPolicy"/>
    </bean>

    <bean id="testPasswordPolicy" class="com.l7tech.identity.IdentityProviderPasswordPolicy">
        <constructor-arg index="0" value="true"/>
        <!-- forcePasswordChange -->
        <constructor-arg index="1" value="true"/>
        <!-- noRepeatingCharacters -->
        <constructor-arg index="2" value="3"/>
        <!-- minPasswordLength -->
        <constructor-arg index="3" value="10"/>
        <!-- maxPasswordLength -->
        <constructor-arg index="4" value="0"/>
        <!-- minUpperCharacters -->
        <constructor-arg index="5" value="0"/>
        <!-- minLowerCharacters -->
        <constructor-arg index="6" value="0"/>
        <!-- minNumberCharacters -->
        <constructor-arg index="7" value="0"/>
        <!-- minSymbolCharacters -->
        <constructor-arg index="8" value="0"/>
        <!-- minNonNumberCharacters -->
        <constructor-arg index="9" value="0"/>
        <!-- minCharacterDifference -->
        <constructor-arg index="10" value="1"/>
        <!-- passwordRepeatFrequency -->
        <constructor-arg index="11" value="90"/>
        <!-- passwordExpiryDays -->
        <constructor-arg index="12" value="false"/>
        <!-- passwordChangeDaily -->
    </bean>

    <bean id="passwordPolicyManger" class="com.l7tech.server.identity.IdentityProviderPasswordPolicyManagerStub"/>

    <bean id="passwordHasher" class="com.l7tech.server.identity.internal.TestPasswordHasher"/>

    <bean id="trustedEsmUserManager" class="com.l7tech.server.TrustedEsmUserManagerStub"/>

    <bean id="logonManager" class="com.l7tech.server.logon.LogonInfoManagerStub"/>

    <bean id="serviceDocumentManager" class="com.l7tech.server.service.ServiceDocumentManagerStub"/> 

    <bean id="wsdlStrategyServiceDocumentsInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.service.PersistentServiceDocumentWsdlStrategy"/>
        <property name="targetMethod" value="setServiceDocumentManager"/>
        <property name="arguments">
            <list>
                <ref bean="serviceDocumentManager"/>
            </list>
        </property>
    </bean>

    <bean id="ssgConnectorManager" class="com.l7tech.server.transport.SsgConnectorManagerStub"/>

    <bean id="ssgKeyStoreManager" class="com.l7tech.server.security.keystore.SsgKeyStoreManagerStub"/>

    <bean id="inboundSecureConversationContextManager" class="com.l7tech.server.secureconversation.InboundSecureConversationContextManager">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" ref="storedSecureConversationSessionManager"/>
    </bean>

    <bean id="outboundSecureConversationContextManager" class="com.l7tech.server.secureconversation.OutboundSecureConversationContextManager">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" ref="storedSecureConversationSessionManager"/>
    </bean>

    <bean id="kerberosSessionContextManager" class="com.l7tech.server.security.kerberos.KerberosSessionContextManager"/>

    <bean id="securityContextFinder" class="com.l7tech.server.security.DelegatingSecurityContextFinder">
        <constructor-arg index="0">
            <list>
                <ref bean="inboundSecureConversationContextManager"/>
                <ref bean="kerberosSessionContextManager"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="storedSecureConversationSessionManager" class="com.l7tech.server.secureconversation.StoredSecureConversationSessionManagerStub"/>

    <bean id="injector" class="com.l7tech.server.util.ApplicationContextInjector"/>

    <bean id="counterManager" class="com.l7tech.server.sla.CounterManagerStub"/>

    <bean id="dateTimeConfigUtils" class="com.l7tech.util.DateTimeConfigUtils" />

    <bean id="timeSource" class="com.l7tech.util.TimeSource"/>

    <bean id="entityFinder" class="com.l7tech.server.EntityFinderStub"/>

    <bean id="sshSessionFactory" class="com.l7tech.server.ssh.SshSessionFactory"/>

    <bean id="sshSessionPool" class="com.l7tech.server.ssh.SshSessionPool">
        <constructor-arg ref="sshSessionFactory" />
        <constructor-arg ref="serverConfig" />
    </bean>

    <bean id="siteMinderConfigurationManager" class="com.l7tech.server.siteminder.SiteMinderConfigurationManagerStub"/>

    <bean id="policyValidator" class="com.l7tech.policy.PolicyValidatorStub" />

    <bean id="jdbcConnectionManager" class="com.l7tech.server.jdbc.JdbcConnectionManagerStub">
        <constructor-arg>
            <list value-type="com.l7tech.gateway.common.jdbc.JdbcConnection" />
        </constructor-arg>
    </bean>

    <bean id="resourceEntryManager" class="com.l7tech.server.globalresources.ResourceEntryManagerStub" />
    <bean id="ssgActiveConnectorManager" class="com.l7tech.server.transport.SsgActiveConnectorManagerStub" />
    <bean id="policyExporterImporterManager" class="com.l7tech.server.export.PolicyExporterImporterManagerStub" />
    <bean id="httpConfigurationManager" class="com.l7tech.server.globalresources.HttpConfigurationManagerStub" />
    <bean id="roleManager" class="com.l7tech.server.security.rbac.MockRoleManager" >
        <constructor-arg>
            <ref local="entityFinder" />
        </constructor-arg>
    </bean>
    <bean id="securePasswordManager" class="com.l7tech.server.security.password.SecurePasswordManagerStub" />
    <bean id="rbacServices" class="com.l7tech.server.security.rbac.RbacServicesStub" />
    <alias name="rbacServices" alias="securityFilter" />
    <bean id="securityZoneManager" class="com.l7tech.server.security.rbac.SecurityZoneManagerStub" >
        <constructor-arg>
            <list value-type="com.l7tech.objectmodel.SecurityZone" />
        </constructor-arg>
    </bean>
    <bean id="uddiServiceControlManager" class="com.l7tech.server.uddi.UDDIServiceControlManagerStub" />
    <bean id="uddiServiceWsdlUpdateChecker" class="com.l7tech.server.uddi.ServiceWsdlUpdateChecker">
        <constructor-arg index="0" ref="serviceManager"/>
        <constructor-arg index="1" ref="uddiServiceControlManager"/>
    </bean>
    <bean id="customKeyValueStoreManager" class="com.l7tech.server.store.CustomKeyValueStoreManagerStub" >
        <constructor-arg>
            <list value-type="com.l7tech.policy.CustomKeyValueStore" />
        </constructor-arg>
    </bean>
    <bean id="assertionAccessManager" class="com.l7tech.server.AssertionAccessManagerStub" >
        <constructor-arg>
            <list value-type="com.l7tech.policy.AssertionAccess" />
        </constructor-arg>
    </bean>

    <bean id="policyAliasManager" class="com.l7tech.server.service.PolicyAliasManagerStub" >
        <constructor-arg>
            <list />
        </constructor-arg>
    </bean>

    <bean id="emailListenerManager" class="com.l7tech.server.transport.email.EmailListenerManagerStub" >
        <constructor-arg>
            <list />
        </constructor-arg>
    </bean>

    <bean id="serviceAliasManager" class="com.l7tech.server.service.ServiceAliasManagerStub" >
        <constructor-arg>
            <list />
        </constructor-arg>
    </bean>

    <bean id="dependencyAnalyzer" class="com.l7tech.server.search.DependencyAnalyzerImpl"/>

    <bean id="entityBundleImporter" class="com.l7tech.server.bundling.EntityBundleImporterStub" />
    <bean id="entityBundleExporter" class="com.l7tech.server.bundling.EntityBundleExporterStub" />
    <bean id="mappingInstructionsBuilder" class="com.l7tech.server.bundling.MappingInstructionsBuilder" />

    <bean id="entityCrud" class="com.l7tech.server.EntityCrudImpl">
        <property name="sessionFactory" ><bean class="com.l7tech.server.SessionFactoryStub"/></property>
        <constructor-arg ref="entityFinder"/>
        <constructor-arg>
            <list>
                <ref bean="auditRecordManager"/>
                <ref bean="clusterPropertyManager"/>
                <ref bean="resourceEntryManager"/>
                <ref bean="folderManager"/>
                <ref bean="identityProviderConfigManager"/>
                <ref bean="trustedCertManager"/>
                <ref bean="policyAliasManager"/>
                <ref bean="roleManager"/>
                <ref bean="serviceAliasManager"/>
                <ref bean="serviceDocumentManager"/>
                <ref bean="emailListenerManager"/>
                <ref bean="jmsConnectionManager"/>
                <ref bean="jmsEndpointManager"/>
                <bean class="com.l7tech.server.migration.IdentityEntityManager">
                    <constructor-arg index="0" value="com.l7tech.identity.User"/>
                    <constructor-arg index="1" ref="identityProviderFactory"/>
                </bean>
                <bean class="com.l7tech.server.migration.IdentityEntityManager">
                    <constructor-arg index="0" value="com.l7tech.identity.Group"/>
                    <constructor-arg index="1" ref="identityProviderFactory"/>
                </bean>
                <ref bean="ssgActiveConnectorManager"/>
                <ref bean="encapsulatedAssertionConfigManager"/>
                <ref bean="assertionAccessManager"/>
                <ref bean="httpConfigurationManager"/>
                <ref bean="jdbcConnectionManager"/>
                <ref bean="securePasswordManager"/>
                <ref bean="uddiServiceControlManager"/>
                <ref bean="siteMinderConfigurationManager"/>
                <ref bean="serviceManager" />
                <ref bean="policyManager" />
                <ref bean="genericEntityManager"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="dependencyProcessorStore" class="com.l7tech.server.search.processors.DependencyProcessorStore">
        <constructor-arg>
            <map>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.ANY"/></key>
                    <bean class="com.l7tech.server.search.processors.DefaultDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.POLICY"/></key>
                    <bean class="com.l7tech.server.search.processors.PolicyDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SERVICE"/></key>
                    <bean class="com.l7tech.server.search.processors.ServiceDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.FOLDER"/></key>
                    <bean class="com.l7tech.server.search.processors.FolderDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.HTTP_CONFIGURATION"/></key>
                    <bean class="com.l7tech.server.search.processors.HttpConfigurationDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.JDBC_CONNECTION"/></key>
                    <bean class="com.l7tech.server.search.processors.JdbcConnectionDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SECURE_PASSWORD"/></key>
                    <bean class="com.l7tech.server.search.processors.SecurePasswordDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.ASSERTION"/></key>
                    <bean class="com.l7tech.server.search.processors.AssertionDependencyProcessor">
                        <constructor-arg><bean class="com.l7tech.server.search.processors.DefaultAssertionDependencyProcessor"/></constructor-arg>
                    </bean>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.CLUSTER_PROPERTY"/></key>
                    <bean class="com.l7tech.server.search.processors.ClusterPropertyDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.ID_PROVIDER_CONFIG"/></key>
                    <bean class="com.l7tech.server.search.processors.IdentityProviderProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SSG_ACTIVE_CONNECTOR"/></key>
                    <bean class="com.l7tech.server.search.processors.SsgActiveConnectorDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SSG_CONNECTOR"/></key>
                    <bean class="com.l7tech.server.search.processors.SsgConnectorDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.JMS_ENDPOINT"/></key>
                    <bean class="com.l7tech.server.search.processors.JmsEndpointDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.GENERIC"/></key>
                    <bean class="com.l7tech.server.search.processors.GenericEntityDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.POLICY_ALIAS"/></key>
                    <bean class="com.l7tech.server.search.processors.PolicyServiceAliasDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SERVICE_ALIAS"/></key>
                    <bean class="com.l7tech.server.search.processors.PolicyServiceAliasDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.REVOCATION_CHECK_POLICY"/></key>
                    <bean class="com.l7tech.server.search.processors.RevocationCheckPolicyDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.SSG_PRIVATE_KEY"/></key>
                    <bean class="com.l7tech.server.search.processors.SsgKeyEntryDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.RBAC_ROLE"/></key>
                    <bean class="com.l7tech.server.search.processors.RoleDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.CASSANDRA_CONNECTION"/></key>
                    <bean class="com.l7tech.server.search.processors.CassandraConnectionDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.search.Dependency.DependencyType.WORK_QUEUE"/></key>
                    <bean class="com.l7tech.server.search.processors.WorkQueueDependencyProcessor"/>
                </entry>
            </map>
        </constructor-arg>
    </bean>

    <bean id="assertionDependencyProcessorRegistry" class="com.l7tech.server.search.DependencyProcessorRegistry">
        <constructor-arg>
            <util:map key-type="java.lang.String" value-type="com.l7tech.server.search.processors.DependencyProcessor">
                <entry key="#{T(String).valueOf(T(com.l7tech.policy.assertion.xmlsec.LookupTrustedCertificateAssertion))}">
                    <bean class="com.l7tech.server.search.processors.AssertionLookupTrustedCertificateProcessor"/>
                </entry>
                <entry key="#{T(String).valueOf(T(com.l7tech.policy.assertion.xmlsec.WsSecurity))}">
                    <bean class="com.l7tech.server.search.processors.AssertionWsSecurityProcessor"/>
                </entry>
            </util:map>
        </constructor-arg>
    </bean>

    <bean id="ssgActiveConnectorDependencyProcessorRegistry" class="com.l7tech.server.search.DependencyProcessorRegistry" />

    <bean id="genericEntityDependencyProcessorRegistry" class="com.l7tech.server.search.DependencyProcessorRegistry" />

    <bean id="ssgConnectorDependencyProcessorRegistry" class="com.l7tech.server.search.DependencyProcessorRegistry">
        <constructor-arg>
            <util:map key-type="java.lang.String" value-type="com.l7tech.server.search.processors.DependencyProcessor">
                <entry>
                    <key><util:constant static-field="com.l7tech.gateway.common.transport.SsgConnector.SCHEME_HTTPS"/></key>
                    <ref bean="sslSsgConnectorDependencyProcessor"/>
                </entry>
                <entry>
                    <key><util:constant static-field="com.l7tech.gateway.common.transport.SsgConnector.SCHEME_FTPS"/></key>
                    <ref bean="sslSsgConnectorDependencyProcessor"/>
                </entry>
            </util:map>
        </constructor-arg>
    </bean>
    <bean id="sslSsgConnectorDependencyProcessor" class="com.l7tech.server.search.processors.SslSsgConnectorDependencyProcessor" />

    <bean id="genericEntityManager" class="com.l7tech.server.entity.GenericEntityManagerStub"/>

    <bean id="debugManager" class="com.l7tech.server.stepdebug.DebugManagerImpl">
        <constructor-arg ref="auditFactory"/>
    </bean>

    <bean id="ssgFirewallRuleManager" class="com.l7tech.server.transport.firewall.SsgFirewallRulesManagerStub">
        <constructor-arg>
            <list />
        </constructor-arg>
    </bean>

    <bean id="sampleMessageManager" class="com.l7tech.server.service.SampleMessageManagerStub"/>

    <bean id="clusterStatusAdmin" class="com.l7tech.gateway.common.cluster.ClusterStatusAdminStub"/>

    <bean id="cassandraConnectionEntityManager" class="com.l7tech.server.cassandra.CassandraConnectionEntityManagerStub"/>

    <bean id="workQueueEntityManager" class="com.l7tech.server.workqueue.WorkQueueEntityManagerStub"/>

    <bean id="workQueueExecutorManager" class="com.l7tech.server.workqueue.WorkQueueExecutorManagerImpl">
        <constructor-arg ref="workQueueEntityManager"/>
    </bean>

    <bean id="policyBackedServiceRegistry" class="com.l7tech.server.polback.PolicyBackedServiceRegistry" />

    <bean id="policyBackedServiceManager" class="com.l7tech.server.polback.PolicyBackedServiceManagerStub" />

    <bean id="scheduledTaskManager" class="com.l7tech.server.task.ScheduledTaskManagerStub"/>

    <bean id="clusterIDManager" class="com.l7tech.server.cluster.ClusterIDManagerStub" />

    <bean id="clusterNodeId" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref='clusterIDManager'/>
        <property name="targetMethod" value="thisNodeId"/>
    </bean>

</beans>
