<?xml version="1.0" encoding="UTF-8"?>
<!--
    The Application Context contains the definitions that describe the SSG server side components.
    Things such as identitiy managers, trust components, policy services token services etc. are defined
    here.
    Admin Services are defined in adminContext.xml.
    Data Access (Hibernate, Transactions) is defined in dataAccessContext.xml.
-->
<!--suppress SpringModelInspection -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation= "http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-2.5.xsd">


    <!-- enable automatic proxy generation for any class or superclass annotated with @Transactional -->
    <tx:annotation-driven order="20000"/>

    <context:annotation-config/>

    <!-- export beans to JMX -->
    <context:mbean-export/>

    <bean id="systemProperties" class="com.l7tech.server.SystemProperties">
        <!-- Don't fully initialize serverconfig (no cluster propertes / db access) -->
        <constructor-arg><bean class="com.l7tech.server.ServerConfig" factory-method="getInstance"/></constructor-arg>
    </bean>

    <!-- Crypto init -->
    <bean id="initLunaPinFinder" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.security.keystore.luna.GatewayLunaPinFinder"/>
        <property name="targetMethod" value="setClusterPassphrase"/>
        <property name="arguments">
            <bean class="com.l7tech.server.util.PropertiesValueFactoryBean">
                <constructor-arg ref="nodeProperties"/>
                <constructor-arg value="node.cluster.pass"/>
            </bean>
        </property>
    </bean>

    <!-- SSG boot process -->
    <bean id="ssgBoot" class="com.l7tech.server.BootProcess" depends-on="systemAuditListener systemProperties serviceWsdlImportChecker"><!-- sinkManager -->
        <property name="serverConfig" ref="serverConfig"/>
        <property name="otherPropertiesFiles">
            <map>
                <entry key="com.l7tech.server"
                       value="${com.l7tech.server.configDirectory}${file.separator}node.properties"/>
            </map>
        </property>
        <property name="systemProperties" ref="systemProperties"/>
    </bean>

    <bean id="clusterBoot" class="com.l7tech.server.cluster.ClusterBootProcess">
        <constructor-arg index="0" ref="clusterInfoManager"/>   
        <constructor-arg index="1" ref="distributedMessageIdManager"/>
        <constructor-arg index="2"  ref="serverConfig"/>
    </bean>

    <bean id="ssgShutdown" class="com.l7tech.server.boot.ShutdownWatcher"/>

    <!-- JMS boot process  -->
    <bean id="jmsBootProcess" class="com.l7tech.server.transport.jms2.JmsBootProcess">
        <constructor-arg type="com.l7tech.server.ServerConfig" ref="serverConfig"/>
        <constructor-arg type="com.l7tech.gateway.common.LicenseManager" ref="licenseManager"/>
        <constructor-arg type="com.l7tech.server.transport.jms.JmsConnectionManager" ref="jmsConnectionManager"/>
        <constructor-arg type="com.l7tech.server.transport.jms.JmsEndpointManager" ref="jmsEndpointManager"/>
        <constructor-arg type="com.l7tech.server.transport.jms.JmsPropertyMapper" ref="jmsPropertyMapper"/>
        <constructor-arg type="java.util.Timer"><null/></constructor-arg>
        <property name="jmsEndpointListenerFactory">
            <bean class="com.l7tech.server.transport.jms2.asynch.PooledJmsEndpointListenerFactory"/>
        </property>
    </bean>

    <!-- Email boot process -->
    <bean id="emailListenerBootProcess" class="com.l7tech.server.transport.email.EmailListenerBootProcess">
        <constructor-arg type="com.l7tech.server.ServerConfig" ref="serverConfig"/>
        <constructor-arg type="com.l7tech.gateway.common.LicenseManager" ref="licenseManager"/>
        <constructor-arg type="com.l7tech.server.transport.email.EmailListenerManager" ref="emailListenerManager"/>
        <constructor-arg ref="clusterNodeId"/>
        <constructor-arg type="java.util.Timer"><null/></constructor-arg>
        <property name="pollingEmailListenerFactory" ref="pollingEmailListenerFactory"/>
    </bean>

    <bean id="pollingEmailListenerFactory" class="com.l7tech.server.transport.email.asynch.PooledPollingEmailListenerFactory">
        <constructor-arg index="0" ref="serverConfig"/>
    </bean>

    <!-- Abstract "parent" of any bean that needs access to sessionFactory and transactionManager -->
    <bean id="hibernateBean" abstract="true">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--
    * singleton using the factory method. This is transitional, as it is referencef from
    * too many places.
    -->
    <bean id="serverConfig" class="com.l7tech.server.ServerConfig" factory-method="getInstance" depends-on="configureBackgroundTimer">
        <property name="propertyChangeListener">
            <bean class="com.l7tech.server.util.LazyPropertyChangeDispatcher">
                <constructor-arg>
                    <map>
                        <entry key="serviceMetricsServices">
                            <list>
                                <value>serviceMetricsEnabled</value>
                                <value>customerMapping.addToServiceMetrics</value>
                            </list>
                        </entry>

                        <entry key="messageSummaryAuditFactory"><list><value>customerMapping.addToGatewayAuditEvents</value></list></entry>

                        <entry key="ssgConnectorManager"><list><value>interfaceTags</value></list></entry>

                        <entry key="certValidationProcessor"><list><value>pkixTrust.useDefaultAnchors</value></list></entry>
                        <entry key="jmsBootProcess">
                            <list>
                                <value>ioJmsErrorSleep</value>
                                <value>ioJmsMessageMaxBytes</value>
                                <value>jmsListenerThreadLimit</value>
                                <value>jmsEndpointThreadDistribution</value>
                            </list>
                        </entry>
                        <entry key="trustedCertManager"><list><value>trustedCert.expiryCheckPeriod</value></list></entry>
                        <entry key="httpTransportModule"><list><value>ioHttpPoolMaxConcurrency</value></list></entry>
                        <entry key="trafficLogger">
                            <list>
                                <value>trafficLoggerDetail</value>
                                <value>trafficLoggerRecordReq</value>
                                <value>trafficLoggerRecordRes</value>
                                <value>trafficLoggerSelective</value>
                            </list>
                        </entry>
                        <entry key="sinkManager"><list><value>logLevels</value></list></entry>
                        <entry key="auditLogListenerTarget">
                            <list>
                                <value>auditBatchExternal</value>
                                <value>auditLogFormatServiceHeader</value>
                                <value>auditLogFormatServiceFooter</value>
                                <value>auditLogFormatServiceDetail</value>
                                <value>auditLogFormatOther</value>
                                <value>auditLogFormatOtherDetail</value>
                            </list>
                        </entry>
                        <entry key="schemaManager">
                            <list>
                                <value>schemaMaxCacheEntries</value>
                                <value>schemaMaxCacheAge</value>
                                <value>schemaRecompileLatency</value>
                                <value>schemaRecompileMinAge</value>
                                <value>schemaRecompileMaxAge</value>
                                <value>schemaCacheMaxSchemaSize</value>
                                <value>schemaSoftwareFallback</value>
                            </list>
                        </entry>
                        <entry key="auditDetailFilter"><list><value>auditAssociatedLogsThreshold</value></list></entry>
                        <entry key="defaultKey">
                            <list>
                                <value>keyStoreDefaultSslKey</value>
                                <value>keyStoreDefaultCaKey</value>
                                <value>keyStoreSearchForAlias</value>
                            </list>
                        </entry>
                        <entry key="logonService">
                            <list>
                                <value>logon.lockoutTime</value>
                                <value>logon.maxAllowableAttempts</value>
                            </list>
                        </entry>
                        <entry key="passwordEnforcerManager"><list><value>password.expiry</value></list></entry>
                        <entry key="auditArchiver">
                            <list>
                                <value>auditArchiverTimerPeriod</value>
                                <value>auditArchiverStaleTimeout</value>
                                <value>auditArchiverShutdownThreshold</value>
                                <value>auditArchiverStartThreshold</value>
                                <value>auditArchiverStopThreshold</value>
                                <value>auditArchiverBatchSize</value>
                            </list>
                        </entry>
                        <entry key="auditArchiveReceiver">
                            <list>
                                <value>auditArchiverFtpConfig</value>
                                <value>auditArchiverFtpMaxUploadFileSize</value>
                            </list>
                        </entry>
                        <entry key="kerberosConfig">
                            <list>
                                <value>krb5Keytab</value>
                                <value>krb5Realm</value>
                                <value>krb5KDC</value>
                            </list>
                        </entry>
                        <entry key="pollingEmailListenerFactory">
                            <list>
                                <value>ioMailInConnectTimeout</value>
                                <value>ioMailInTimeout</value>
                            </list>
                        </entry>
                        <entry key="identityProviderFactory">
                            <list>
                                <value>ldapReadTimeout</value>
                                <value>ldapConnectionTimeout</value>
                            </list>
                        </entry>
                        <entry key="adminSessionManager"><list><value>principalSessionCacheMaxTime</value></list></entry>
                        <entry key="logRecordRingBuffer">
                            <list>
                                <value>logBuffer.paramSize</value>
                                <value>logBuffer.messageSize</value>
                            </list>
                        </entry>
                    </map>
                </constructor-arg>
            </bean>
        </property>
        <property name="clusterPropertyCache" ref="clusterPropertyCache"/>
    </bean>
    <bean id="managedServerConfig" class="com.l7tech.server.ServerConfig$ManagedServerConfig">
        <constructor-arg ref="serverConfig"/>
    </bean>

    <bean id="masterPasswordManager" class="com.l7tech.util.MasterPasswordManager" depends-on="systemProperties">
        <constructor-arg>
            <bean class="com.l7tech.util.DefaultMasterPasswordFinder">
                <constructor-arg value="file:${com.l7tech.server.configDirectory}${file.separator}omp.dat"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Database password encryption, for reading passwords from cluster-wide sources ie cluster properties -->
    <bean id="dbPasswordEncryption" class="com.l7tech.util.MasterPasswordManager">
        <constructor-arg ref="clusterSharedKey"/>
    </bean>

    <!-- Current cluster shared key, as raw byte array -->
    <bean id="clusterSharedKey" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="sharedKeyManager"/>
        <property name="targetMethod" value="getSharedKey"/>
    </bean>

    <bean id="propertiesDecryptor" class="com.l7tech.server.util.PropertiesDecryptor">
        <constructor-arg ref="masterPasswordManager"/>
        <property name="passwordProperties">
            <list>
                <value>node.cluster.pass</value>
                <value>node.db.config.main.pass</value>
            </list>
        </property>
    </bean>

    <!-- TODO cachingRoleManager? -->
    <bean id="roleManager" class="com.l7tech.server.security.rbac.RoleManagerImpl" parent="hibernateBean">
        <property name="rbacServices" ref="rbacServices"/>
    </bean>
    <bean id="rbacServices" class="com.l7tech.server.security.rbac.RbacServicesImpl">
        <property name="roleManager" ref="roleManager"/>
        <property name="entityFinder" ref="entityFinder"/>
    </bean>

    <!-- server side identity provider factory -->
    <bean id="identityProviderFactory" class="com.l7tech.server.identity.IdentityProviderFactory">
        <constructor-arg ref="identityProviderConfigManager"/>
    </bean>

    <!-- server side identity configuration manager -->
    <bean id="identityProviderConfigManager" class="com.l7tech.server.identity.IdProvConfManagerServer" parent="hibernateBean">
        <property name="roleManager" ref="roleManager"/>
    </bean>

    <!--
        Internal Identity Provider, UserManager and GroupManager

        The factory method with support with construction arguments. The bean must be instantiated
        programatically with the required runtime construction arguments (IdentityProviderConfig)
        See IdentityProviderFactory implementation.
    -->
    <bean id="internalIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.internal.InternalIdentityProviderImpl"/>
        <constructor-arg value="internalIdentityProvider"/>
    </bean>
    <bean id="internalIdentityProvider" class="com.l7tech.server.identity.internal.InternalIdentityProviderImpl" scope="prototype">
        <property name="clientCertManager" ref="clientCertManager"/>
        <property name="certificateAuthenticator" ref="certificateAuthenticator"/>
        <property name="userManager" ref="internalUserManager"/>
        <property name="groupManager" ref="internalGroupManager"/>
    </bean>
    <bean name="internalUserManager" class="com.l7tech.server.identity.internal.InternalUserManagerImpl" scope="prototype" parent="hibernateBean">
        <constructor-arg ref="roleManager"/>
        <constructor-arg ref="clientCertManager"/>
        <constructor-arg ref="logonManager"/>
    </bean>
    <bean name="internalGroupManager" class="com.l7tech.server.identity.internal.InternalGroupManagerImpl" scope="prototype" parent="hibernateBean">
        <constructor-arg ref="roleManager"/>
    </bean>

    <!-- Federated Identity Provider, UserManager and GroupManager factories -->
    <bean id="federatedIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.fed.FederatedIdentityProviderImpl"/>
        <constructor-arg value="federatedIdentityProvider"/>
    </bean>
    <bean id="federatedIdentityProvider" class="com.l7tech.server.identity.fed.FederatedIdentityProviderImpl" scope="prototype">
        <property name="clientCertManager" ref="clientCertManager"/>
        <property name="trustedCertManager" ref="trustedCertManager"/>
        <property name="trustedCertServices" ref="trustedCertServices"/>
        <property name="certValidationProcessor" ref="certValidationProcessor"/>
        <property name="userManager" ref="federatedUserManager"/>
        <property name="groupManager" ref="federatedGroupManager"/>
    </bean>
    <bean name="federatedUserManager" class="com.l7tech.server.identity.fed.FederatedUserManagerImpl" scope="prototype" parent="hibernateBean">
        <constructor-arg ref="clientCertManager"/>
        <constructor-arg ref="logonManager"/>
    </bean>
    <bean name="federatedGroupManager" class="com.l7tech.server.identity.fed.FederatedGroupManagerImpl" scope="prototype" parent="hibernateBean"/>

    <!-- LDAP IdentityProvider, UserManager and GroupManager factories -->
    <bean id="ldapIdentityProviderFactory" class="com.l7tech.server.identity.GenericIdentityProviderFactorySpi">
        <constructor-arg value="com.l7tech.server.identity.ldap.LdapIdentityProviderImpl"/>
        <constructor-arg value="ldapIdentityProvider"/>
    </bean>
    <bean id="ldapIdentityProvider" class="com.l7tech.server.identity.ldap.LdapIdentityProviderImpl" scope="prototype">
        <!--roleManager-->
        <property name="clientCertManager" ref="clientCertManager"/>
        <property name="serverConfig" ref="serverConfig"/>
        <property name="certificateAuthenticator" ref ="certificateAuthenticator"/>
        <property name="userManager">
            <bean class="com.l7tech.server.identity.ldap.LdapUserManagerImpl" scope="prototype"/>
        </property>
        <property name="groupManager">
            <bean class="com.l7tech.server.identity.ldap.LdapGroupManagerImpl" scope="prototype"/>
        </property>
        <property name="configManager" ref="identityProviderConfigManager"/>
    </bean>

    <!--
      LDAP classloader pointcut is on any bean annotated with @LdapClassLoaderRequired.
    -->
    <bean id="ldapClassLoaderPointcut" class="com.l7tech.server.util.AnnotationPointcut">
        <constructor-arg index="0">
            <list>
                <value>com.l7tech.server.identity.ldap.LdapClassLoaderRequired</value>
            </list>
        </constructor-arg>
        <constructor-arg index="1"><list/></constructor-arg>
        <constructor-arg index="2" value="false"/>
        <constructor-arg index="3" value="30100"/> <!-- inside transaction -->
    </bean>

    <bean id="ldapClassLoaderAdvice" class="com.l7tech.server.identity.ldap.LdapClassLoaderMethodInterceptor">
    </bean>

    <bean id="ldapClassLoaderAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="pointcut" ref="ldapClassLoaderPointcut"/>
        <property name="advice" ref="ldapClassLoaderAdvice"/>
    </bean>

    <!-- server side Cluster ID manager -->
    <bean id="clusterIDManager" class="com.l7tech.server.cluster.ClusterIDManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- server side Cluster Info manager -->
    <bean id="clusterInfoManager" class="com.l7tech.server.cluster.ClusterInfoManagerImpl" depends-on="clusterPropertyCache">
        <constructor-arg index="0" ref="clusterNodeId"/>
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="serverConfig" ref="serverConfig"/>
    </bean>
    <!-- server side Service Usage  manager -->
    <bean id="serviceUsageManager" class="com.l7tech.server.cluster.ServiceUsageManagerImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- server side DistributedMessageIdManager -->
    <bean id="distributedMessageIdManager" class="com.l7tech.server.cluster.DistributedMessageIdManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="counterManager" class="com.l7tech.server.sla.DBCounterManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Logon service that monitors the login attempts in the SSM -->
    <bean id="logonService" class="com.l7tech.server.logon.SSMLogonService">
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="logonManager"/>
        <constructor-arg ref="serverConfig"/>
    </bean>

    <!-- logon manager handles the persistence of login attempts information to the database layer -->
    <bean id="logonManager" class="com.l7tech.server.logon.LogonInfoManagerImpl" parent="hibernateBean"/>

    <!-- password enforcer to enforce the password constraints -->
    <bean id="passwordEnforcerManager" class="com.l7tech.server.security.PasswordEnforcerManager">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="roleManager"/>
    </bean>

    <!-- server side policy factory -->
    <bean id="policyFactory" class="com.l7tech.server.policy.ServerPolicyFactory">
        <constructor-arg ref="licenseManager"/>
    </bean>
    <!-- server side service cache -->
    <bean id="serviceCache" class="com.l7tech.server.service.ServiceCache" depends-on="wsdlStrategyServiceDocumentsInitializer">
        <constructor-arg ref="policyCache"/>
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="serviceManager"/>
        <constructor-arg ref="serviceUsageManager"/>
        <constructor-arg ref="clusterInfoManager"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="Service cache refresh"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean id="managedServiceCache" class="com.l7tech.server.service.ServiceCache$ManagedServiceCache">
        <constructor-arg ref="serviceCache"/>
    </bean>

    <bean id="wsmfService" class="com.l7tech.server.hpsoam.WSMFService">
        <constructor-arg ref="serviceManager"/>
        <constructor-arg ref="messageProcessor"/>
    </bean>

    <bean id="keyUsageChecker" class="com.l7tech.server.security.cert.GatewayKeyUsageChecker">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" ref="clusterPropertyManager"/>
    </bean>

    <!-- general server side HTTP client trust manager -->
    <!--suppress SpringBeanConstructorArgInspection -->
    <bean id="trustManager" class="com.l7tech.server.transport.http.SslClientTrustManager" depends-on="keyUsageChecker">
        <constructor-arg ref="trustedCertServices"/>
        <constructor-arg ref="certValidationProcessor"/>
        <constructor-arg>
            <!--suppress SpringBeanConstructorArgInspection -->
            <bean class="com.l7tech.server.security.cert.CertValidationProcessor$Facility" factory-method="valueOf">
                <constructor-arg value="OTHER"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- server side HTTP routing client trust manager -->
    <!--suppress SpringBeanConstructorArgInspection -->
    <bean id="routingTrustManager" class="com.l7tech.server.transport.http.SslClientTrustManager" depends-on="keyUsageChecker">
        <constructor-arg ref="trustedCertServices"/>
        <constructor-arg ref="certValidationProcessor"/>
        <constructor-arg>
            <!--suppress SpringBeanConstructorArgInspection -->
            <bean class="com.l7tech.server.security.cert.CertValidationProcessor$Facility" factory-method="valueOf">
                <constructor-arg value="ROUTING"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="roleManagerHelper" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.security.rbac.RoleManagerImpl"/>
        <property name="targetMethod" value="setIdentitySource"/>
        <property name="arguments">
            <list>
                <ref bean="adminSessionManager"/>
            </list>
        </property>
    </bean>

    <!-- Initialize the client-side SSLSocketFactory with the trust manager -->
    <bean id="anonClientSocketFactoryInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.http.AnonymousSslClientSocketFactory"/>
        <property name="targetMethod" value="setTrustManager"/>
        <property name="arguments">
            <list>
                <ref bean="trustManager"/>
            </list>
        </property>
    </bean>
    <bean id="clientSocketFactoryInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.http.SslClientSocketFactory"/>
        <property name="targetMethod" value="setTrustManager"/>
        <property name="arguments">
            <list>
                <ref bean="trustManager"/>
            </list>
        </property>
    </bean>
    <bean id="clientSocketFactoryKeyManagerInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.http.SslClientSocketFactory"/>
        <property name="targetMethod" value="setDefaultKeyManagers"/>
        <property name="arguments">
            <list>
                <ref bean="sslKeyManagers"/>
            </list>
        </property>
    </bean>

    <!-- SSL for Syslog -->
    <bean id="syslogClientSocketFactoryInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.log.syslog.impl.SyslogSslClientSupport"/>
        <property name="targetMethod" value="setTrustManager"/>
        <property name="arguments">
            <list>
                <ref bean="trustManager"/>
            </list>
        </property>
    </bean>
    <bean id="syslogClientSocketFactoryKeyManagerInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.log.syslog.impl.SyslogSslClientSupport"/>
        <property name="targetMethod" value="setDefaultKeyManagers"/>
        <property name="arguments">
            <list>
                <ref bean="sslKeyManagers"/>
            </list>
        </property>
    </bean>
    <bean id="syslogClientSocketFactoryKeyStoreManagerInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.log.syslog.impl.SyslogSslClientSupport"/>
        <property name="targetMethod" value="setSsgKeyStoreManager"/>
        <property name="arguments">
            <list>
                <ref bean="ssgKeyStoreManager"/>
            </list>
        </property>
    </bean>

    <!-- SSL for JMS -->
    <bean id="mqSocketFactoryInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.jms.JmsSslCustomizerSupport"/>
        <property name="targetMethod" value="setTrustManager"/>
        <property name="arguments">
            <list>
                <ref bean="trustManager"/>
            </list>
        </property>
    </bean>
    <bean id="mqSocketFactoryKeyManagerInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.jms.JmsSslCustomizerSupport"/>
        <property name="targetMethod" value="setSsgKeyStoreManager"/>
        <property name="arguments">
            <list>
                <ref bean="ssgKeyStoreManager"/>
            </list>
        </property>
    </bean>

    <!-- SSL for LDAP -->
    <bean id="ldapSocketFactoryInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.identity.ldap.LdapSslCustomizerSupport"/>
        <property name="targetMethod" value="setTrustManager"/>
        <property name="arguments">
            <list>
                <ref bean="trustManager"/>
            </list>
        </property>
    </bean>
    <bean id="ldapSocketFactoryKeyManagerInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.identity.ldap.LdapSslCustomizerSupport"/>
        <property name="targetMethod" value="setSsgKeyStoreManager"/>
        <property name="arguments">
            <list>
                <ref bean="ssgKeyStoreManager"/>
            </list>
        </property>
    </bean>

     <!-- server side HTTP routing hostname verifier -->
    <bean id="hostnameVerifier" class="com.l7tech.server.transport.http.SslClientHostnameVerifier">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="trustedCertServices"/>
    </bean>

    <!-- server side HTTP routing HTTP client factory -->
    <bean id="httpRoutingHttpClientFactory"
          class="com.l7tech.server.util.IdentityBindingHttpClientFactory"
          scope="prototype">
        <property name="connectionManagerParameters">
            <map>
                <entry key="http.connection.stalecheck">
                    <value type="java.lang.Boolean">false</value>
                </entry>
            </map>
        </property>
    </bean>

    <!-- SSL hostname verifier for internode communication -->
    <bean id="internodeHostnameVerifier" class="com.l7tech.server.transport.http.InternodeSslClientHostnameVerifier">
        <constructor-arg ref="defaultKey"/>
    </bean>

    <!-- HTTP client factory for internode communication -->
    <bean id="internodeHttpClientFactory" class="com.l7tech.server.util.HttpClientFactory">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="trustManager"/>
        <constructor-arg ref="internodeHostnameVerifier"/>
    </bean>

    <!-- server side service manager -->
    <bean id="serviceManager" class="com.l7tech.server.service.ServiceManagerImp" parent="hibernateBean">
        <constructor-arg ref="resolutionManager"/>
        <constructor-arg ref="roleManager"/>
        <constructor-arg ref="serviceAliasManager"/>
    </bean>

    <!--service side service alias manager-->
    <bean id="serviceAliasManager" class="com.l7tech.server.service.ServiceAliasManagerImpl" parent="hibernateBean" />

    <!-- server side resolution manager -->
    <bean id="resolutionManager" class="com.l7tech.server.service.resolution.ReolutionManagerImpl" depends-on="wsdlStrategyServiceDocumentsInitializer">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- server side trusted cert manager -->
    <bean id="trustedCertManager" class="com.l7tech.server.identity.cert.TrustedCertManagerImp"
          parent="hibernateBean" depends-on="clusterPropertyCache">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="Trusted Certificate Expiry Checker"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="clusterInfoManager"/>
    </bean>
    <bean id="trustedCertCache" class="com.l7tech.server.util.EntityCachingFactoryBean">
        <constructor-arg><null/></constructor-arg>
        <constructor-arg value="TrustedCertCache"/>
        <constructor-arg value="com.l7tech.server.identity.cert.TrustedCertCache"/>
        <constructor-arg>
            <bean class="com.l7tech.server.identity.cert.TrustedCertCacheImpl">
                <constructor-arg ref="trustedCertManager"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- server side TrustedCert services layer -->
    <bean id="trustedCertServices" class="com.l7tech.server.identity.cert.TrustedCertServicesImpl">
        <constructor-arg ref="trustedCertCache"/>
    </bean>

    <!-- server side revocation check policy manager -->
    <bean id="revocationCheckPolicyManager" class="com.l7tech.server.identity.cert.RevocationCheckPolicyManagerImpl" parent="hibernateBean"/>

    <!-- server side SampleMessage manager -->
    <bean id="sampleMessageManager" class="com.l7tech.server.service.SampleMessageManagerImp" parent="hibernateBean"/>
    <!-- server side ServiceDocumentManager manager -->
    <bean id="serviceDocumentManager" class="com.l7tech.server.service.ServiceDocumentManagerImpl" parent="hibernateBean"/>
    <!-- server side custom assertions registrar -->
    <bean id="customAssertionRegistrar" class="com.l7tech.server.policy.custom.CustomAssertionsRegistrarImpl">
        <constructor-arg ref="assertionRegistry"/>
        <property name="serverConfig" ref="serverConfig"/>
    </bean>
    <!-- jms connection manager -->
    <bean id="jmsConnectionManager" class="com.l7tech.server.transport.jms.JmsConnectionManagerImpl" parent="hibernateBean">
        <property name="jmsEndpointManager" ref="jmsEndpointManager"/>
    </bean>
    <!-- jms endpoint manager -->
    <bean id="jmsEndpointManager" class="com.l7tech.server.transport.jms.JmsEndpointManagerImpl" parent="hibernateBean" depends-on="jmsInit">
    </bean>
    <!-- jms property resolver -->
    <bean id="jmsPropertyMapper" class="com.l7tech.server.transport.jms.JmsPropertyMapper">
        <constructor-arg ref="trustedCertManager"/>
        <constructor-arg ref="ssgKeyStoreManager"/>
        <constructor-arg ref="defaultKey"/>
    </bean>

    <!-- server side policy validator -->
    <bean id="serverPolicyValidator" class="com.l7tech.server.policy.validator.ServerPolicyValidator">
        <constructor-arg ref="policyManager"/>
        <constructor-arg ref="policyPathBuilderFactory"/>
        <property name="jmsEndpointManager" ref="jmsEndpointManager"/>
        <property name="identityProviderFactory" ref='identityProviderFactory'/>
        <property name="schemaEntryManager" ref='schemaEntryManager'/>
        <property name="clientCertManager" ref='clientCertManager'/>
        <property name="entityFinder" ref="entityFinder"/>
        <property name="ssgKeyStoreManager" ref="ssgKeyStoreManager"/>
    </bean>

    <!-- server side policy filter manager  -->
    <bean id="policyFilterManager" class="com.l7tech.server.policy.filter.FilterManager">
        <constructor-arg ref="identityProviderFactory"/>
        <constructor-arg>
            <list>
                <value>com.l7tech.server.policy.filter.HideDisabledAssertions</value>
                <value>com.l7tech.server.policy.filter.IdentityRule</value>
                <value>com.l7tech.server.policy.filter.HideUnsupportedClientAssertions</value>
            </list>
        </constructor-arg>
    </bean>

    <!-- server side policy filter manager for WS-SecurityPolicies -->
    <bean id="wsspolicyFilterManager" class="com.l7tech.server.policy.filter.FilterManager">
        <constructor-arg ref="identityProviderFactory"/>
        <constructor-arg>
            <list>
                <value>com.l7tech.server.policy.filter.HideDisabledAssertions</value>
                <value>com.l7tech.server.policy.filter.HideUnsupportedClientAssertions</value>
            </list>
        </constructor-arg>
    </bean>

    <!-- server side client cert manager -->
    <bean id="clientCertManager" class="com.l7tech.server.identity.cert.ClientCertManagerImp">
        <constructor-arg ref="defaultKey"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- server side log ring buffer -->
    <bean id="logRecordRingBuffer" class="com.l7tech.server.log.LogRecordRingBuffer" init-method="init">
        <property name="loggerName" value="com.l7tech"/>
        <property name="bufferSize" value="500"/> <!-- NOTE that the max retrieval block size is 600, this should be less than that -->
        <property name="config" ref="serverConfig"/>        
    </bean>

    <!-- server side log manager -->
    <bean id="logRecordManager" class="com.l7tech.server.audit.LogRecordManager">
        <constructor-arg ref="clusterInfoManager"/>
        <constructor-arg ref="logRecordRingBuffer"/>
        <constructor-arg ref="clusterContextFactory"/>
    </bean>

    <!-- server side audit archiver -->
    <bean id="auditArchiver" class="com.l7tech.server.audit.AuditArchiver">
      <constructor-arg ref="serverConfig"/>
      <constructor-arg ref="clusterPropertyManager"/>
      <constructor-arg ref="transactionManager"/>
      <constructor-arg ref="auditRecordManager"/>
      <constructor-arg ref="auditArchiveReceiver"/>
    </bean>

    <bean id="auditArchiveReceiver" class="com.l7tech.server.audit.FtpArchiveReceiver">
      <constructor-arg ref="serverConfig"/>
      <constructor-arg ref="clusterPropertyManager"/>
      <constructor-arg ref="auditExporter"/>
      <constructor-arg ref="trustManager"/>
      <constructor-arg ref="defaultKey"/>
    </bean>

    <!-- server side audit record manager -->
    <bean id="auditRecordManager" class="com.l7tech.server.audit.AuditRecordManagerImpl" parent="hibernateBean">
        <property name="serverConfig" ref="serverConfig"/>
    </bean>
    <!-- server side audit download manager -->
    <bean id="auditDownloadManager" class="com.l7tech.server.audit.AuditDownloadManager">
        <constructor-arg ref="defaultKey"/>
    </bean>
    <!-- server side audit exporter -->
    <bean id="auditExporter" class="com.l7tech.server.audit.AuditExporterImpl" scope="prototype">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- server side audit message factory -->
    <bean id="messageSummaryAuditFactory" class="com.l7tech.server.audit.MessageSummaryAuditFactory">
        <constructor-arg ref="clusterNodeId"/>
        <property name="messageContextMappingManager" ref="messageContextMappingManager"/>
        <property name="identityProviderFactory" ref="identityProviderFactory" />
    </bean>

    <!-- keystore root cert and ssl config  -->
    <bean id="defaultKey" class="com.l7tech.server.DefaultKeyImpl" depends-on="keyUsageChecker">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" ref="clusterPropertyManager"/>
        <constructor-arg index="2" ref="ssgKeyStoreManager"/>
        <constructor-arg index="3" ref="transactionManager"/>
    </bean>
    <bean id="keystoreMutatorSwitch" class="com.l7tech.server.security.keystore.JdkKeyStoreBackedSsgKeyStore$StartupListener"/>

    <!-- TODO sslKeyEntry, sslKeystoreCertificate, and sslKeyManagers should be removed so the default SSL key can be changed without a restart -->
    <bean id="sslKeyEntry" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="defaultKey"/>
        <property name="targetMethod" value="getSslInfo"/>
    </bean>

    <bean id="sslKeystoreCertificate" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="sslKeyEntry"/>
        <property name="targetMethod" value="getCertificate"/>
    </bean>

    <bean id="sslKeyManagers" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="defaultKey"/>
        <property name="targetMethod" value="getSslKeyManagers"/>
    </bean>

    <bean id="nodeProperties"
          class="com.l7tech.server.util.PasswordDecryptingPropertiesFactoryBean"
          depends-on="systemProperties">
        <constructor-arg ref="propertiesDecryptor"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>file:${com.l7tech.server.configDirectory}${file.separator}node.properties</value>
            </list>
        </property>
    </bean>

    <!-- server Wss Decorator -->
    <bean id="wssDecorator" class="com.l7tech.security.xml.decorator.WssDecoratorImpl"/>
    <!-- server Message Processor -->
    <bean id="messageProcessor" class="com.l7tech.server.MessageProcessor">
        <constructor-arg ref="serviceCache"/>
        <constructor-arg ref="policyCache"/>
        <constructor-arg ref="wssDecorator"/>
        <constructor-arg ref="securityTokenResolver"/>
        <constructor-arg ref="licenseManager"/>
        <constructor-arg ref="serviceMetricsServices"/>
        <constructor-arg ref="auditContext"/>
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="trafficLogger"/>
        <constructor-arg ref="soapFaultManager"/>
        <constructor-arg ref="messageProcessingEventChannel"/>
     </bean>
    <!-- server side policy service -->
    <bean id="policyService" class="com.l7tech.server.policy.PolicyService">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="policyFactory"/>
        <constructor-arg ref="policyFilterManager"/>
        <constructor-arg ref="securityTokenResolver"/>
        <constructor-arg ref="policyPathBuilderFactory"/>
    </bean>
    <!-- server side token service -->
    <bean id="tokenService" class="com.l7tech.server.TokenServiceImpl">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="policyFactory"/>
        <constructor-arg ref="securityTokenResolver"/>
    </bean>

    <bean id="auditContext" class="com.l7tech.server.audit.ThreadLocalAuditContext">
        <property name="targetId" value="auditContextImpl"/>
    </bean>

    <bean id="auditContextImpl" class="com.l7tech.server.audit.AuditContextImpl" scope="prototype">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="auditRecordManager"/>
        <property name="keystore" ref="defaultKey"/>
        <property name="auditLogListener" ref="auditLogListener"/>
    </bean>

    <!-- server side Status Update Manager -->
    <bean id="statusUpdateManager" class="com.l7tech.server.cluster.StatusUpdateManagerImpl">
        <constructor-arg ref="clusterInfoManager"/>
        <constructor-arg ref="serviceCache"/>
        <constructor-arg ref="serviceUsageManager"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Status Update Manager Task Scheduler -->
    <bean id="statusUpdateManagerSchedulerTask" class="org.springframework.scheduling.timer.ScheduledTimerTask">
        <!-- wait 10 seconds before starting repeated execution -->
        <property name="delay" value="8000"/> <!-- 8 seconds -->
        <property name="period" value="4000"/> <!-- repeat every 4 seconds -->
        <property name="timerTask">
            <!-- server side Status Update Manager Scheduled Task -->
            <bean class="org.springframework.scheduling.timer.MethodInvokingTimerTaskFactoryBean">
                <property name="targetObject" ref="statusUpdateManager"/>
                <property name="targetMethod" value="update"/>
            </bean>
        </property>
    </bean>
    <!-- server side Task Scheduler -->
    <bean class="org.springframework.scheduling.timer.TimerFactoryBean">
        <property name="scheduledTimerTasks">
            <list>
                <ref local="statusUpdateManagerSchedulerTask"/>
            </list>
        </property>
    </bean>

    <bean id="messageProcessingAuditListener" class="com.l7tech.server.audit.MessageProcessingAuditListener">
        <constructor-arg index="0" ref="messageSummaryAuditFactory"/>
        <constructor-arg index="1" ref="auditContext"/>
        <constructor-arg index="2" ref="messageProcessingEventChannel"/>
    </bean>

    <bean id="adminAuditListener" class="com.l7tech.server.audit.AdminAuditListener">
        <constructor-arg ref="clusterNodeId"/>
        <constructor-arg ref="auditContext"/>
    </bean>

    <bean id="systemAuditListener" class="com.l7tech.server.audit.SystemAuditListener">
        <constructor-arg ref="clusterNodeId"/>
        <constructor-arg ref="auditContext"/>
    </bean>

    <bean id="counterIDManager" class="com.l7tech.server.sla.CounterIDManagerImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="schemaManager" class="com.l7tech.server.communityschemas.SchemaManagerImpl" depends-on="clusterPropertyManager">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="httpClientFactory"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="Schema cache maintenance"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="schemaEntryManager" class="com.l7tech.server.communityschemas.SchemaEntryManagerImpl" parent="hibernateBean">
        <constructor-arg ref="applicationEventProxy"/>
        <property name="schemaManager" ref="schemaManager"/>
    </bean>

    <bean id="registryPublicationManager" class="com.l7tech.server.uddi.RegistryPublicationManager">
        <property name="serverConfig" ref="serverConfig"/>
        <property name="keystore" ref="defaultKey"/>
    </bean>

    <bean id="clusterPropertyManager" class="com.l7tech.server.cluster.ClusterPropertyManagerImpl" parent="hibernateBean">
    </bean>

    <bean id="clusterPropertyCache" class="com.l7tech.server.cluster.ClusterPropertyCache">
        <property name="clusterPropertyManager" ref="clusterPropertyManager"/>
        <property name="clusterPropertyListener" ref="serverConfig"/>
        <property name="serverConfig" ref="serverConfig"/>
    </bean>

    <bean id="gatewaySanityChecker" class="com.l7tech.server.util.GatewaySanityChecker" depends-on="initLunaPinFinder">
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="clusterPropertyManager"/>
        <property name="earlyTasks">
            <list>
                <bean class="com.l7tech.server.security.keystore.DefaultKeystoreFilePopulator">
                    <property name="sessionFactory" ref="sessionFactory"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="trustedSecurityTokenResolver" class="com.l7tech.server.TrustedCertificateResolver">
        <constructor-arg index="0" ref="trustedCertManager"/>
        <constructor-arg index="1" ref="serverConfig"/>
        <constructor-arg index="2" ref="ssgKeyStoreManager"/>
    </bean>

    <bean id="identityProviderSecurityTokenResolver" class="com.l7tech.server.IdentityProviderSecurityTokenResolver">
        <constructor-arg index="0" ref="identityProviderFactory"/>
    </bean>

    <bean id="userSecurityTokenResolver" class="com.l7tech.server.UserCertificateResolver">
        <constructor-arg index="0" ref="clientCertManager"/>
    </bean>

    <bean id="securityTokenResolver" class="com.l7tech.security.xml.DelegatingSecurityTokenResolver">
        <constructor-arg index="0">
            <list>
                <ref local="trustedSecurityTokenResolver"/>
                <ref local="identityProviderSecurityTokenResolver"/>
                <ref local="userSecurityTokenResolver"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="licenseManager" class="com.l7tech.server.GatewayLicenseManager" depends-on="systemAuditListener">
        <constructor-arg ref="clusterPropertyManager"/>
    </bean>

    <bean id="certificateAuthenticator" class="com.l7tech.server.identity.cert.CertificateAuthenticator">
        <constructor-arg ref="clientCertManager"/>
        <constructor-arg ref="certValidationProcessor"/>
    </bean>

    <!-- Identity mapping stuff -->
    <bean id="identityMappingManager" class="com.l7tech.server.identity.mapping.IdentityMappingManagerImpl" parent="hibernateBean"/>
    <bean id="attributeConfigManager" class="com.l7tech.server.identity.mapping.AttributeConfigManagerImpl" parent="hibernateBean"/>
    <bean id="securityTokenMappingManager" class="com.l7tech.server.identity.mapping.SecurityTokenMappingManagerImpl" parent="hibernateBean"/>

    <!--
    The MAC of this cluster node, so that we don't need to throw the whole
    ClusterInfoManager around
    -->
    <bean id="clusterNodeId" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref='clusterIDManager'/>
        <property name="targetMethod" value="thisNodeId"/>
    </bean>

    <!-- Dependency ensures system.properties file is processed first -->
   <bean id="serviceMetricsManager" class="com.l7tech.server.service.ServiceMetricsManagerImpl" depends-on="ssgBoot">
        <constructor-arg ref="clusterNodeId"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="serviceMetricsServices" class="com.l7tech.server.service.ServiceMetricsServicesImpl" depends-on="ssgBoot">
        <constructor-arg ref="clusterNodeId"/>
    </bean>

    <bean id="entityInvalidator" class="com.l7tech.server.EntityVersionChecker" depends-on="ssgBoot">
        <property name="applicationEventProxy" ref="applicationEventProxy"/>
        <property name="entityManagers">
            <list>
                <ref bean="schemaEntryManager"/>
                <ref bean="roleManager"/>
                <ref bean="clusterPropertyManager"/>
                <ref bean="identityProviderConfigManager"/>
                <ref bean="jmsConnectionManager"/>
                <ref bean="jmsEndpointManager"/>
                <ref bean="trustedCertManager"/>
                <ref bean="revocationCheckPolicyManager"/>
                <ref bean="ssgConnectorManager"/>
                <ref bean="sinkManager"/>
                <ref bean="policyManager"/>
                <ref bean="keystoreFileManager"/>
                <ref bean="messageContextMappingKeyManager"/>
            </list>
        </property>
        <property name="timer">
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="EntityVersionChecker"/>
            </bean>
        </property>
    </bean>

    <bean id="soapFaultManager" class="com.l7tech.server.util.SoapFaultManager" depends-on="clusterPropertyManager">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="Soap fault manager refresh"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="uddiAgentFactory" class="com.l7tech.server.service.uddi.UddiAgentFactory">
        <property name="serverConfig" ref="serverConfig"/>
    </bean>

    <bean id="httpClientFactory" class="com.l7tech.server.util.HttpClientFactory">
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="trustManager"/>
        <constructor-arg ref="hostnameVerifier"/>
    </bean>

    <bean id="trafficLogger" class="com.l7tech.server.log.TrafficLogger">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="soapFaultManager"/>
    </bean>

    <bean id="entityFinder" class="com.l7tech.server.EntityFinderImpl">
        <!--<constructor-arg ref="identityProviderFactory"/>-->
        <property name="identityProviderFactory" ref="identityProviderFactory" />
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="policyManager" ref="policyManager"/>
        <property name="keyStoreManager">
            <bean class="com.l7tech.gateway.common.spring.factory.config.LazyProxyFactoryBean">
                <constructor-arg value="ssgKeyStoreManager"/>
                <constructor-arg value="com.l7tech.server.security.keystore.SsgKeyStoreManager"/>
            </bean>
        </property>

    </bean>

    <bean id="applicationEventProxy" class="com.l7tech.server.util.ApplicationEventProxy"/>

    <!-- A fast event channel just for MessageProcessingEvent subclasses. -->
    <bean id="messageProcessingEventChannel" class="com.l7tech.server.util.EventChannel"/>

    <bean id="managedBackgroundTimer" class="com.l7tech.server.util.ManagedTimer">
        <constructor-arg value="Background timer"/>
    </bean>

    <!-- Use managed timer for all background tasks -->
    <bean id="configureBackgroundTimer"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.l7tech.util.Background.installTimer"/>
        <property name="arguments">
            <list>
                <ref local="managedBackgroundTimer"/>
            </list>
        </property>
    </bean>


    <bean id="whirlyLife" class="com.l7tech.server.WhirlyLifecycle"/>

    <bean id="timerLife" class="com.l7tech.server.ManagedTimerLifecycle"/>

    <bean id="exceptionLogger" class="com.l7tech.util.UncaughtExceptionLogger" factory-method="createAndInstall"/>

    <bean id="stashManagerFactory" class="com.l7tech.server.DefaultStashManagerFactory" factory-method="getInstance"/>

    <bean id="assertionRegistry" class="com.l7tech.server.policy.ServerAssertionRegistry" depends-on="ssgBoot">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="licenseManager"/>
    </bean>

    <bean id="wspReader" class="com.l7tech.policy.wsp.WspReader">
        <constructor-arg ref="assertionRegistry"/>
    </bean>

    <bean id="serviceWsdlImportChecker" class="com.l7tech.server.service.ServiceWsdlImportChecker" depends-on="systemAuditListener systemProperties">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="serviceManager"/>
        <constructor-arg ref="serviceDocumentManager"/>
    </bean>

    <bean id="keystoreFileManager" class="com.l7tech.server.security.keystore.KeystoreFileManagerImpl" parent="hibernateBean">
        <constructor-arg ref="masterPasswordManager"/>
    </bean>

    <bean id="ssgConnectorManager" class="com.l7tech.server.transport.SsgConnectorManagerImpl" parent="hibernateBean">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="applicationEventProxy"/>
    </bean>

    <bean id="emailListenerManager" class="com.l7tech.server.transport.email.EmailListenerManagerImpl" parent="hibernateBean"/>

    <bean id="ssgKeyStoreManager" class="com.l7tech.server.security.keystore.SsgKeyStoreManagerImpl" depends-on="gatewaySanityChecker">
        <constructor-arg ref="sharedKeyManager"/>
        <constructor-arg ref="keystoreFileManager"/>
        <constructor-arg ref="serverConfig"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.PropertiesValueFactoryBean">
                <constructor-arg ref="nodeProperties"/>
                <constructor-arg value="node.cluster.pass"/>
            </bean>
        </constructor-arg>
	    <constructor-arg ref="dbPasswordEncryption"/>
    </bean>

    <bean id="ftpServerManager" class="com.l7tech.server.transport.ftp.FtpServerManager">
        <constructor-arg ref="auditContext"/>
        <constructor-arg ref="clusterPropertyCache"/>
        <constructor-arg ref="messageProcessor"/>
        <constructor-arg ref="soapFaultManager"/>
        <constructor-arg ref="stashManagerFactory"/>
        <constructor-arg ref="licenseManager"/>
        <constructor-arg ref="ssgKeyStoreManager"/>
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="ssgConnectorManager"/>
        <constructor-arg ref="messageProcessingEventChannel"/>
        <constructor-arg ref="managedBackgroundTimer"/>
    </bean>

    <bean id="sharedKeyManager" class="com.l7tech.server.security.sharedkey.SharedKeyManagerImpl">
        <constructor-arg index="0">
            <bean class="com.l7tech.server.util.PropertiesValueFactoryBean">
                <constructor-arg ref="nodeProperties"/>
                <constructor-arg value="node.cluster.pass"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="1" ref="transactionManager"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="crlCache" class="com.l7tech.server.security.cert.CrlCacheImpl">
        <constructor-arg ref="httpClientFactory"/>
        <constructor-arg ref="serverConfig"/>
        <constructor-arg>
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="CRL Refresh"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="ocspCache" class="com.l7tech.server.security.cert.OCSPCache">
        <constructor-arg ref="httpClientFactory"/>
        <constructor-arg ref="serverConfig"/>
    </bean>

    <bean id="certValidationProcessor" class="com.l7tech.server.security.cert.CertValidationProcessorImpl">
        <constructor-arg ref="trustedCertManager"/>
        <constructor-arg ref="revocationCheckPolicyManager"/>
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="serverConfig"/>
        <!-- These make use of the certificate validation processor so cannot be constructor args -->
        <property name="crlCache" ref="crlCache"/>
        <property name="ocspCache" ref="ocspCache"/>
    </bean>

    <bean id="httpTransportModule" class="com.l7tech.server.transport.http.HttpTransportModule" depends-on="systemAuditListener">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="masterPasswordManager"/>
        <constructor-arg ref="defaultKey"/>
        <constructor-arg ref="ssgKeyStoreManager"/>
        <constructor-arg ref="licenseManager"/>
        <constructor-arg ref="ssgConnectorManager"/>
        <constructor-arg>
            <set>
                <bean class="com.l7tech.server.util.ClusterNodeSsgConnectorActivationListener">
                    <constructor-arg ref="serverConfig"/>
                </bean>
                <ref bean="pcApiConnectorListener"/>
            </set>
        </constructor-arg>
    </bean>
    <!--
      Top level bean since we want to get application events.
    -->
    <bean id="pcApiConnectorListener" class="com.l7tech.server.PcApiConnectorActivationListener"/>


    <bean id="policyCache" class="com.l7tech.server.policy.PolicyCacheImpl">
        <constructor-arg ref="transactionManager"/>
        <constructor-arg ref="policyFactory"/>
        <property name="policyManager" ref="policyManager"/>
    </bean>

    <bean id="policyManager" class="com.l7tech.server.policy.PolicyManagerImpl" parent="hibernateBean">
        <constructor-arg ref="roleManager"/>
        <constructor-arg ref="policyAliasManager"/>
        <constructor-arg ref="folderManager"/>
        <property name="policyCache" ref="policyCache"/>
    </bean>

    <!--service side policy alias manager-->
    <bean id="policyAliasManager" class="com.l7tech.server.policy.PolicyAliasManagerImpl" parent="hibernateBean" />

    <bean id="folderManager" class="com.l7tech.server.folder.FolderManagerImpl" parent="hibernateBean">
        <constructor-arg ref="roleManager"/>        
    </bean>

    <bean id="policyPathBuilderFactory" class="com.l7tech.policy.PolicyPathBuilderFactory">
        <constructor-arg ref="policyManager"/>
    </bean>

    <bean id="policyVersionManager" class="com.l7tech.server.policy.PolicyVersionManagerImpl" parent="hibernateBean">
        <constructor-arg ref="serverConfig"/>
    </bean>

    <bean id="syslogManager" class="com.l7tech.server.log.syslog.SyslogManager" destroy-method="close"/>

    <bean id="sinkManager" class="com.l7tech.server.log.SinkManagerImpl" parent="hibernateBean" depends-on="systemAuditListener">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="syslogManager"/>
        <constructor-arg ref="trafficLogger"/>
        <constructor-arg ref="applicationEventProxy"/>
    </bean>

    <bean id="auditLogListenerTarget" class="com.l7tech.server.log.FilteringAuditLogListener">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg>
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetObject" ref="sinkManager"/>
                <property name="targetMethod" value="getPublishingSink"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="auditLogListener" class="com.l7tech.gateway.common.spring.factory.config.LazyProxyFactoryBean">
        <constructor-arg value="auditLogListenerTarget"/>
        <constructor-arg value="com.l7tech.server.audit.AuditLogListener"/>
    </bean>


    <bean id="auditDetailFilter" class="com.l7tech.server.audit.GatewayAuditDetailFilter">
        <constructor-arg ref="serverConfig"/>
    </bean>

    <bean id="serviceTemplateManager" class="com.l7tech.server.service.ServiceTemplateManagerImpl"/>

    <bean id="esmSubscriptionManager" class="com.l7tech.server.wsdm.subscription.SubscriptionManagerImpl" parent="hibernateBean"/>

    <bean id="kerberosConfig" class="com.l7tech.server.security.kerberos.ServerKerberosConfig">
        <constructor-arg ref="serverConfig"/>
        <constructor-arg ref="dbPasswordEncryption"/>
    </bean>

    <bean id="messageContextMappingKeyManager" class="com.l7tech.server.mapping.MessageContextMappingKeyManagerImpl" parent="hibernateBean"/>
    <bean id="messageContextMappingValueManager" class="com.l7tech.server.mapping.MessageContextMappingValueManagerImpl" parent="hibernateBean"/>
    <bean id="messageContextMappingManager" class="com.l7tech.server.mapping.MessageContextMappingManagerImpl">
        <constructor-arg ref="messageContextMappingKeyManager"/>
        <constructor-arg ref="messageContextMappingValueManager"/>
    </bean>

    <bean id="trustedEsmManager" class="com.l7tech.server.TrustedEsmManagerImpl" parent="hibernateBean">
    </bean>

    <bean id="trustedEsmUserManager" class="com.l7tech.server.TrustedEsmUserManagerImpl" parent="hibernateBean">
    </bean>

    <bean id="processControllerNodeApiImpl" class="com.l7tech.server.NodeApiImpl"/>

    <bean id="processControllerEventProxy" class="com.l7tech.server.ProcessControllerEventProxyImpl" depends-on="cxf"/>

    <bean id="gatewayApiImpl" class="com.l7tech.server.cluster.GatewayApiImpl">
        <constructor-arg index="0" ref="serverConfig"/>
        <constructor-arg index="1" ref="clusterInfoManager"/>
        <constructor-arg index="2">
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetObject" ref="rbacAdvice"/>
                <property name="targetMethod" value="getSecurityFilter"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="3" ref="serviceManager"/>
        <constructor-arg index="4" ref="policyManager"/>
        <constructor-arg index="5" ref="folderManager"/>
        <constructor-arg index="6" ref="serviceCache"/>
    </bean>

    <bean id="reportApiImpl" class="com.l7tech.server.cluster.ReportApiImpl">
        <constructor-arg index="0" ref="transactionManager"/>
        <constructor-arg index="1" ref="rbacServices"/>
        <constructor-arg index="2">
            <bean class="com.l7tech.server.util.ManagedTimer">
                <constructor-arg value="Report Processor"/>
            </bean>
        </constructor-arg>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="managedReportApiImpl" class="com.l7tech.server.cluster.ReportApiImpl$ManagedReportApiImpl">
        <constructor-arg ref="reportApiImpl"/>
    </bean>

    <bean id="migrationApiImpl" class="com.l7tech.server.migration.MigrationApiImpl">
        <constructor-arg index="0" ref="migrationManager"/>
    </bean>

    <bean id="systemClassLoader" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="java.lang.ClassLoader"/>
        <property name="targetMethod" value="getSystemClassLoader"/>
    </bean>
    <bean  id="extensionClassLoader" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="systemClassLoader"/>
        <property name="targetMethod" value="getParent"/>
    </bean>
    <!--
      Resource classloader that is configured to load Fiorano JMS and the associated
      Gateway provider class(es) in a shared classloader.

      Other JMS classes will be loaded as before from the extension classloader.
    -->
    <bean id="jmsClassLoader" class="com.l7tech.server.util.ResourceClassLoader">
        <constructor-arg index="0">
            <!--
              Filtering classloader that will load bootstrap and extension classes, plus
              the listed gateway packages and classes.
            -->
            <bean class="com.l7tech.util.FilterClassLoader">
                <constructor-arg index="0" ref="extensionClassLoader"/>
                <constructor-arg index="1" ref="systemClassLoader"/>
                <constructor-arg index="2">
                    <list>
                        <value>com.l7tech.server.transport.jms.prov.fiorano</value>
                        <value>com.l7tech.server.transport.jms.JmsSslCustomizerSupport</value>
                        <value>com.l7tech.server.transport.jms.JmsConfigException</value>
                        <value>org.apache.xerces</value>
                        <value>org.apache.xml.serializer</value>
                        <value>org.apache.xalan</value>
                    </list>
                </constructor-arg>
                <constructor-arg index="3" value="true"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="1">
            <list>
                <value>fiorano</value>
                <value>com.fiorano</value>
                <value>com.l7tech.server.transport.jms.prov.fiorano</value>
            </list>
        </constructor-arg>
    </bean>
    <bean id="jmsInit" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.transport.jms.JmsUtil"/>
        <property name="targetMethod" value="setContextClassLoader"/>
        <property name="arguments">
            <list>
                <ref local="jmsClassLoader"/>
            </list>
        </property>
    </bean>

    <bean id="clusterPropertyCleanup" class="com.l7tech.server.cluster.ClusterPropertyCleanup">
        <constructor-arg index="0">
            <set>
                <value>cluster.internodePort</value>
            </set>
        </constructor-arg>
        <constructor-arg index="1" ref="transactionManager"/>
        <constructor-arg index="2" ref="clusterPropertyManager"/>
    </bean>

  <bean id="entityCrud" class="com.l7tech.server.EntityCrudImpl">
      <property name="sessionFactory" ref="sessionFactory"/>
      <constructor-arg ref="entityFinder"/>
      <constructor-arg>
          <list>
              <ref bean="trustedEsmManager"/>
              <ref bean="trustedEsmUserManager"/>
              <ref bean="auditRecordManager"/>
              <ref bean="clusterPropertyManager"/>
              <ref bean="schemaEntryManager"/>
              <ref bean="folderManager"/>
              <ref bean="identityProviderConfigManager"/>
              <ref bean="revocationCheckPolicyManager"/>
              <ref bean="trustedCertManager"/>
              <ref bean="federatedUserManager"/>
              <ref bean="federatedGroupManager"/>
              <ref bean="internalUserManager"/>
              <ref bean="internalGroupManager"/>
              <ref bean="attributeConfigManager"/>
              <ref bean="identityMappingManager"/>
              <ref bean="securityTokenMappingManager"/>
              <!--<ref bean="sinkLogManager"/>-->
              <!--<ref bean="logonInfoManager"/>-->
              <ref bean="messageContextMappingKeyManager"/>
              <ref bean="messageContextMappingValueManager"/>
              <bean class="com.l7tech.server.policy.VersioningPolicyManager">
                  <constructor-arg index="0" ref="policyManager"/>
                  <constructor-arg index="1" ref="policyVersionManager"/>
              </bean>
              <ref bean="policyAliasManager"/>
              <ref bean="keystoreFileManager"/>
              <ref bean="roleManager"/>
              <ref bean="serviceAliasManager"/>
              <ref bean="serviceDocumentManager"/>
              <bean class="com.l7tech.server.service.PolicyVersioningServiceManager">
                  <constructor-arg index="0" ref="serviceManager"/>
                  <constructor-arg index="1" ref="policyVersionManager"/>
              </bean>
              <ref bean="ssgConnectorManager"/>
              <ref bean="emailListenerManager"/>
              <ref bean="jmsConnectionManager"/>
              <ref bean="jmsEndpointManager"/>
              <bean class="com.l7tech.server.migration.IdentityEntityManager">
                  <constructor-arg index="0" value="com.l7tech.identity.User"/>
                  <constructor-arg index="1" ref="identityProviderFactory"/>
              </bean>
              <bean class="com.l7tech.server.migration.IdentityEntityManager">
                  <constructor-arg index="0" value="com.l7tech.identity.Group"/>
                  <constructor-arg index="1" ref="identityProviderFactory"/>
              </bean>
          </list>
      </constructor-arg>
  </bean>

  <bean id="propertyResolverFactory" class="com.l7tech.server.migration.PropertyResolverFactory">
      <constructor-arg ref="entityFinder"/>
      <constructor-arg ref="ssgKeyStoreManager"/>
      <constructor-arg ref="serviceDocumentManager"/>
      <constructor-arg ref="clusterPropertyManager"/>
      <constructor-arg ref="schemaEntryManager"/>
      <constructor-arg ref="serverConfig"/>
  </bean>

  <bean id="migrationManager" class="com.l7tech.server.migration.MigrationManagerImpl">
      <constructor-arg>
          <bean class="com.l7tech.server.SecuredEntityCrud">
              <constructor-arg index="0" ref="rbacServices"/>
              <constructor-arg index="1">
                  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                      <property name="targetObject" ref="rbacAdvice"/>
                      <property name="targetMethod" value="getSecurityFilter"/>
                  </bean>
              </constructor-arg>
              <constructor-arg index="2" ref="entityCrud"/>
          </bean>
      </constructor-arg>
      <constructor-arg ref="propertyResolverFactory"/>
      <constructor-arg ref="resolutionManager"/>
  </bean>

    <bean id="wsdlStrategyServiceDocumentsInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.l7tech.server.service.PersistentServiceDocumentWsdlStrategy"/>
        <property name="targetMethod" value="setServiceDocumentManager"/>
        <property name="arguments">
            <list>
                <ref bean="serviceDocumentManager"/>
            </list>
        </property>
    </bean>

</beans>
