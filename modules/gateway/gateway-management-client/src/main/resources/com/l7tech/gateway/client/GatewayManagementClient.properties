# Resource bundle for GatewayManagementClient

message.version=Version {0}
message.unknowncommand=Command ''{0}'' not recognized.
message.commandnotsupported=Command not supported for type ''{0}''.
message.unexpectederror=An unexpected error occurred ''{0}''.
message.errorreport=See error report for more details ''{0}''.
message.errorreporterror=Unable to save error report ''{0}'' due to ''{1}''.
message.networkerror=Network error ''{0}''
message.ioerror=I/O error ''{0}''
message.servernottrusted=Server TLS/SSL certificate is not trusted.
message.notfound=No resource matched the specified name or identifier.
message.notauthorized=Not authorized to access Gateway Management service.
message.accessdenied=Permission denied when accessing resource.
message.soapfault=SOAP Fault from service:\n  Fault: {0}\n  Role: {1}\n  Details: {2}

error.datetime=Date/Time:\n\t{0}\n\n
error.version=Version:\n\t{0}\n\n
error.systemproperties=System Properties:\n\
  \tjava.version: {0}\n\
  \tjava.specification.version: {1}\n\
  \tos.name: {2}\n\
  \tos.arch: {3}\n\n
error.memoryusage=Memory Usage:\n\
  \t{0} bytes: the amount of free memory in the Java Virtual Machine.\n\
  \t{1} bytes: the total amount of memory in the Java virtual machine.\n\n
error.stacktrace=Stack Trace:\n\t{0}\n
error.helpcentre=Layer 7 Technologies Help Centre:\n\
  \tBefore requesting support, \n\
  \tplease gather the following information:\n\
  \t- Company name\n\
  \t- Contact person information (email, phone number and location)\n\
  \t- Details of problem\n\n\
  \tSupport Email:\n\
  \tsupport@layer7tech.com\n\n\
  \tGeneral Email:\n\
  \tinfo@layer7tech.com\n\n\
  \tWeb Site:\n\
  \thttp://www.layer7tech.com\n\n\
  \tPhone:\n\
  \t604-681-9377 (local)\n\
  \t1-800-681-9377 (toll free)\n\n\
  \tFax:\n\
  \t604-681-9387\n

usage=\
  Usage:\n\
  \n\
  \t gatewayManagementClient.sh [URL | HOST | HOST:PORT] COMMAND [OPTION]*\n\
  \n\
  The target SecureSpan Gateway may be identified by URL, hostname or by both\n\
  hostname and port number.\n\
  \n\
  Commands:\n\
  \n\
  \tenumerate : Listing for the specified type.\n\
  \tget       : Retrieve an instance of a specified type.\n\
  \tput       : Update an instance of a specified type.\n\
  \tcreate    : Create a new instance of a specified type.\n\
  \tdelete    : Delete an instance of a specified type.\n\
  \timport    : Import a policy for an instance of a specified type.\n\
  \texport    : Export a policy for an instance of a specified type.\n\
  \tvalidate  : Validate the policy of an instance of a specified type.\n\
  \n\
  Options:\n

help.types=\
  The available types are:\n\
  \n\
  \tclusterProperty    : Configuration settings.\n\
  \tfolder             : Organisational folders.\n\
  \tidentityProvider   : User and group repositories.\n\
  \tjdbcConnection     : Database connections.\n\
  \tjmsDestination     : JMS Queues.\n\
  \tpolicy             : Policy include fragments.\n\
  \tprivateKey         : Private keys.\n\
  \tservice            : Services.\n\
  \ttrustedCertificate : Certificate store.\n\
  \tresourceDocument   : XML Schema repository.\n\

help.common=\
    Credentials can be given using the '-username' and '-password' or\n\
    '-passwordFile' options.\n\
    \n\
    To use an HTTP proxy server use the '-proxyHost' and '-proxyPort' options,\n\
    credentials for the proxy can be given using the '-proxyUsername' and\n\
    '-proxyPassword' or '-proxyPasswordFile' options.\n\
    \n\
    When using TLS/SSL the options '-skipVerifyCertificate' and \n\
    '-skipVerifyHostname' allow verification checks to be disabled (this is\n\
    not recommended).\n

help.command.enumerate=\
  enumerate: List all resources for the specified type.\n\
  usage: 1. enumerate -type TYPE\n\
  \t   2. enumerate -type TYPE -outFile PATH\n\
  \n\
  \t1. Enumerate resources of the type 'TYPE' with output to the console.\n\
  \n\
  \t2. Enumerate resources of the type 'TYPE' with output to the file at \n\
  \t   'PATH'.\n\
  \n\
  {0}\
  \n\
  This command does not require any input and '-in' or '-inFile' options\n\
  will be ignored.\n\
  \n\
  {1}

help.command.get=\
  get: Fetch the identified resource of the specified type.\n\
  usage: 1. get -type TYPE -id ID\n\
  \t   2. get -type TYPE -id ID -outFile PATH\n\
  \t   3. get -type TYPE -name NAME -outFile PATH\n\
  \n\
  \t1. Fetch the resource of type 'TYPE' with the identifier 'ID' and\n\
  \t   output to the console.\n\
  \n\
  \t2. Fetch the resource of type 'TYPE' with the identifier 'ID' and\n\
  \t   output to the file at 'PATH'.\n\
  \n\
  \t3. Fetch the resource of type 'TYPE' with the name 'NAME' and\n\
  \t   output to the file at 'PATH'.\n\
  \n\
  {0}\
  \n\
  This command does not require any input and '-in' or '-inFile' options\n\
  will be ignored.\n\
  \n\
  {1}

help.command.put=\
  put: Update the identified resource of the specified type.\n\
  usage: 1. put -type TYPE -inFile PATH -outFile PATH\n\
  \t   2. put -type TYPE -in RESOURCE\n\
  \n\
  \t1. Update the resource of type 'TYPE' using the resource \n\
  \t   representation from 'PATH'. The updated resource will be\n\
  \t   output to the file 'PATH'. The identifier for the resource is\n\
  \t   read from the file.\n\
  \n\
  \t2. Update the resource of type 'TYPE' using the resource \n\
  \t   representation 'RESOURCE'. The updated resource will be\n\
  \t   output to the console. The identifier for the resource is\n\
  \t   read from the given resource.\n\
  \n\
  {0}\
  \n\
  This command does not produce any output and the '-inFile' option\n\
  will be ignored if specified.\n\
  \n\
  The '-force' option can be used with this command to ignore the version\n\
  information in the resource. This is useful if resources are externally\n\
  managed. The force option should be used with caution as it can lead to\n\
  lost updates when a resource is concurrently modified.\n\
  \n\
  {1}

help.command.create=\
  create: Create a new resource of the specified type.\n\
  usage: 1. create -type TYPE -inFile PATH -outFile PATH\n\
  \t   2. create -type TYPE -in RESOURCE\n\
  \n\
  \t1. Create a resource of type 'TYPE' using the resource \n\
  \t   representation from 'PATH'. The resulting resource will be\n\
  \t   output to the specified 'PATH'.\n\
  \n\
  \t1. Create a resource of type 'TYPE' using the resource \n\
  \t   representation 'RESOURCE'. The resulting resource will be\n\
  \t   output to the console.\n\
  \n\
  {0}\
  \n\
  {1}

help.command.delete=\
  delete: Delete the identified resource of the specified type.\n\
  usage: 1. delete -type TYPE -id ID\n\
  \t   2. delete -type TYPE -name NAME\n\
  \n\
  \t1. Delete the resource of type 'TYPE' with the identifier 'ID'.\n\
  \n\
  \t2. Delete the resource of type 'TYPE' with the name 'NAME'.\n\
  \n\
  {0}\
  \n\
  This command does not require any input and '-in' or '-inFile' options\n\
  will be ignored.\n\
  \n\
  {1}

help.command.export=\
  export: Export the policy for the identified resource of the specified type.\n\
  usage: 1. export -type TYPE -id ID\n\
  \t   2. export -type TYPE -id ID -outFile PATH\n\
  \n\
  \t1. Export the policy for the resource of type 'TYPE' with the identifier\n\
  \t   'ID' and output to the console.\n\
  \n\
  \t1. Export the policy for the resource of type 'TYPE' with the identifier\n\
  \t   'ID' and output to the file at 'PATH'.\n\
  \n\
  {0}\
  \n\
  This command does not require any input and '-in' or '-inFile' options\n\
  will be ignored.\n\
  \n\
  {1}

help.command.import=\
  import: Import a policy for the identified resource of the specified type.\n\
  usage: 1. import -type TYPE -id ID -inFile PATH -outFile PATH\n\
  \t   2. import -type TYPE -id ID -in RESOURCE [-import INSTRUCTION OPTIONS]*\n\
  \n\
  \t1. Import a policy for the resource of type 'TYPE' with the identifier \n\
  \t   'ID' from the file 'PATH'. The import result will be output to the file\n\
  \t   'PATH'.\n\
  \n\
  \t1. Import a policy for the resource of type 'TYPE' with the identifier \
  \t   'ID' from the file 'PATH'. The import result will be output to the\n\
  \t   console. Any number of import instructions can be passed to control\n\
  \t   how policy dependencies are handled.\n\
  \n\
  {0}\
  \n\
  The input for this command is a policy export as created by the 'export'\n\
  command or the SecureSpan Manager. The output contains any warnings\n\
  generated during the import and a summary of dependency processing.\n\
  \n\
  The '-force' option may be used with this command to ignore conflicting\n\
  included policy fragments in the input and on the target system. When forced\n\
  the import will succeed and the conflicting policy include fragments on the\n\
  target system will not be modified.\n\
  \n\
  The following import instructions can be used:\n\
  \n\
  \taccept  : The dependency is imported as-is.\n\
  \tremove  : Any assertions using the dependency are not imported.\n\
  \trename  : The dependency is renamed and imported.\n\
  \treplace : The dependency is replaced with an alternative.\n\
  \n\
  Examples:\n\
  \n\
  \t   1. -import accept IdProviderReference 1000\n\
  \t   2. -import remove IdProviderReference 1000\n\
  \t   3. -import replace IdProviderReference 1000 1045\n\
  \t   4. -import rename IncludedPolicyReference 1107 MyPolicy\n\
  \n\
  \t1. Import references to the Identity Provider with identifier '1000'\n\
  \t   without change.\n\
  \n\
  \t2. Remove assertions that reference the Identity Provider with identifier\n\
  \t   '1000' from the imported policy.\n\
  \n\
  \t3. Update assertions that reference the Identity Provider with identifier\n\
  \t   '1000' so they reference the Identity Provider with identifier '1045'\n\
  \t   in the imported policy.\n\
  \n\
  \t4. Rename the policy include fragment with identifier '1107' using the\n\
  \t   name 'MyPolicy'. This option allows policy include fragments with\n\
  \t   conflicting names to be imported.\n\
  \n\
  {1}

help.command.validate=\
  validate: Validate the policy for the identified resource of the specified\n\
  type.\n\
  usage: 1. validate -type TYPE -id ID\n\
  \t   2. validate -type TYPE -inFile PATH -outFile PATH\n\
  \n\
  \t1. Validate the policy for the resource of type 'TYPE' with the identifier\n\
  \t   'ID' and output to the console.\n\
  \n\
  \t1. Validate the policy for the resource of type 'TYPE' from the file\n\
  \t   'PATH' and output to the file 'PATH'.\n\
  \n\
  {0}\
  \n\
  This output from this command is a policy validation report containing\n\
  any warning and error messages for assertions and the overall policy.\n\
  \n\
  {1}
