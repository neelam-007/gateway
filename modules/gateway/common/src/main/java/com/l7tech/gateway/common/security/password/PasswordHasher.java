package com.l7tech.gateway.common.security.password;

/**
 * Interface implemented by a scheme that hashes and verified passwords.
 */
public interface PasswordHasher {
    /**
     * Construct a string encoding a verifier hash for the specified password bytes.
     *
     * @param passwordBytes the bytes of the password to hash.  Required. If converting from a String, use "password".getBytes(Charsets.UTF8)
     * @return a verifier string for the specified password, in a format determined by this particular hasher implementation.  Never null or empty.
     */
    String hashPassword(byte[] passwordBytes);

    /**
     * Verify the specified password against the specified verifier hash string.
     *
     * @param passwordBytes the password bytes to verifiy.  Required.
     * @param expectedHashedPassword the string encoded verifier hash, as generated by this hasher's {@link #hashPassword(byte[])} method.  Required.
     * @throws IncorrectPasswordException if the specified password does not verify against the specified verifier.
     * @throws PasswordHashingException if there is an error performing the verification.
     */
    void verifyPassword(byte[] passwordBytes, String expectedHashedPassword) throws IncorrectPasswordException, PasswordHashingException;

    /**
     * Quickly check whether this PasswordHasher implementation will likely be able to accept the specified verifier string.
     * <p/>
     * This check must be very fast, and will typically be based on the prefix only.  No actual hashing or computation will be done.
     *
     * @param verifierString a verifier to examine.  Required.
     * @return true if the specified verifier string might be accepted by {@link #verifyPassword(byte[], String)}.
     *         false if the specified verifier string is not in the correct format for this PasswordHasher and is guaranteed never to be accepted by {@link #verifyPassword(byte[], String)}.
     */
    boolean isVerifierRecognized(String verifierString);

    /**
     * Get the prefix used for verifier strings created by this PasswordHasher.
     *
     * @return the verifier string prefix, ie "$FOO$".  Never null, but may be empty if this PasswordHasher implementation does not use a static verifier string prefix.
     */
    String getPrefix();
}
