package com.l7tech.external.assertions.script.console;

import com.l7tech.util.BuildInfo;
import com.l7tech.util.Charsets;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * Class that will generate a custom .aar file embodying a particular compiled script.
 */
public class CompiledScriptAarFileGenerator {
    /* FooBarAssertion-5.3.aar:

       META-INF/MANIFEST.MF          generated per below template, replacing FooBar with assertion name
       AAR-INF/lib/bsf-2.4.0-l7p1.jar         copied from Gateway
       AAR-INF/lib/js-1.6R7.jar               copied from Gateway
       AAR-INF/lib/CompiledScriptSupport.jar  generated per below, out of .class files copied from Gateway
       com/l7tech/external/assertions/compiledscript/foobar/FooBarAssertion.class              generated by CompiledScriptAssertionMaker
       com/l7tech/external/assertions/compiledscript/foobar/server/ServerFooBarAssertion.class generated by CompiledScriptAssertionMaker

     */

    /* Manifest of FooBarAssertion-5.3.aar:
Manifest-Version: 1.0
Created-By: 16.3-b01 (Sun Microsystems Inc.)
Specification-Title: ModularAssertion
Specification-Version: 3.7.0
Specification-Vendor: Layer 7 Technologies
Specification-Vendor-Id: com.l7tech
Implementation-Title: FooBarAssertion
Implementation-Version: 5.3
Implementation-Vendor: Layer 7 Technologies
Implementation-Vendor-Id: com.l7tech
Built-By: mlyons
Build-Jdk: 1.6.0_20
Build-Timestamp: 2010-04-26 11:20:03
ModularAssertion-List: com.l7tech.external.assertions.compiledscript.foobar.FooBarAssertion
ModularAssertion-Private-Libraries: AAR-INF/lib/CompiledScriptSupport.jar
    */

    /*  Goes into AAR-INF/lib/CompiledScriptSupport.jar:
      com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport.class
      com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport$CompiledScriptServerAssertion.class
     */

    /**
     * Generate an .aar file that provides a single assertion that has the specified script baked into it.
     *
     * @param assCamelName  name of assertion in camel case, ie "EnhancedLeafRaker".  Required.
     * @param bsfLanguageName   bsf language id, ie "javascript".  Required.
     * @param script            text of script to bake into the .aar file
     * @param bsfJarBytes       byte contents of file "bsf-2.4.0-l7p1.jar". Required.
     * @param jsJarBytes        byte contents of file "js-1.7R3.jar".  Required.
     * @param ssaSupportClassBytes       byte contents of file "com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport.class".  Required.
     * @param ssaSupportCssaClassBytes   byte contents of file "com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport$CompiledScriptServerAssertion.class". Required.
     * @return the bytes of the .aar file.  Never null.
     * @throws IOException if an .aar file cannot be generated
     */
    public static byte[] generateCompiledScriptAarFile(String assCamelName, String bsfLanguageName, String script,
                                                byte[] bsfJarBytes,
                                                byte[] jsJarBytes,
                                                byte[] ssaSupportClassBytes,
                                                byte[] ssaSupportCssaClassBytes) throws IOException
    {
        final String secureSpanVersion = BuildInfo.getProductVersionMajor() + "." + BuildInfo.getProductVersionMinor() + "." + BuildInfo.getProductVersionSubMinor();
        final String assLowerName = assCamelName.toLowerCase();

        // First, build CompiledScriptSupport.jar
        byte[] compiledScriptSupportJarBytes = makeCompiledScriptSupportJarBytes(ssaSupportClassBytes, ssaSupportCssaClassBytes);

        // Then, build manifest
        byte[] manifestBytes = makeManifestBytes(assCamelName);

        // Then, generate assertion bean and server assertion classes
        byte[] assertionBeanClassBytes = CompiledScriptAssertionMaker.generateAssertionBeanClassBytes(assCamelName, "misc");
        byte[] serverAssertionClassBytes = CompiledScriptAssertionMaker.generateServerAssertionClassBytes(assCamelName, bsfLanguageName, script);

        // Finally, build .AAR file
        ByteArrayOutputStream aarOut = new ByteArrayOutputStream();
        ZipOutputStream zos = new ZipOutputStream(aarOut);
        zos.setComment(assCamelName + "Assertion-" + secureSpanVersion + ".aar");
        zos.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));
        zos.write(manifestBytes);
        zos.putNextEntry(new ZipEntry("AAR-INF/lib/bsf.jar"));
        zos.write(bsfJarBytes);
        zos.putNextEntry(new ZipEntry("AAR-INF/lib/js.jar"));
        zos.write(jsJarBytes);
        zos.putNextEntry(new ZipEntry("AAR-INF/lib/CompiledScriptSupport.jar"));
        zos.write(compiledScriptSupportJarBytes);
        zos.putNextEntry(new ZipEntry("com/l7tech/external/assertions/compiledscript/" + assLowerName + "/" + assCamelName + "Assertion.class"));
        zos.write(assertionBeanClassBytes);
        zos.putNextEntry(new ZipEntry("com/l7tech/external/assertions/compiledscript/" + assLowerName + "/server/Server" + assCamelName + "Assertion.class"));
        zos.write(serverAssertionClassBytes);
        zos.close();
        return aarOut.toByteArray();
    }

    private static byte[] makeCompiledScriptSupportJarBytes(byte[] ssaSupportClassBytes, byte[] ssaSupportCssaClassBytes) throws IOException {
        ByteArrayOutputStream cssJarOut = new ByteArrayOutputStream();
        ZipOutputStream zos = new ZipOutputStream(cssJarOut);
        zos.setComment("CompiledScriptSupport.jar");
        zos.putNextEntry(new ZipEntry("com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport.class"));
        zos.write(ssaSupportClassBytes);
        zos.putNextEntry(new ZipEntry("com/l7tech/external/assertions/script/server/ServerScriptAssertionSupport$CompiledScriptServerAssertion.class"));
        zos.write(ssaSupportCssaClassBytes);
        zos.close();
        return cssJarOut.toByteArray();
    }

    private static byte[] makeManifestBytes(String assCamelName) {
        final String secureSpanVersion = BuildInfo.getProductVersionMajor() + "." + BuildInfo.getProductVersionMinor() + "." + BuildInfo.getProductVersionSubMinor();
        final String assLowerName = assCamelName.toLowerCase();
        return MessageFormat.format("Manifest-Version: 1.0\n" +
                "Specification-Title: ModularAssertion\n" +
                "Specification-Version: 3.7.0\n" +
                "Specification-Vendor: Layer 7 Technologies\n" +
                "Specification-Vendor-Id: com.l7tech\n" +
                "Implementation-Title: {0}Assertion\n" +
                "Implementation-Version: {2}\n" +
                "Implementation-Vendor: Layer 7 Technologies\n" +
                "Implementation-Vendor-Id: com.l7tech\n" +
                "ModularAssertion-List: com.l7tech.external.assertions.compiledscript.{1}.{0}Assertion\n" +
                "ModularAssertion-Private-Libraries: AAR-INF/lib/CompiledScriptSupport.jar\n",
                assCamelName, assLowerName, secureSpanVersion).getBytes(Charsets.UTF8);
    }
}
