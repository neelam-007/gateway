<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<wadl:application xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <wadl:grammars>
        <wadl:include href="-ssg-template-url-1.0/gateway-management.xsd"/>
    </wadl:grammars>
    <wadl:resources base="-ssg-template-url-">
        <wadl:resource path="1.0/encapsulatedAssertions">
            <wadl:doc>Encapsulated Assertion lets you turn any policy fragment into a self-contained &quot;assertion&quot; that accepts input values
                and sets output values.</wadl:doc>
            <wadl:doc title="title-src">Encapsulated Assertion</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of encapsulated assertions. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/activeConnectors?name=MyEncass&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns encapsulated assertion with name &quot;MyEncass&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by.</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="policy.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Policy id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of encapsulated assertions. If the list is empty then no encapsulated assertions were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new encapsulated assertion</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:EncapsulatedAssertion" mediaType="application/xml">
                        <wadl:doc>The encapsulated assertion to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created encapsulated assertion</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Encapsulated Assertion lets you turn any policy fragment into a self-contained &quot;assertion&quot; that accepts input values
                    and sets output values.</wadl:doc>
                <wadl:doc title="title-src">Encapsulated Assertion</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the encapsulated assertion to return</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing encapsulated assertion.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing encapsulated assertion. If an encapsulated assertion with the given ID does not
                        exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:EncapsulatedAssertion" mediaType="application/xml">
                            <wadl:doc>Encapsulated assertion to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated encapsulated assertion.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns an encapsulated assertion with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The encapsulated assertion.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Encapsulated Assertion lets you turn any policy fragment into a self-contained &quot;assertion&quot; that accepts input values
                    and sets output values.</wadl:doc>
                <wadl:doc title="title-src">Encapsulated Assertion</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example encapsulated assertion that can be used as a reference for what
                        encapsulated assertion objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template encapsulated assertion.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/dependencies">
                <wadl:doc>This is a provider for dependencies. It finds the dependencies of entities that can have dependencies.</wadl:doc>
                <wadl:doc title="title-src">Dependency</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The id of the dependent entity</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the list of dependencies for this entity.</wadl:doc>
                    <wadl:doc title="title-src">Get Dependencies</wadl:doc>
                    <wadl:doc title="title-javadoc">Get Dependencies</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The list of dependencies.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/resources">
            <wadl:doc>Resource documents are documents schema documents. They are either a dtd or an xml schema.</wadl:doc>
            <wadl:doc title="title-src">Document</wadl:doc>
            <wadl:doc title="title-javadoc">Resource Document</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new resource document</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:ResourceDocument" mediaType="application/xml">
                        <wadl:doc>The resource document to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>a reference to the newly created resource document</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of resource documents. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/resources?uri=documentURI&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns resource document with uri &quot;documentURI&quot;.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/resources?type=xmlschema&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns resource documents of xmlschema type&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="uri"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="uri" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Uri filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="description" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Description filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="type" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Type filter</wadl:doc>
                        <wadl:option value="dtd"/>
                        <wadl:option value="xmlschema"/>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of resource documents. If the list is empty then no resource documents were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Resource documents are documents schema documents. They are either a dtd or an xml schema.</wadl:doc>
                <wadl:doc title="title-src">Document</wadl:doc>
                <wadl:doc title="title-javadoc">Resource Document</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the resource document to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a resource document with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The resource document.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing resource document. If a resource document with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:ResourceDocument" mediaType="application/xml">
                            <wadl:doc>Resource document to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated resource document.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing resource document.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Resource documents are documents schema documents. They are either a dtd or an xml schema.</wadl:doc>
                <wadl:doc title="title-src">Document</wadl:doc>
                <wadl:doc title="title-javadoc">Resource Document</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example resource document that can be used as a reference for what resource
                        document objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template resource document.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/emailListeners">
            <wadl:doc>An email listener will periodically poll an email server for messages to process.</wadl:doc>
            <wadl:doc title="title-src">Email Listener</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new email listener</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:EmailListener" mediaType="application/xml">
                        <wadl:doc>The email listener to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>a reference to the newly email listener</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of email listeners. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/emailListeners?name=MyEmailListener&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns email listener with name &quot;MyEmailListener&quot;.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/emailListeners?serverTypes=IMAP&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns email listeners of IMAP type&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="host"/>
                        <wadl:option value="serverType"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="active" style="query" type="xsd:boolean">
                        <wadl:doc>Active filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="serverType" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Server type filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of email listener. If the list is empty then no email listeners were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>An email listener will periodically poll an email server for messages to process.</wadl:doc>
                <wadl:doc title="title-src">Email Listener</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the email listener to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns an email listener with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The email listener.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing email listener. If an email listener with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:EmailListener" mediaType="application/xml">
                            <wadl:doc>Email listener to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated email listener.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing email listener.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>An email listener will periodically poll an email server for messages to process.</wadl:doc>
                <wadl:doc title="title-src">Email Listener</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example email listener that can be used as a reference for what email listener
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template email listener.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/users">
            <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
            <wadl:doc title="title-src">User</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of users. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List Users</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by.</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="login"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="login" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Login filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of groups. If the list is empty then no groups were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new user. New users can only be created on the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">Create User</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:User" mediaType="application/xml">
                        <wadl:doc>The user to create.</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created user</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{userID}/certificate">
                <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">User</wadl:doc>
                <wadl:param name="userID" style="template" type="xsd:string">
                    <wadl:doc>The ID of the user</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Gets the user's certificate</wadl:doc>
                    <wadl:doc title="title-src">Get User Certificate</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The certificate</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Removes the certificate from the user</wadl:doc>
                    <wadl:doc title="title-src">Delete User Certificate</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Set this user's certificate</wadl:doc>
                    <wadl:doc title="title-src">Set User Certificate</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:CertificateData" mediaType="application/xml">
                            <wadl:doc>The certificate data</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The certificate set on the user</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{userID}">
                <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">User</wadl:doc>
                <wadl:param name="userID" style="template" type="xsd:string">
                    <wadl:doc>The ID of the user to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a user with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get User</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The user.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Updates an existing user</wadl:doc>
                    <wadl:doc title="title-src">Update User</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:User" mediaType="application/xml">
                            <wadl:doc>The updated user</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly updated user.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing user</wadl:doc>
                    <wadl:doc title="title-src">Delete User</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">User</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example user that can be used as a reference for what user objects should look
                        like.</wadl:doc>
                    <wadl:doc title="title-src">Template User</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template user.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{userID}/password">
                <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">User</wadl:doc>
                <wadl:param name="userID" style="template" type="xsd:string">
                    <wadl:doc>The ID of the user</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Change this user's password</wadl:doc>
                    <wadl:doc title="title-src">Change User Password</wadl:doc>
                    <wadl:request>
                        <wadl:param name="format" style="query" type="xsd:string" default="plain">
                            <wadl:doc>The format of the password. &quot;plain&quot; or &quot;sha512crypt&quot;</wadl:doc>
                        </wadl:param>
                        <wadl:representation element="xsd:string" mediaType="application/xml">
                            <wadl:doc>The new password</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The user that the password was changed for.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/passwords">
            <wadl:doc>Secure passwords are used to securely store passwords and plain text PEM private keys in the Gateway database.</wadl:doc>
            <wadl:doc title="title-src">Secure Password</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new secure password</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:StoredPassword" mediaType="application/xml">
                        <wadl:doc>The secure password to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created secure password</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of secure passwords. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/passwords?name=MyPassword&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns secure password with name &quot;MyPassword&quot;.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/passwords?type=Password&amp;name=MyPassword&amp;name=MyOtherPassword&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns secure password of Password type with name either &quot;MyPassword&quot; or
                    &quot;MyOtherPassword&quot;&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="type" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Type filter</wadl:doc>
                        <wadl:option value="Password"/>
                        <wadl:option value="PEM Private Key"/>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of secure passwords. If the list is empty then no secure passwords were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Secure passwords are used to securely store passwords and plain text PEM private keys in the Gateway database.</wadl:doc>
                <wadl:doc title="title-src">Secure Password</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the secure password to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing secure password. If a secure password with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:StoredPassword" mediaType="application/xml">
                            <wadl:doc>Secure password to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated secure password.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a secure password with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The secure password.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing secure password.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Secure passwords are used to securely store passwords and plain text PEM private keys in the Gateway database.</wadl:doc>
                <wadl:doc title="title-src">Secure Password</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example secure password that can be used as a reference for what secure password
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template secure password.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/listenPorts">
            <wadl:doc>A listen port is a TCP port that &quot;listens&quot; for incoming messages that are then passed to the Gateway message
                processor.</wadl:doc>
            <wadl:doc title="title-src">Listen Port</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of listen ports. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/listenPorts?name=MyListenPort&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns listen port with name &quot;MyListenPort&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="enabled"/>
                        <wadl:option value="protocol"/>
                        <wadl:option value="port"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="protocol" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Protocol filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="port" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Port filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of listen ports. If the list is empty then no listen ports were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new listen port</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:ListenPort" mediaType="application/xml">
                        <wadl:doc>The listen port to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created listen port</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A listen port is a TCP port that &quot;listens&quot; for incoming messages that are then passed to the Gateway message
                    processor.</wadl:doc>
                <wadl:doc title="title-src">Listen Port</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the listen port to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a listen port with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The listen port.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing listen port. If a listen port with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:ListenPort" mediaType="application/xml">
                            <wadl:doc>Listen port to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated listen port.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing listen port.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A listen port is a TCP port that &quot;listens&quot; for incoming messages that are then passed to the Gateway message
                    processor.</wadl:doc>
                <wadl:doc title="title-src">Listen Port</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example listen port that can be used as a reference for what listen port objects
                        should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template listen port.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/trustedCertificates">
            <wadl:doc>Certificates are either HTTPS and LDAPS certificates.This resource enables the management of those certificates.</wadl:doc>
            <wadl:doc title="title-src">Certificate</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new certificate</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:TrustedCertificate" mediaType="application/xml">
                        <wadl:doc>The certificate to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created certificate</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of certificates. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/trustedCertificates?name=MyCertificate&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns certificates with name &quot;MyCertificate&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by.</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of certificates. If the list is empty then no certificates were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>Certificates are either HTTPS and LDAPS certificates.This resource enables the management of those certificates.</wadl:doc>
                <wadl:doc title="title-src">Certificate</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example certificate that can be used as a reference for what certificate objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template certificate.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>Certificates are either HTTPS and LDAPS certificates.This resource enables the management of those certificates.</wadl:doc>
                <wadl:doc title="title-src">Certificate</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the certificate to return</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing certificate. If a certificate with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:TrustedCertificate" mediaType="application/xml">
                            <wadl:doc>Certificate to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated certificate.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing certificate.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Retrieves a certificate.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The certificate</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/customKeyValues">
            <wadl:doc>A Custom key value is an item that can be stored by a custom assertion.</wadl:doc>
            <wadl:doc title="title-src">Custom Key Value Store</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new custom key value.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:CustomKeyValue" mediaType="application/xml">
                        <wadl:doc>The custom key value to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created custom key value</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of custom key values. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/customKeyValues?key=MyKey&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns custom key value with key &quot;MyKey&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by.</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="key" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Key filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of custom key values. If the list is empty then no custom key values were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A Custom key value is an item that can be stored by a custom assertion.</wadl:doc>
                <wadl:doc title="title-src">Custom Key Value Store</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the custom key value to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing custom key value.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a custom key value with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The custom key value.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing custom key value. If a custom key value with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:CustomKeyValue" mediaType="application/xml">
                            <wadl:doc>Custom key value to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated custom key value.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A Custom key value is an item that can be stored by a custom assertion.</wadl:doc>
                <wadl:doc title="title-src">Custom Key Value Store</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example custom key value that can be used as a reference for what custom key
                        value objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template custom key value.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/clusterProperties">
            <wadl:doc>Cluster properties are used to set global properties. Example cluster properties include &quot;cluster.hostname&quot; and
                &quot;log.levels&quot;</wadl:doc>
            <wadl:doc title="title-src">Cluster Property</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of cluster properties. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/clusterProperties?name=MyProperty&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns cluster property with name &quot;MyProperty&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of cluster properties. If the list is empty then no cluster properties were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new cluster property.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:ClusterProperty" mediaType="application/xml">
                        <wadl:doc>The cluster property to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>a reference to the newly created cluster property</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>Cluster properties are used to set global properties. Example cluster properties include &quot;cluster.hostname&quot; and
                    &quot;log.levels&quot;</wadl:doc>
                <wadl:doc title="title-src">Cluster Property</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example cluster property that can be used as a reference for what cluster
                        property objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template cluster property.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>Cluster properties are used to set global properties. Example cluster properties include &quot;cluster.hostname&quot; and
                    &quot;log.levels&quot;</wadl:doc>
                <wadl:doc title="title-src">Cluster Property</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the cluster property to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a cluster property with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The cluster property.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing cluster property. If a cluster property with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:ClusterProperty" mediaType="application/xml">
                            <wadl:doc>Cluster property to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated cluster property.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing cluster property.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/services">
            <wadl:doc>This resource is used to manage services.</wadl:doc>
            <wadl:doc title="title-src">Published Service</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new service</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:param name="versionComment" style="query" type="xsd:string">
                        <wadl:doc>The comment to add to the policy version when creating the service</wadl:doc>
                    </wadl:param>
                    <wadl:representation element="l7:Service" mediaType="application/xml">
                        <wadl:doc>The service to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created service</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of servicees. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/services?name=MyService&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns service with name &quot;MyService&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="parentFolder.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="guid" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Guid filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="soap" style="query" type="xsd:boolean">
                        <wadl:doc>Soap filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="parentFolder.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Parent folder ID filter.</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of services. If the list is empty then no services were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>This resource is used to manage services.</wadl:doc>
                <wadl:doc title="title-src">Published Service</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example service that can be used as a reference for what service objects should
                        look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template service.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/versions">
                <wadl:doc>This resource handles policy version operations.</wadl:doc>
                <wadl:doc title="title-src">Policy Version</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The service id</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>&lt;p&gt;Returns a list of policy versions. Can optionally sort the resulting list in ascending or
                        descending order. Other params given will be used as search values.&lt;/p&gt;
                        &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                    <wadl:doc title="title-src">List Versions</wadl:doc>
                    <wadl:request>
                        <wadl:param name="sort" style="query" type="xsd:string">
                            <wadl:doc>Key to sort the list by</wadl:doc>
                            <wadl:option value="id"/>
                            <wadl:option value="version"/>
                        </wadl:param>
                        <wadl:param name="order" style="query" type="xsd:string">
                            <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                                ascending if not specified</wadl:doc>
                            <wadl:option value="asc"/>
                            <wadl:option value="desc"/>
                        </wadl:param>
                        <wadl:param name="id" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Id filter</wadl:doc>
                        </wadl:param>
                        <wadl:param name="active" style="query" type="xsd:boolean">
                            <wadl:doc>Active filter</wadl:doc>
                        </wadl:param>
                        <wadl:param name="comment" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Comment filter</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A list of policy versions. If the list is empty then no policy versions were found.</wadl:doc>
                        <wadl:representation element="l7:List" mediaType="application/xml"/>
                    </wadl:response>
                </wadl:method>
                <wadl:resource path="{versionNumber}/comment">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy version to set the comment on.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="PUT">
                        <wadl:doc>Sets the comment on a specific policy version.</wadl:doc>
                        <wadl:doc title="title-src">Set Version Comment</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="xsd:string" mediaType="application/xml">
                                <wadl:doc>Comment to set on the policy version. This will override any existing comment.</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>A reference to the updated policy version</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="active">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:method name="GET">
                        <wadl:doc>Returns the active policy version.</wadl:doc>
                        <wadl:doc title="title-src">Get Active Version</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The active policy version.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{versionNumber}">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy to return.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="GET">
                        <wadl:doc>Retrieve a policy version by the version number</wadl:doc>
                        <wadl:doc title="title-src">Get Version</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The policy version.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="active/comment">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:method name="PUT">
                        <wadl:doc>Sets a comment on the active policy version</wadl:doc>
                        <wadl:doc title="title-src">Set Active Version Comment</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="xsd:string" mediaType="application/xml">
                                <wadl:doc>Comment to set on the active policy version</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>The updated active policy version</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{versionNumber}/activate">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy version to set active.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="POST">
                        <wadl:doc>Activates the specified policy version</wadl:doc>
                        <wadl:doc title="title-src">Activate Version</wadl:doc>
                    </wadl:method>
                </wadl:resource>
            </wadl:resource>
            <wadl:resource path="{id}/dependencies">
                <wadl:doc>This is a provider for dependencies. It finds the dependencies of entities that can have dependencies.</wadl:doc>
                <wadl:doc title="title-src">Dependency</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The id of the dependent entity</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the list of dependencies for this entity.</wadl:doc>
                    <wadl:doc title="title-src">Get Dependencies</wadl:doc>
                    <wadl:doc title="title-javadoc">Get Dependencies</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The list of dependencies.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>This resource is used to manage services.</wadl:doc>
                <wadl:doc title="title-src">Published Service</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the service to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing service.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a service with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The service.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing service. If a service with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update Or Create</wadl:doc>
                    <wadl:request>
                        <wadl:param name="active" style="query" type="xsd:boolean" default="true">
                            <wadl:doc>Should the service be activated after the update.</wadl:doc>
                        </wadl:param>
                        <wadl:param name="versionComment" style="query" type="xsd:string">
                            <wadl:doc>The comment to add to the policy version when updating the service</wadl:doc>
                        </wadl:param>
                        <wadl:representation element="l7:Service" mediaType="application/xml">
                            <wadl:doc>Service to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated service.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/serviceAliases">
            <wadl:doc>A service alias allows a service to appear in more than one folder in the Services and Policies list. The service
                alias is a linked copy of the original service.</wadl:doc>
            <wadl:doc title="title-src">Service Alias</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of service aliases. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/serviceAliases?service.id=26df9b0abc4dd6780fd9da5929cde13e&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns service aliases for service with ID &quot;26df9b0abc4dd6780fd9da5929cde13e&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="service.id"/>
                        <wadl:option value="folder.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="service.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Service id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="folder.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Folder id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of service aliases. If the list is empty then no service aliases were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new service alias</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:ServiceAlias" mediaType="application/xml">
                        <wadl:doc>The service alias to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created service alias</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A service alias allows a service to appear in more than one folder in the Services and Policies list. The service
                    alias is a linked copy of the original service.</wadl:doc>
                <wadl:doc title="title-src">Service Alias</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the service alias to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a service alias with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The service alias.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing service alias.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing service alias. If a service alias with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update Or Create</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:ServiceAlias" mediaType="application/xml">
                            <wadl:doc>Service alias to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated service alias.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A service alias allows a service to appear in more than one folder in the Services and Policies list. The service
                    alias is a linked copy of the original service.</wadl:doc>
                <wadl:doc title="title-src">Service Alias</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example service alias that can be used as a reference for what service alias
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template service alias.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/privateKeys">
            <wadl:doc>This resource is used to manage private keys.</wadl:doc>
            <wadl:doc title="title-src">Private Key</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of private keys. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/privateKeys?alias=mykey&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns the private key with alias &quot;mykey&quot;&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="alias" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Alias filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of private keys. If the list is empty then no private keys were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}/specialPurpose">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the key to mark for special purpose</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Mark a private key for a special special purpose</wadl:doc>
                    <wadl:doc title="title-src">Mark Special Purpose</wadl:doc>
                    <wadl:request>
                        <wadl:param name="purpose" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>The special purpose to mark the key with. Can specify more then one special purposes.</wadl:doc>
                            <wadl:option value="SSL"/>
                            <wadl:option value="CA"/>
                            <wadl:option value="AUDIT_VIEWER"/>
                            <wadl:option value="AUDIT_SIGNING"/>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly updated private key.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the private key to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Retrieve a private key by its ID. The ID is a combination of the keystoreId and the key alias separated by a
                        ':'.
                        For example 00000000000000000000000000000002:mykey</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The private key.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="POST">
                    <wadl:doc>&lt;p&gt;Creates a new private key given a PrivateKeyCreationContext. The PrivateKeyCreationContext is used to specify
                        how
                        the private key should be created. The PrivateKeyCreationContext dn is the domain name to create the key with.
                        The properties are optional but you may specify:&lt;/p&gt;
                        &lt;table class=&quot;properties-table&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                        &lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
                        &lt;tr&gt;
                        &lt;td&gt;ecName&lt;/td&gt;
                        &lt;td&gt;String&lt;/td&gt;
                        &lt;td&gt;This the Elliptic Curve key type to use. If it is not specified an RSA key type is used.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                        &lt;td&gt;rsaKeySize&lt;/td&gt;
                        &lt;td&gt;Integer&lt;/td&gt;
                        &lt;td&gt;This is the rsa key size to use. This is only applicable if an ecName is not specified. Defaults to
                        2048&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                        &lt;td&gt;daysUntilExpiry&lt;/td&gt;
                        &lt;td&gt;Integer&lt;/td&gt;
                        &lt;td&gt;Specify the number of days until the key expires. Defaults to 5 years.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                        &lt;td&gt;caCapable&lt;/td&gt;
                        &lt;td&gt;Boolean&lt;/td&gt;
                        &lt;td&gt;Specify if the certificate should be CA capable. Defaults to false&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                        &lt;td&gt;signatureHashAlgorithm&lt;/td&gt;
                        &lt;td&gt;String&lt;/td&gt;
                        &lt;td&gt;The algorithm used for the signature hash.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;/table&gt;
                        &lt;p class=&quot;italicize&quot;&gt;Example request:&lt;/p&gt;
                        &lt;div class=&quot;code&quot;&gt;
                        &lt;pre&gt;
                        &amp;lt;l7:PrivateKeyCreationContext xmlns:l7=&amp;quot;http://ns.l7tech.com/2010/04/gateway-management&amp;quot;&amp;gt;
                        &amp;lt;l7:Dn&amp;gt;CN=srcAlias&amp;lt;/l7:Dn&amp;gt;
                        &amp;lt;l7:Properties&amp;gt;
                        &amp;lt;l7:Property key=&amp;quot;signatureHashAlgorithm&amp;quot;&amp;gt;
                        &amp;lt;l7:StringValue&amp;gt;SHA384&amp;lt;/l7:StringValue&amp;gt;
                        &amp;lt;/l7:Property&amp;gt;
                        &amp;lt;l7:Property key=&amp;quot;rsaKeySize&amp;quot;&amp;gt;
                        &amp;lt;l7:IntegerValue&amp;gt;516&amp;lt;/l7:IntegerValue&amp;gt;
                        &amp;lt;/l7:Property&amp;gt;
                        &amp;lt;l7:Property key=&amp;quot;ecName&amp;quot;&amp;gt;
                        &amp;lt;l7:StringValue&amp;gt;secp384r1&amp;lt;/l7:StringValue&amp;gt;
                        &amp;lt;/l7:Property&amp;gt;
                        &amp;lt;l7:Property key=&amp;quot;daysUntilExpiry&amp;quot;&amp;gt;
                        &amp;lt;l7:IntegerValue&amp;gt;2&amp;lt;/l7:IntegerValue&amp;gt;
                        &amp;lt;/l7:Property&amp;gt;
                        &amp;lt;l7:Property key=&amp;quot;caCapable&amp;quot;&amp;gt;
                        &amp;lt;l7:BooleanValue&amp;gt;true&amp;lt;/l7:BooleanValue&amp;gt;
                        &amp;lt;/l7:Property&amp;gt;
                        &amp;lt;/l7:Properties&amp;gt;
                        &amp;lt;/l7:PrivateKeyCreationContext&amp;gt;
                        &lt;/pre&gt;
                        &lt;/div&gt;
                        &lt;p&gt;This responds with a reference to the newly created private key.&lt;/p&gt;</wadl:doc>
                    <wadl:doc title="title-src">Create Resource</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:PrivateKeyCreationContext" mediaType="application/xml">
                            <wadl:doc>This specifies how to create the private key.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created private key</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Updates an existing private key. This api call can be used to replace a private key's certificate chain or
                        change
                        its
                        security zone.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:PrivateKey" mediaType="application/xml">
                            <wadl:doc>The updated private key.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly updated private key.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing private key.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/import">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID to import the key into</wadl:doc>
                </wadl:param>
                <wadl:method name="POST">
                    <wadl:doc>Import a private key.</wadl:doc>
                    <wadl:doc title="title-src">Import Private Key</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:PrivateKeyImportContext" mediaType="application/xml">
                            <wadl:doc>The private key to import. This contains the key data. It contains the password
                                that the key is secured with. An Alias can also be given to specify which alias
                                to use if the key given contains more then one alias. By default the first alias
                                in the given key is used.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly imported private key.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example private key that can be used as a reference for what private key objects
                        should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template private key.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template/privatekeycreationcontext">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example private key creation context that can be used as a reference for what
                        private key creation context objects
                        should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template Private Key Creation Context</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template private key creation context.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template/privatekeyexportcontext">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example private key export context that can be used as a reference for what
                        private key export context objects
                        should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template Private Key Export Context</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template private key export context.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template/privatekeyimportcontext">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example private key import context that can be used as a reference for what
                        private key import context objects
                        should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template Private Key Import Context</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template private key import context.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/generateCSR">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the key to generate the CSR from</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Generate a certificate signing request for this private key.</wadl:doc>
                    <wadl:doc title="title-src">Generate Csr</wadl:doc>
                    <wadl:request>
                        <wadl:param name="csrSubjectDN" style="query" type="xsd:string">
                            <wadl:doc>The CSR subject dn to use. It defaults to the key's subject dn if none is specified.</wadl:doc>
                        </wadl:param>
                        <wadl:param name="signatureHash" style="query" type="xsd:string">
                            <wadl:doc>The signature hash to use. Defaults to 'Automatic'</wadl:doc>
                            <wadl:option value="SHA1"/>
                            <wadl:option value="SHA256"/>
                            <wadl:option value="SHA384"/>
                            <wadl:option value="SHA512"/>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The CSR data.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/signCert">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the key to sign the certificate with</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Signs a csr pem file with the specified key.</wadl:doc>
                    <wadl:doc title="title-src">Sign Cert</wadl:doc>
                    <wadl:request>
                        <wadl:param name="subjectDN" style="query" type="xsd:string">
                            <wadl:doc>The subject DN to set on the signed certificate</wadl:doc>
                        </wadl:param>
                        <wadl:param name="expiryAge" style="query" type="xsd:int" default="730">
                            <wadl:doc>The expiry age of the certificate</wadl:doc>
                        </wadl:param>
                        <wadl:param name="signatureHash" style="query" type="xsd:string" default="Automatic">
                            <wadl:doc>The signature hash to use. Defaults to 'Automatic'</wadl:doc>
                            <wadl:option value="Automatic"/>
                            <wadl:option value="SHA1"/>
                            <wadl:option value="SHA256"/>
                            <wadl:option value="SHA384"/>
                            <wadl:option value="SHA512"/>
                        </wadl:param>
                        <wadl:representation element="xsd:string" mediaType="application/xml">
                            <wadl:doc>The certificate csr to sign</wadl:doc>
                        </wadl:representation>
                        <wadl:representation mediaType="application/x-pem-file"/>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The signed certificate.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/export">
                <wadl:doc>This resource is used to manage private keys.</wadl:doc>
                <wadl:doc title="title-src">Private Key</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the key to export</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Export a private key.</wadl:doc>
                    <wadl:doc title="title-src">Export Private Key</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:PrivateKeyExportContext" mediaType="application/xml">
                            <wadl:doc>The export key context. This contains a password to secure the exported key with.
                                The password must always be specified but can be the empty string to specify no
                                password. This can also specify the alias to export the private key with. If no
                                alias is specified the key will be exported with its current alias.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The exported private key</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/identityProviders">
            <wadl:doc>An Identity provider is used to store and provide identities.</wadl:doc>
            <wadl:doc title="title-src">Identity Provider</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates an identity provider</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:IdentityProvider" mediaType="application/xml">
                        <wadl:doc>The identity provider to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created identity provider</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of identity providers. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/identityProviders?name=MyIDProvider&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns identity provider with name &quot;MyIDProvider&quot;.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/identityProviders?type=LDAP&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns identity providers of LDAP type&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="type"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="type" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Type filter</wadl:doc>
                        <wadl:option value="LDAP"/>
                        <wadl:option value="Internal"/>
                        <wadl:option value="Federated"/>
                        <wadl:option value="Simple LDAP"/>
                        <wadl:option value="Policy-Backed"/>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of entities. If the list is empty then no entities were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{identityProviderID}">
                <wadl:doc>An Identity provider is used to store and provide identities.</wadl:doc>
                <wadl:doc title="title-src">Identity Provider</wadl:doc>
                <wadl:param name="identityProviderID" style="template" type="xsd:string">
                    <wadl:doc>ID of the identity provider to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns an identity provider with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The identity provider.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing identity provider.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing identity provider. If an identity provider with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:IdentityProvider" mediaType="application/xml">
                            <wadl:doc>Identity provider to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated identity provider.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{identityProviderID}/users">
                <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                <wadl:doc title="title-src">User</wadl:doc>
                <wadl:param name="identityProviderID" style="template" type="xsd:string">
                    <wadl:doc>The provider id. &quot;default&quot; for the default identity provider</wadl:doc>
                </wadl:param>
                <wadl:method name="POST">
                    <wadl:doc>Creates a new user. New users can only be created on the internal identity provider.</wadl:doc>
                    <wadl:doc title="title-src">Create User</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:User" mediaType="application/xml">
                            <wadl:doc>The user to create.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created user</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>&lt;p&gt;Returns a list of users. Can optionally sort the resulting list in ascending or
                        descending order. Other params given will be used as search values.&lt;/p&gt;
                        &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                    <wadl:doc title="title-src">List Users</wadl:doc>
                    <wadl:request>
                        <wadl:param name="sort" style="query" type="xsd:string">
                            <wadl:doc>Key to sort the list by.</wadl:doc>
                            <wadl:option value="id"/>
                            <wadl:option value="login"/>
                        </wadl:param>
                        <wadl:param name="order" style="query" type="xsd:string">
                            <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                                ascending if not specified</wadl:doc>
                            <wadl:option value="asc"/>
                            <wadl:option value="desc"/>
                        </wadl:param>
                        <wadl:param name="login" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Login filter</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A list of groups. If the list is empty then no groups were found.</wadl:doc>
                        <wadl:representation element="l7:List"/>
                    </wadl:response>
                </wadl:method>
                <wadl:resource path="template">
                    <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                    <wadl:doc title="title-src">User</wadl:doc>
                    <wadl:method name="GET">
                        <wadl:doc>Returns a template, which is an example user that can be used as a reference for what user objects should look
                            like.</wadl:doc>
                        <wadl:doc title="title-src">Template User</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The template user.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{userID}/certificate">
                    <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                    <wadl:doc title="title-src">User</wadl:doc>
                    <wadl:param name="userID" style="template" type="xsd:string">
                        <wadl:doc>The ID of the user</wadl:doc>
                    </wadl:param>
                    <wadl:method name="PUT">
                        <wadl:doc>Set this user's certificate</wadl:doc>
                        <wadl:doc title="title-src">Set User Certificate</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="l7:CertificateData" mediaType="application/xml">
                                <wadl:doc>The certificate data</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>The certificate set on the user</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                    <wadl:method name="DELETE">
                        <wadl:doc>Removes the certificate from the user</wadl:doc>
                        <wadl:doc title="title-src">Delete User Certificate</wadl:doc>
                    </wadl:method>
                    <wadl:method name="GET">
                        <wadl:doc>Gets the user's certificate</wadl:doc>
                        <wadl:doc title="title-src">Get User Certificate</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The certificate</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{userID}">
                    <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                    <wadl:doc title="title-src">User</wadl:doc>
                    <wadl:param name="userID" style="template" type="xsd:string">
                        <wadl:doc>The ID of the user to update</wadl:doc>
                    </wadl:param>
                    <wadl:method name="DELETE">
                        <wadl:doc>Deletes an existing user</wadl:doc>
                        <wadl:doc title="title-src">Delete User</wadl:doc>
                    </wadl:method>
                    <wadl:method name="GET">
                        <wadl:doc>Returns a user with the given ID.</wadl:doc>
                        <wadl:doc title="title-src">Get User</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The user.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                    <wadl:method name="PUT">
                        <wadl:doc>Updates an existing user</wadl:doc>
                        <wadl:doc title="title-src">Update User</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="l7:User" mediaType="application/xml">
                                <wadl:doc>The updated user</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>A reference to the newly updated user.</wadl:doc>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{userID}/password">
                    <wadl:doc>A user represents a user identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Users can only be created and updated in the internal identity provider.</wadl:doc>
                    <wadl:doc title="title-src">User</wadl:doc>
                    <wadl:param name="userID" style="template" type="xsd:string">
                        <wadl:doc>The ID of the user</wadl:doc>
                    </wadl:param>
                    <wadl:method name="PUT">
                        <wadl:doc>Change this user's password</wadl:doc>
                        <wadl:doc title="title-src">Change User Password</wadl:doc>
                        <wadl:request>
                            <wadl:param name="format" style="query" type="xsd:string" default="plain">
                                <wadl:doc>The format of the password. &quot;plain&quot; or &quot;sha512crypt&quot;</wadl:doc>
                            </wadl:param>
                            <wadl:representation element="xsd:string" mediaType="application/xml">
                                <wadl:doc>The new password</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>The user that the password was changed for.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>An Identity provider is used to store and provide identities.</wadl:doc>
                <wadl:doc title="title-src">Identity Provider</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example identity provider that can be used as a reference for what identity
                        provider objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template identity provider.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{identityProviderID}/groups">
                <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
                <wadl:doc title="title-src">Group</wadl:doc>
                <wadl:param name="identityProviderID" style="template" type="xsd:string">
                    <wadl:doc>The provider id. &quot;default&quot; for the default identity provider</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>&lt;p&gt;Returns a list of groups. Can optionally sort the resulting list in ascending or
                        descending order. Other params given will be used as search values.&lt;/p&gt;
                        &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                    <wadl:doc title="title-src">List Groups</wadl:doc>
                    <wadl:request>
                        <wadl:param name="sort" style="query" type="xsd:string">
                            <wadl:doc>Key to sort the list by.</wadl:doc>
                            <wadl:option value="id"/>
                            <wadl:option value="name"/>
                        </wadl:param>
                        <wadl:param name="order" style="query" type="xsd:string">
                            <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                                ascending if not specified</wadl:doc>
                            <wadl:option value="asc"/>
                            <wadl:option value="desc"/>
                        </wadl:param>
                        <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Name filter</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A list of groups. If the list is empty then no groups were found.</wadl:doc>
                        <wadl:representation element="l7:List"/>
                    </wadl:response>
                </wadl:method>
                <wadl:resource path="template">
                    <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
                    <wadl:doc title="title-src">Group</wadl:doc>
                    <wadl:method name="GET">
                        <wadl:doc>Returns a template, which is an example group that can be used as a reference for what group objects should look
                            like.</wadl:doc>
                        <wadl:doc title="title-src">Group Template</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The template group.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{groupID}">
                    <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                        the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
                    <wadl:doc title="title-src">Group</wadl:doc>
                    <wadl:param name="groupID" style="template" type="xsd:string">
                        <wadl:doc>The ID of the group to return</wadl:doc>
                    </wadl:param>
                    <wadl:method name="GET">
                        <wadl:doc>Returns a group with the given ID.</wadl:doc>
                        <wadl:doc title="title-src">Get Group</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The group.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/bundle">
            <wadl:doc>This resource is used to export and import bundles for migration. See &lt;a href=&quot;migration.html&quot;&gt;migration.html&lt;/a&gt;
                for
                more documentation on migration and bundling.</wadl:doc>
            <wadl:doc title="title-src">Bundle</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>Returns the bundle for the given resources. This API call is capable of returning a bundle created from multiple resources.</wadl:doc>
                <wadl:doc title="title-src">Export Bundle</wadl:doc>
                <wadl:request>
                    <wadl:param name="defaultAction" style="query" type="xsd:string" default="NewOrExisting">
                        <wadl:doc>Default bundling action. By default this is NewOrExisting</wadl:doc>
                        <wadl:option value="NewOrExisting"/>
                        <wadl:option value="NewOrUpdate"/>
                    </wadl:param>
                    <wadl:param name="exportGatewayRestManagementService" style="query" type="xsd:boolean" default="false">
                        <wadl:doc>If true the gateway management service will be exported too. False by
                            default.</wadl:doc>
                    </wadl:param>
                    <wadl:param name="folder" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Folders to export</wadl:doc>
                    </wadl:param>
                    <wadl:param name="service" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Services to export</wadl:doc>
                    </wadl:param>
                    <wadl:param name="policy" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Policies to export</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>The bundle for the resources</wadl:doc>
                    <wadl:representation element="l7:Item"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="PUT">
                <wadl:doc>This will import a bundle.</wadl:doc>
                <wadl:doc title="title-src">Import Bundle</wadl:doc>
                <wadl:request>
                    <wadl:param name="test" style="query" type="xsd:boolean" default="false">
                        <wadl:doc>If true the bundle import will be tested no changes will be made to the gateway</wadl:doc>
                    </wadl:param>
                    <wadl:param name="activate" style="query" type="xsd:boolean" default="true">
                        <wadl:doc>The bundle to import</wadl:doc>
                    </wadl:param>
                    <wadl:param name="versionComment" style="query" type="xsd:string">
                        <wadl:doc>False to not activate the updated services and policies.</wadl:doc>
                    </wadl:param>
                    <wadl:representation element="l7:Bundle" mediaType="application/xml">
                        <wadl:doc>The comment to set for updated/created services and policies</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>The mappings performed during the bundle import</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{resourceType}/{id}">
                <wadl:doc>This resource is used to export and import bundles for migration. See &lt;a href=&quot;migration.html&quot;&gt;migration.html&lt;/a&gt;
                    for
                    more documentation on migration and bundling.</wadl:doc>
                <wadl:doc title="title-src">Bundle</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the resource to bundle</wadl:doc>
                </wadl:param>
                <wadl:param name="resourceType" style="template" type="xsd:string">
                    <wadl:doc>Resource type. Either folder, service or policy</wadl:doc>
                    <wadl:option value="folder"/>
                    <wadl:option value="policy"/>
                    <wadl:option value="service"/>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the bundle for the given resource type. The resource type is either a policy, service, or folder</wadl:doc>
                    <wadl:doc title="title-src">Export Folder Service Or Policy Bundle</wadl:doc>
                    <wadl:doc title="title-javadoc">Folder, Service or Policy Export</wadl:doc>
                    <wadl:request>
                        <wadl:param name="defaultAction" style="query" type="xsd:string" default="NewOrExisting">
                            <wadl:doc>Default bundling action. By default this is NewOrExisting</wadl:doc>
                            <wadl:option value="NewOrExisting"/>
                            <wadl:option value="NewOrUpdate"/>
                        </wadl:param>
                        <wadl:param name="defaultMapBy" style="query" type="xsd:string" default="id">
                            <wadl:doc>Default map by action.</wadl:doc>
                            <wadl:option value="id"/>
                            <wadl:option value="name"/>
                            <wadl:option value="guid"/>
                        </wadl:param>
                        <wadl:param name="includeRequestFolder" style="query" type="xsd:boolean" default="false">
                            <wadl:doc>For a folder export, specifies whether to include the folder in the
                                bundle or just its contents.</wadl:doc>
                        </wadl:param>
                        <wadl:param name="exportGatewayRestManagementService" style="query" type="xsd:boolean" default="false">
                            <wadl:doc>If true the gateway management service will be exported too. False by
                                default.</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>The bundle for the resource</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/jdbcConnections">
            <wadl:doc>JDBC connections allow the Gateway to query external databases and then use the query results during policy
                consumption.</wadl:doc>
            <wadl:doc title="title-src">Jdbc Connection</wadl:doc>
            <wadl:doc title="title-javadoc">JDBC Connection</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new JDBC connection</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:JDBCConnection" mediaType="application/xml">
                        <wadl:doc>The JDBC connection to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created JDBC connection</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of JDBC connections. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/jdbcConnections?name=MyJDBCConnection&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns JDBC connection with name &quot;MyJDBCConnection&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="jdbcUrl" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>JDBC URL filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="driverClass" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Driver class name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="userName" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>User name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of JDBC connections. If the list is empty then no JDBC connections were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>JDBC connections allow the Gateway to query external databases and then use the query results during policy
                    consumption.</wadl:doc>
                <wadl:doc title="title-src">Jdbc Connection</wadl:doc>
                <wadl:doc title="title-javadoc">JDBC Connection</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the JDBC connection to return</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing JDBC connection. If a JDBC connection with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:JDBCConnection" mediaType="application/xml">
                            <wadl:doc>JDBC connection to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated JDBC connection.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing JDBC connection.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a JDBC connection with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The JDBC connection.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>JDBC connections allow the Gateway to query external databases and then use the query results during policy
                    consumption.</wadl:doc>
                <wadl:doc title="title-src">Jdbc Connection</wadl:doc>
                <wadl:doc title="title-javadoc">JDBC Connection</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example JDBC connection that can be used as a reference for what JDBC connection
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template JDBC connection.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/securityZones">
            <wadl:doc>Security zones are used to partition the Gateway into portions that can then be managed by other users. A security
                zone is a collection of related entities (for example: services, policies, folders, trusted certificates).</wadl:doc>
            <wadl:doc title="title-src">Security Zone</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new security zone</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:SecurityZone" mediaType="application/xml">
                        <wadl:doc>The security zone to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created security zone</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of security zones. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/securityZones?name=MySecurityZone&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns security zone with name &quot;MySecurityZone&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of security zones. If the list is empty then no security zones were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>Security zones are used to partition the Gateway into portions that can then be managed by other users. A security
                    zone is a collection of related entities (for example: services, policies, folders, trusted certificates).</wadl:doc>
                <wadl:doc title="title-src">Security Zone</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example security zone that can be used as a reference for what security zone
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template security zone</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>Security zones are used to partition the Gateway into portions that can then be managed by other users. A security
                    zone is a collection of related entities (for example: services, policies, folders, trusted certificates).</wadl:doc>
                <wadl:doc title="title-src">Security Zone</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the security zone to return</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing security zone.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing security zone. If an security zone with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:SecurityZone" mediaType="application/xml">
                            <wadl:doc>Security zone to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated security zone.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a security zone with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The security zone</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/revocationCheckingPolicies">
            <wadl:doc>A revocation checking policy defines the strategies used by the Gateway to determine whether a certificate has been
                revoked.</wadl:doc>
            <wadl:doc title="title-src">Revocation Checking Policy</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of revocation checking policies. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/revocationCheckingPolicies?name=MyRevocationCheckPolicy&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns revocation checking policy with name &quot;MyRevocationCheckPolicy&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of revocation checking policies. If the list is empty then no revocation checking policies were
                        found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new revocation checking policy</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:RevocationCheckingPolicy" mediaType="application/xml">
                        <wadl:doc>The revocation checking policy to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created revocation checking policy</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A revocation checking policy defines the strategies used by the Gateway to determine whether a certificate has been
                    revoked.</wadl:doc>
                <wadl:doc title="title-src">Revocation Checking Policy</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the revocation checking policy to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing revocation checking policy.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a revocation checking policy with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The revocation checking policy.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing revocation checking policy. If an revocation checking policy with the given ID
                        does not exist one will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:RevocationCheckingPolicy" mediaType="application/xml">
                            <wadl:doc>Revocation checking policy to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated revocation checking policy.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A revocation checking policy defines the strategies used by the Gateway to determine whether a certificate has been
                    revoked.</wadl:doc>
                <wadl:doc title="title-src">Revocation Checking Policy</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example revocation checking policy that can be used as a reference for what
                        revocation checking policy objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template revocation checking policy.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/groups">
            <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
            <wadl:doc title="title-src">Group</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of groups. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List Groups</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by.</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of groups. If the list is empty then no groups were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{groupID}">
                <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
                <wadl:doc title="title-src">Group</wadl:doc>
                <wadl:param name="groupID" style="template" type="xsd:string">
                    <wadl:doc>The ID of the group to return</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a group with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get Group</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The group.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A group represents a group identity in an identity provider. When no identity provider is specified in the url then
                    the internal identity provider is assumed. Groups can only be retrieved, they can not be created.</wadl:doc>
                <wadl:doc title="title-src">Group</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example group that can be used as a reference for what group objects should look
                        like.</wadl:doc>
                    <wadl:doc title="title-src">Group Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template group.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/assertionSecurityZones">
            <wadl:doc>Assertion Security Zones entities are used to apply security zones to assertions. By default, assertions do not have
                a security zone assigned to them.</wadl:doc>
            <wadl:doc title="title-src">Assertion Security Zone</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of assertion security zones. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/assertionSecurityZones?name=com.l7tech.external.assertions.jdbcquery.JdbcQueryAssertion&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns assertion security zone of the Jdbc Query Assertion. The name of the assertion security zone is the
                    fully qualified name of the assertion.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/assertionSecurityZones?securityZone.id=0e028eafc5c66c3af755a2e470734948&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns assertion security zones that have security zone ID &quot;0e028eafc5c66c3af755a2e470734948&quot;&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="name"/>
                        <wadl:option value="securityZone.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter. To list all assertions with no security zones applied use the
                            default ID: 0000000000000000ffffffffffffffff</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>List of assertion security zones. If the list is empty then no assertion security zones were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>Assertion Security Zones entities are used to apply security zones to assertions. By default, assertions do not have
                    a security zone assigned to them.</wadl:doc>
                <wadl:doc title="title-src">Assertion Security Zone</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example  assertion security zone that can be used as a reference for what
                        assertion security zone objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template assertion security zone.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{name}">
                <wadl:doc>Assertion Security Zones entities are used to apply security zones to assertions. By default, assertions do not have
                    a security zone assigned to them.</wadl:doc>
                <wadl:doc title="title-src">Assertion Security Zone</wadl:doc>
                <wadl:param name="name" style="template" type="xsd:string">
                    <wadl:doc>Fully qualified name of the assertion</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the assertion security zone for the assertion with the given fully qualified name.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>Assertion security zone for the assertion</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Updates an assertion security zone</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:AssertionSecurityZone" mediaType="application/xml">
                            <wadl:doc>Updated assertion security zone for an assertion</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly updated assertion security zone.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/folders">
            <wadl:doc>Folders are used to organize the policies, services, and aliases you have on the Gateway.</wadl:doc>
            <wadl:doc title="title-src">Folder</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of folders. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/folders?name=MyFolder&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns folder with name &quot;MyFolder&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="parentFolder.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="parentFolder.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>The parent folder filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of folders. If the list is empty then no folders were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new folder</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:Folder" mediaType="application/xml">
                        <wadl:doc>The folder to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created folder</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Folders are used to organize the policies, services, and aliases you have on the Gateway.</wadl:doc>
                <wadl:doc title="title-src">Folder</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The id of the folder to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a folder with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The folder.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing folder. If a folder with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:Folder" mediaType="application/xml">
                            <wadl:doc>Folder to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated folder.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing folder.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                    <wadl:request>
                        <wadl:param name="force" style="query" type="xsd:boolean" default="false">
                            <wadl:doc>If true, deletes folder and its contents</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/dependencies">
                <wadl:doc>This is a provider for dependencies. It finds the dependencies of entities that can have dependencies.</wadl:doc>
                <wadl:doc title="title-src">Dependency</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The id of the dependent entity</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the list of dependencies for this entity.</wadl:doc>
                    <wadl:doc title="title-src">Get Dependencies</wadl:doc>
                    <wadl:doc title="title-javadoc">Get Dependencies</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The list of dependencies.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Folders are used to organize the policies, services, and aliases you have on the Gateway.</wadl:doc>
                <wadl:doc title="title-src">Folder</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example folder that can be used as a reference for what folder objects should
                        look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template folder.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/roles">
            <wadl:doc>A role defines a set of permissions that a user or group is allowed to perform. A user must be assigned to at least
                one of these roles in order to connect to the Gateway and perform administrative tasks in the Policy Manager or
                through the API.</wadl:doc>
            <wadl:doc title="title-src">Role</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of roles. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/roles?name=MyRole&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns role with name &quot;MyRole&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="userCreated" style="query" type="xsd:boolean">
                        <wadl:doc>User created filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of roles. If the list is empty then no roles were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new role</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:Role" mediaType="application/xml">
                        <wadl:doc>The role to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created role</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>A role defines a set of permissions that a user or group is allowed to perform. A user must be assigned to at least
                    one of these roles in order to connect to the Gateway and perform administrative tasks in the Policy Manager or
                    through the API.</wadl:doc>
                <wadl:doc title="title-src">Role</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example role that can be used as a reference for what role objects should look
                        like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template role.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>A role defines a set of permissions that a user or group is allowed to perform. A user must be assigned to at least
                    one of these roles in order to connect to the Gateway and perform administrative tasks in the Policy Manager or
                    through the API.</wadl:doc>
                <wadl:doc title="title-src">Role</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the role to return</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing role.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing role. If a role with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:Role" mediaType="application/xml">
                            <wadl:doc>Role to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated role.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a role with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The role</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/assignments">
                <wadl:doc>The rbac role assignment resource</wadl:doc>
                <wadl:doc title="title-src">Role Assignments</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the role to change assignments for.</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Adds role assignments to the role.</wadl:doc>
                    <wadl:doc title="title-src">Add Assignment</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:AddAssignmentsContext" mediaType="application/xml">
                            <wadl:doc>The role assignments to add.</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Removes role assignments</wadl:doc>
                    <wadl:doc title="title-src">Delete Assignment</wadl:doc>
                    <wadl:request>
                        <wadl:param name="id" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>The assignments to remove</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                </wadl:method>
                <wadl:resource path="template/addassignments">
                    <wadl:doc>The rbac role assignment resource</wadl:doc>
                    <wadl:doc title="title-src">Role Assignments</wadl:doc>
                    <wadl:method name="GET">
                        <wadl:doc>Returns a template, which is an example add assignments context that can be used as a reference for what add
                            assignments context objects should look like.</wadl:doc>
                        <wadl:doc title="title-src">Add Assignments Context Template</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The template add assignments context.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/genericEntities">
            <wadl:doc>A generic entities is used by some modular assertions to represent any entity.</wadl:doc>
            <wadl:doc title="title-src">Generic Entity</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of generic entities. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/activeConnectors?name=MyGenericEntity&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns generic entity with name &quot;MyGenericEntity&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="entityClassName"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="entityClassName" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Entity class name filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of generic entities. If the list is empty then no entities were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new generic entity.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:GenericEntity" mediaType="application/xml">
                        <wadl:doc>The generic entity to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created generic entity</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A generic entities is used by some modular assertions to represent any entity.</wadl:doc>
                <wadl:doc title="title-src">Generic Entity</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the generic entity to retrieve</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing generic entity. If a generic entity with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:GenericEntity" mediaType="application/xml">
                            <wadl:doc>Generic entity to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated generic entity.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing generic entity.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Retrieves a generic entity given its ID</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The generic entity.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A generic entities is used by some modular assertions to represent any entity.</wadl:doc>
                <wadl:doc title="title-src">Generic Entity</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example generic entity that can be used as a reference for what generic entity
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template generic entity.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/policyAliases">
            <wadl:doc>A policy alias allows a policy to appear in more than one folder in the Services and Policies list. The policy alias
                is a linked copy of the original policy.</wadl:doc>
            <wadl:doc title="title-src">Policy Alias</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new policy alias</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:PolicyAlias" mediaType="application/xml">
                        <wadl:doc>The policy alias to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created policy alias</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of policy aliases. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/policyAliases?policy.id=26df9b0abc4dd6780fd9da5929cde13e&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns policy aliases for policy with ID &quot;26df9b0abc4dd6780fd9da5929cde13e&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="policy.id"/>
                        <wadl:option value="folder.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="policy.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Policy id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="folder.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Folder id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of policy aliases. If the list is empty then no policy aliases were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A policy alias allows a policy to appear in more than one folder in the Services and Policies list. The policy alias
                    is a linked copy of the original policy.</wadl:doc>
                <wadl:doc title="title-src">Policy Alias</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the policy alias to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing policy alias. If a policy alias with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update Or Create</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:PolicyAlias" mediaType="application/xml">
                            <wadl:doc>Policy alias to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated policy alias.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns a policy alias with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The policy alias.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing policy alias.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A policy alias allows a policy to appear in more than one folder in the Services and Policies list. The policy alias
                    is a linked copy of the original policy.</wadl:doc>
                <wadl:doc title="title-src">Policy Alias</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example policy alias that can be used as a reference for what policy alias
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template policy alias.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/interfaceTags">
            <wadl:doc>Interfaces are used to specify IP addresses that can be monitored by a listen port. Defining an interface gives you
                greater control over the IP addresses that will be monitored.</wadl:doc>
            <wadl:doc title="title-src">Interface Tag</wadl:doc>
            <wadl:method name="POST">
                <wadl:doc>Creates a new interface. In order to create a new interface tag you must have read and write access to cluster
                    properties.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:InterfaceTag" mediaType="application/xml">
                        <wadl:doc>The interface to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created interface</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:method name="GET">
                <wadl:doc>Returns a list of interface tags. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/interfaceTags?name=MyInterface&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns interface with name = &quot;MyInterface&quot;&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/interfaceTags?name=MyInterface&amp;name=MyInterfaceProd&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns interfaces with name either &quot;MyInterface&quot; or &quot;MyInterfaceProd&quot;&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter. This will return interfaces with the specified names.</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of interfaces. If the list is empty then no entities were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Interfaces are used to specify IP addresses that can be monitored by a listen port. Defining an interface gives you
                    greater control over the IP addresses that will be monitored.</wadl:doc>
                <wadl:doc title="title-src">Interface Tag</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the interface tag to update</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing interface tag.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Retrieves an interface tag given it's ID. In order to get an interface tag you must have read access to cluster
                        properties.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The interface tag.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Updates an existing interface tag. You cannot change the name of an interface, you can only update its address
                        patterns. In order to update an interface tag you must have read and write access to cluster properties.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:InterfaceTag" mediaType="application/xml">
                            <wadl:doc>The updated interface tag</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>a reference to the newly updated interface tag.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Interfaces are used to specify IP addresses that can be monitored by a listen port. Defining an interface gives you
                    greater control over the IP addresses that will be monitored.</wadl:doc>
                <wadl:doc title="title-src">Interface Tag</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example interface tag that can be used as a reference for what interface tag
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template interface tag.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/siteMinderConfigurations">
            <wadl:doc>A SiteMinder Configuration describes a connection to site minder.</wadl:doc>
            <wadl:doc title="title-src">Site Minder Configuration</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of SiteMinder configurations. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/siteMinderConfigurations?name=MySiteMinderConfiguration&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns SiteMinder configuration with name &quot;MySiteMinderConfiguration&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of SiteMinder configurations. If the list is empty then no SiteMinder configurations were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new SiteMinder configuration</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:SiteMinderConfiguration" mediaType="application/xml">
                        <wadl:doc>The SiteMinder configuration to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created SiteMinder configuration</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>A SiteMinder Configuration describes a connection to site minder.</wadl:doc>
                <wadl:doc title="title-src">Site Minder Configuration</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the SiteMinder configuration to delete.</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a SiteMinder configuration with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The SiteMinder configuration</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing SiteMinder configuration. If a SiteMinder configuration with the given ID does not
                        exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:SiteMinderConfiguration" mediaType="application/xml">
                            <wadl:doc>SiteMinder configuration to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated SiteMinder configuration.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing SiteMinder configuration.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>A SiteMinder Configuration describes a connection to site minder.</wadl:doc>
                <wadl:doc title="title-src">Site Minder Configuration</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example SiteMinder configuration that can be used as a reference for what
                        SiteMinder configuration objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template SiteMinder configuration.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/jmsDestinations">
            <wadl:doc>A JMS destination is used to configure a connection to a JMS service. This is used for both inbound and outbound
                configurations.</wadl:doc>
            <wadl:doc title="title-src">Jms Destination</wadl:doc>
            <wadl:doc title="title-javadoc">JMS Destination</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of JMS destinations. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/jmsDestinations?name=MyJMSDestination&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns JMS destination with name &quot;MyJMSDestination&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="inbound" style="query" type="xsd:boolean">
                        <wadl:doc>Inbound filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="template" style="query" type="xsd:boolean">
                        <wadl:doc>Template filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="destination" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Destination filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of JMS destinations. If the list is empty then no JMS destinations were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new JMS destination</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:JMSDestination" mediaType="application/xml">
                        <wadl:doc>The JMS destination to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created JMS destination</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>A JMS destination is used to configure a connection to a JMS service. This is used for both inbound and outbound
                    configurations.</wadl:doc>
                <wadl:doc title="title-src">Jms Destination</wadl:doc>
                <wadl:doc title="title-javadoc">JMS Destination</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example JMS destination that can be used as a reference for what JMS destination
                        objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template JMS destination.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>A JMS destination is used to configure a connection to a JMS service. This is used for both inbound and outbound
                    configurations.</wadl:doc>
                <wadl:doc title="title-src">Jms Destination</wadl:doc>
                <wadl:doc title="title-javadoc">JMS Destination</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the JMS destination to return</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing JMS destination.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing JMS destination. If an JMS destination with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:JMSDestination" mediaType="application/xml">
                            <wadl:doc>JMS destination to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated JMS destination.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns an JMS destination with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The JMS destination.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/policies">
            <wadl:doc>This resource is used to manage policies. These can be internal, global or other special purpose policies.</wadl:doc>
            <wadl:doc title="title-src">Policy</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of policies. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/policies?name=MyPolicy&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns policy with name &quot;MyPolicy&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                        <wadl:option value="parentFolder.id"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="guid" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Guid filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="type" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Type filter</wadl:doc>
                        <wadl:option value="Include"/>
                        <wadl:option value="Internal"/>
                        <wadl:option value="Global"/>
                    </wadl:param>
                    <wadl:param name="soap" style="query" type="xsd:boolean">
                        <wadl:doc>Soap filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="parentFolder.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Parent folder ID filter.</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of policies. If the list is empty then no policies were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new policy</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:param name="versionComment" style="query" type="xsd:string">
                        <wadl:doc>The comment to add to the policy version when creating the policy</wadl:doc>
                    </wadl:param>
                    <wadl:representation element="l7:Policy" mediaType="application/xml">
                        <wadl:doc>The policy to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created policy</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>This resource is used to manage policies. These can be internal, global or other special purpose policies.</wadl:doc>
                <wadl:doc title="title-src">Policy</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the policy to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns a policy with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The policy.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing policy.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing policy. If a policy with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update Or Create</wadl:doc>
                    <wadl:request>
                        <wadl:param name="active" style="query" type="xsd:boolean" default="true">
                            <wadl:doc>Should the policy be activated after the update.</wadl:doc>
                        </wadl:param>
                        <wadl:param name="versionComment" style="query" type="xsd:string">
                            <wadl:doc>The comment to add to the policy version when updating the policy</wadl:doc>
                        </wadl:param>
                        <wadl:representation element="l7:Policy" mediaType="application/xml">
                            <wadl:doc>Policy to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated policy.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/dependencies">
                <wadl:doc>This is a provider for dependencies. It finds the dependencies of entities that can have dependencies.</wadl:doc>
                <wadl:doc title="title-src">Dependency</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The id of the dependent entity</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>Returns the list of dependencies for this entity.</wadl:doc>
                    <wadl:doc title="title-src">Get Dependencies</wadl:doc>
                    <wadl:doc title="title-javadoc">Get Dependencies</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The list of dependencies.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>This resource is used to manage policies. These can be internal, global or other special purpose policies.</wadl:doc>
                <wadl:doc title="title-src">Policy</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example policy that can be used as a reference for what policy objects should
                        look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template policy.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}/versions">
                <wadl:doc>This resource handles policy version operations.</wadl:doc>
                <wadl:doc title="title-src">Policy Version</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The policy id</wadl:doc>
                </wadl:param>
                <wadl:method name="GET">
                    <wadl:doc>&lt;p&gt;Returns a list of policy versions. Can optionally sort the resulting list in ascending or
                        descending order. Other params given will be used as search values.&lt;/p&gt;
                        &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                    <wadl:doc title="title-src">List Versions</wadl:doc>
                    <wadl:request>
                        <wadl:param name="sort" style="query" type="xsd:string">
                            <wadl:doc>Key to sort the list by</wadl:doc>
                            <wadl:option value="id"/>
                            <wadl:option value="version"/>
                        </wadl:param>
                        <wadl:param name="order" style="query" type="xsd:string">
                            <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                                ascending if not specified</wadl:doc>
                            <wadl:option value="asc"/>
                            <wadl:option value="desc"/>
                        </wadl:param>
                        <wadl:param name="id" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Id filter</wadl:doc>
                        </wadl:param>
                        <wadl:param name="active" style="query" type="xsd:boolean">
                            <wadl:doc>Active filter</wadl:doc>
                        </wadl:param>
                        <wadl:param name="comment" style="query" type="xsd:string" repeating="true">
                            <wadl:doc>Comment filter</wadl:doc>
                        </wadl:param>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A list of policy versions. If the list is empty then no policy versions were found.</wadl:doc>
                        <wadl:representation element="l7:List" mediaType="application/xml"/>
                    </wadl:response>
                </wadl:method>
                <wadl:resource path="{versionNumber}/comment">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy version to set the comment on.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="PUT">
                        <wadl:doc>Sets the comment on a specific policy version.</wadl:doc>
                        <wadl:doc title="title-src">Set Version Comment</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="xsd:string" mediaType="application/xml">
                                <wadl:doc>Comment to set on the policy version. This will override any existing comment.</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>A reference to the updated policy version</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="active/comment">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:method name="PUT">
                        <wadl:doc>Sets a comment on the active policy version</wadl:doc>
                        <wadl:doc title="title-src">Set Active Version Comment</wadl:doc>
                        <wadl:request>
                            <wadl:representation element="xsd:string" mediaType="application/xml">
                                <wadl:doc>Comment to set on the active policy version</wadl:doc>
                            </wadl:representation>
                        </wadl:request>
                        <wadl:response status="200">
                            <wadl:doc>The updated active policy version</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{versionNumber}">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy to return.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="GET">
                        <wadl:doc>Retrieve a policy version by the version number</wadl:doc>
                        <wadl:doc title="title-src">Get Version</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The policy version.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="active">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:method name="GET">
                        <wadl:doc>Returns the active policy version.</wadl:doc>
                        <wadl:doc title="title-src">Get Active Version</wadl:doc>
                        <wadl:response status="200">
                            <wadl:doc>The active policy version.</wadl:doc>
                            <wadl:representation element="l7:Item"/>
                        </wadl:response>
                    </wadl:method>
                </wadl:resource>
                <wadl:resource path="{versionNumber}/activate">
                    <wadl:doc>This resource handles policy version operations.</wadl:doc>
                    <wadl:doc title="title-src">Policy Version</wadl:doc>
                    <wadl:param name="versionNumber" style="template" type="xsd:long">
                        <wadl:doc>Version of the policy version to set active.</wadl:doc>
                    </wadl:param>
                    <wadl:method name="POST">
                        <wadl:doc>Activates the specified policy version</wadl:doc>
                        <wadl:doc title="title-src">Activate Version</wadl:doc>
                    </wadl:method>
                </wadl:resource>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/activeConnectors">
            <wadl:doc>Active connectors are connectors that poll for messages. For example MQ Native Queues and SFTP Polling Listeners are
                examples of Active Connectors.</wadl:doc>
            <wadl:doc title="title-src">Active Connector</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of active connectors. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/activeConnectors?name=MySFTPPollingListener&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns active connector with name &quot;MySFTPPollingListener&quot;.&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/activeConnectors?type=SFTP&amp;name=MySFTPPollingListener&amp;name=MyOtherSFTPPollingListener&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns active connector of SFTP type with name either &quot;MySFTPPollingListener&quot; or
                    &quot;MyOtherSFTPPollingListener&quot;&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="name"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="name" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="enabled" style="query" type="xsd:boolean">
                        <wadl:doc>Enabled filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="type" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Type filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="hardwiredServiceId" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Service ID filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of active connectors. If the list is empty then no entities were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new active connector.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:ActiveConnector" mediaType="application/xml">
                        <wadl:doc>The active connector to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created active connector</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="{id}">
                <wadl:doc>Active connectors are connectors that poll for messages. For example MQ Native Queues and SFTP Polling Listeners are
                    examples of Active Connectors.</wadl:doc>
                <wadl:doc title="title-src">Active Connector</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>The ID of the active connector to return</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing active connector.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing active connector. If an active connector with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Create Or Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:ActiveConnector" mediaType="application/xml">
                            <wadl:doc>Active connector to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated active connector.</wadl:doc>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns an active connector with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The active connector.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="template">
                <wadl:doc>Active connectors are connectors that poll for messages. For example MQ Native Queues and SFTP Polling Listeners are
                    examples of Active Connectors.</wadl:doc>
                <wadl:doc title="title-src">Active Connector</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example active connector that can be used as a reference for what active
                        connector objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template active connector.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
        <wadl:resource path="1.0/httpConfigurations">
            <wadl:doc>HTTP Configuration are used to configure various options to be used by the Gateway for HTTP/HTTPS connections. For
                example, you can configure the login credentials for an HTTPS host, define a proxy for the host, or specify a
                private
                key to be used for authentication.</wadl:doc>
            <wadl:doc title="title-src">Http Configuration</wadl:doc>
            <wadl:method name="GET">
                <wadl:doc>&lt;p&gt;Returns a list of HTTP configurations. Can optionally sort the resulting list in ascending or
                    descending order. Other params given will be used as search values.&lt;/p&gt;
                    &lt;p class=&quot;italicize&quot;&gt;Examples:&lt;/p&gt;
                    &lt;div class=&quot;code indent&quot;&gt;&lt;pre&gt;/restman/1.0/httpConfigurations?name=MyHTTPConfiguration&lt;/pre&gt;&lt;/div&gt;
                    &lt;p&gt;Returns HTTP configuration with name &quot;MyHTTPConfiguration&quot;.&lt;/p&gt;
                    &lt;p&gt;If a parameter is not a valid search value a bad request error will be returned.&lt;/p&gt;</wadl:doc>
                <wadl:doc title="title-src">List</wadl:doc>
                <wadl:request>
                    <wadl:param name="sort" style="query" type="xsd:string">
                        <wadl:doc>Key to sort the list by</wadl:doc>
                        <wadl:option value="id"/>
                        <wadl:option value="host"/>
                    </wadl:param>
                    <wadl:param name="order" style="query" type="xsd:string">
                        <wadl:doc>Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to
                            ascending if not specified</wadl:doc>
                        <wadl:option value="asc"/>
                        <wadl:option value="desc"/>
                    </wadl:param>
                    <wadl:param name="host" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Name filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="protocol" style="query" type="xsd:string">
                        <wadl:doc>Protocol filter</wadl:doc>
                        <wadl:option value="HTTP"/>
                        <wadl:option value="HTTPS"/>
                    </wadl:param>
                    <wadl:param name="ntlmHost" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>NtlmHost filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="ntlmDomain" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>NtlmDomain id filter</wadl:doc>
                    </wadl:param>
                    <wadl:param name="securityZone.id" style="query" type="xsd:string" repeating="true">
                        <wadl:doc>Security zone ID filter</wadl:doc>
                    </wadl:param>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A list of HTTP configurations. If the list is empty then no HTTP configurations were found.</wadl:doc>
                    <wadl:representation element="l7:List"/>
                </wadl:response>
            </wadl:method>
            <wadl:method name="POST">
                <wadl:doc>Creates a new HTTP configuration.</wadl:doc>
                <wadl:doc title="title-src">Create</wadl:doc>
                <wadl:request>
                    <wadl:representation element="l7:HttpConfiguration" mediaType="application/xml">
                        <wadl:doc>The HTTP configuration to create</wadl:doc>
                    </wadl:representation>
                </wadl:request>
                <wadl:response status="200">
                    <wadl:doc>A reference to the newly created http configuration</wadl:doc>
                </wadl:response>
            </wadl:method>
            <wadl:resource path="template">
                <wadl:doc>HTTP Configuration are used to configure various options to be used by the Gateway for HTTP/HTTPS connections. For
                    example, you can configure the login credentials for an HTTPS host, define a proxy for the host, or specify a
                    private
                    key to be used for authentication.</wadl:doc>
                <wadl:doc title="title-src">Http Configuration</wadl:doc>
                <wadl:method name="GET">
                    <wadl:doc>Returns a template, which is an example HTTP configuration that can be used as a reference for what HTTP
                        configuration objects should look like.</wadl:doc>
                    <wadl:doc title="title-src">Template</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The template HTTP configuration.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="{id}">
                <wadl:doc>HTTP Configuration are used to configure various options to be used by the Gateway for HTTP/HTTPS connections. For
                    example, you can configure the login credentials for an HTTPS host, define a proxy for the host, or specify a
                    private
                    key to be used for authentication.</wadl:doc>
                <wadl:doc title="title-src">Http Configuration</wadl:doc>
                <wadl:param name="id" style="template" type="xsd:string">
                    <wadl:doc>ID of the HTTP configuration to create or update</wadl:doc>
                </wadl:param>
                <wadl:method name="DELETE">
                    <wadl:doc>Deletes an existing HTTP configuration.</wadl:doc>
                    <wadl:doc title="title-src">Delete</wadl:doc>
                </wadl:method>
                <wadl:method name="GET">
                    <wadl:doc>Returns an HTTP configuration with the given ID.</wadl:doc>
                    <wadl:doc title="title-src">Get</wadl:doc>
                    <wadl:response status="200">
                        <wadl:doc>The HTTP configuration.</wadl:doc>
                        <wadl:representation element="l7:Item"/>
                    </wadl:response>
                </wadl:method>
                <wadl:method name="PUT">
                    <wadl:doc>Creates or Updates an existing HTTP configuration. If an HTTP configuration with the given ID does not exist one
                        will be created, otherwise the existing one will be updated.</wadl:doc>
                    <wadl:doc title="title-src">Update</wadl:doc>
                    <wadl:request>
                        <wadl:representation element="l7:HttpConfiguration" mediaType="application/xml">
                            <wadl:doc>HTTP configuration to create or update</wadl:doc>
                        </wadl:representation>
                    </wadl:request>
                    <wadl:response status="200">
                        <wadl:doc>A reference to the newly created or updated HTTP configuration.</wadl:doc>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
        </wadl:resource>
    </wadl:resources>
    <wadl:doc title="api-documentation-url">-ssg-template-url-1.0/doc</wadl:doc>
</wadl:application>
