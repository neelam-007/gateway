# Assertion Mappings (alphabetically ordered)

AuditDetail:
  externalName: AuditDetail
  className: com.l7tech.policy.assertion.AuditDetailAssertion
  properties:
    Detail: Detail
    LoggingOnly: LoggingOnly
    Level: Level
  samplePayload: |
    {
      "AuditDetail": {
        "Detail": "A log message",
        "LoggingOnly": true,
        "Level" : "INFO"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "AuditDetail": {
          "type": "object",
          "properties": {
            "Detail": {
              "type" : "string"
            },
            "LoggingOnly": {
              "type": "boolean"
            },
            "Level": {
              "type": "string",
              "enum": [ "WARNING", "INFO", "FINE", "FINER", "FINEST" ]
            }
          },
          "required": [ "Detail" ]
        }
      },
      "required": [ "AuditDetail" ]
    }

Authentication:
  externalName: Authentication
  className: com.l7tech.policy.assertion.identity.AuthenticationAssertion
  properties:
    IdentityProviderOid: IdentityProviderOid
  samplePayload: |
    {
      "Authentication" : {
        "IdentityProviderOid" : "0000000000000000fffffffffffffffe"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "Authentication": {
          "type": "object",
          "properties": {
            "IdentityProviderOid": {
              "type" : "string"
            }
          },
          "required": [ "IdentityProviderOid" ]
        }
      },
      "required": [ "Authentication" ]
    }

CodeInjectionProtection:
  externalName: CodeInjectionProtection
  className: com.l7tech.policy.assertion.CodeInjectionProtectionAssertion
  properties:
    IncludeBody: IncludeBody
    IncludeUrlPath: IncludeUrlPath
    IncludeUrlQueryString: IncludeUrlQueryString
    Protections: Protections
  samplePayload: |
    {
      "CodeInjectionProtection": {
        "IncludeBody": true,
        "IncludeUrlPath": false,
        "IncludeUrlQueryString": false,
        "Protections": [ "htmlJavaScriptInjection", "shellInjection" ]
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "CodeInjectionProtection": {
          "type": "object",
          "properties": {
            "IncludeBody": {
              "type" : "boolean"
            },
            "IncludeUrlPath": {
              "type": "boolean"
            },
            "IncludeUrlQueryString": {
              "type": "boolean"
            },
            "Protections": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [ "htmlJavaScriptInjection", "phpEvalInjection", "shellInjection", "ldapDnInjection", "ldapSearchInjection", "xpathInjection"  ]
              }
            }
          }
        }
      },
      "required": [ "CodeInjectionProtection" ]
    }

CORS:
  externalName: CORS
  className: com.l7tech.external.assertions.cors.CORSAssertion
  samplePayload: |
    {
      "CORS": {
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "CORS": {
          "type": "object",
          "properties": {
          }
        }
      },
      "required": [ "CORS" ]
    }

HardcodedResponse:
  externalName: HardcodedResponse
  className: com.l7tech.policy.assertion.HardcodedResponseAssertion
  properties:
    ResponseStatus: ResponseStatus
    EarlyResponse: EarlyResponse
    ResponseContentType: ResponseContentType
    ResponseBody: Base64ResponseBody
  propertiesIsBase64Encoded:
    ResponseBody: true
  samplePayload: |
    {
      "HardcodedResponse": {
        "ResponseContentType": "Content-Type: text/html; charset=utf-8",
        "ResponseBody": "Hello!"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "HardcodedResponse": {
          "type": "object",
          "properties": {
            "ResponseStatus": {
              "type" : "string"
            },
            "EarlyResponse": {
              "type": "boolean"
            },
            "ResponseContentType": {
              "type": "string"
            },
            "ResponseBody": {
              "type": "string"
            }
          },
          "required": [ "ResponseBody" ]
        }
      },
      "required": [ "HardcodedResponse" ]
    }

HttpBasic:
  externalName: HttpBasic
  className: com.l7tech.policy.assertion.credential.http.HttpBasic
  samplePayload: |
    {
      "HttpBasic": {
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "HttpBasic": {
          "type": "object",
          "properties": {
          }
        }
      },
      "required": [ "HttpBasic" ]
    }

HttpRouting:
  externalName: HttpRouting
  className: com.l7tech.policy.assertion.HttpRoutingAssertion
  properties:
    ProtectedServiceUrl: ProtectedServiceUrl
    HttpMethod: HttpMethodAsString
  samplePayload: |
    {
      "HttpRouting": {
        "ProtectedServiceUrl": "http://myservice.com",
        "HttpMethod": "DELETE"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "HttpRouting": {
          "type": "object",
          "properties": {
            "ProtectedServiceUrl": {
              "type": "string"
            },
            "HttpMethod": {
              "type": "string",
              "enum": [ "GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS", "OTHER" ]
            }
          },
          "required": [ "ProtectedServiceUrl", "HttpMethod" ]
        }
      },
      "required": [ "HttpRouting" ]
    }

RateLimit:
  externalName: RateLimit
  className: com.l7tech.external.assertions.ratelimit.RateLimitAssertion
  properties:
    MaxRequestsPerSecond: MaxRequestsPerSecond
    HardLimit: HardLimit
    CounterName: CounterName
  samplePayload: |
    {
      "RateLimit": {
        "MaxRequestsPerSecond": 25,
        "HardLimit": true,
        "CounterName": "RateLimit-${request.clientId}-b0938b7ad6ff"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "RateLimit": {
          "type": "object",
          "properties": {
            "MaxRequestsPerSecond": {
              "type": "integer"
            },
            "HardLimit": {
              "type": "boolean"
            },
            "CounterName": {
              "type": "string"
            }
          }
        }
      },
      "required": [ "RateLimit" ]
    }

SetVariable:
  externalName: SetVariable
  className: com.l7tech.policy.assertion.SetVariableAssertion
  properties:
    VariableToSet: VariableToSet
    Expression: Base64Expression
  propertiesIsBase64Encoded:
    Expression: true
  samplePayload: |
    {
      "SetVariable": {
        "VariableToSet": "myVariable",
        "Expression": "myValue"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "SetVariable": {
          "type": "object",
          "properties": {
            "VariableToSet": {
              "type": "string"
            },
            "Expression": {
              "type": "string"
            }
          },
          "required": [ "VariableToSet", "Expression" ]
        }
      },
      "required": [ "SetVariable" ]
    }

Ssl:
  externalName: Ssl
  className: com.l7tech.policy.assertion.SslAssertion
  properties:
    Option: Option
    RequireClientAuthentication: RequireClientAuthentication
  samplePayload: |
    {
      "Ssl": {
        "Option": "Optional"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "Ssl": {
          "type": "object",
          "properties": {
            "Option": {
              "type": "string",
              "enum": [ "Required", "Optional", "Forbidden" ]
            },
            "RequireClientAuthentication": {
              "type": "boolean"
            }
          },
          "required": [ "Option" ]
        }
      },
      "required": [ "Ssl" ]
    }

ThroughputQuota:
  externalName: ThroughputQuota
  className: com.l7tech.policy.assertion.sla.ThroughputQuota
  properties:
    CounterName: CounterName
  samplePayload: |
    {
      "ThroughputQuota": {
        "CounterName": "ThroughputQuota-${request.clientId}-b0938b7ad6fe"
      }
    }
  jsonSchema: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "ThroughputQuota": {
          "type": "object",
          "properties": {
            "CounterName": {
              "type": "string"
            }
          },
          "required": [ "CounterName" ]
        }
      },
      "required": [ "ThroughputQuota" ]
    }
