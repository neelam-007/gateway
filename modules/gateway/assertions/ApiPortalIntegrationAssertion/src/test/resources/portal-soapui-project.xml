<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="portal" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Portal" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:endpoint>${#Project#secondaryGatewayUrl}</con:endpoint></con:endpoints><con:resource name="Generate" path="${#Project#path}/generate"><con:settings/><con:parameters><con:parameter><con:name>debug</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>format</con:name><con:value>xml</con:value><con:style>QUERY</con:style><con:default>xml</con:default></con:parameter></con:parameters><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:credentials><con:username/><con:password/></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="262144" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Register" path="${#Project#path}/register"><con:settings/><con:parameters><con:parameter><con:name>apikey</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>apikeySecret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debug</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>assignApis</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>callbackUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>label</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters><con:parameter><con:name>apikey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>apikeySecret</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>assignApis</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>debug</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>callbackUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>label</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Delete" path="${#Project#path}/delete"><con:settings/><con:parameters><con:parameter><con:name>apikey</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Update" path="${#Project#path}/update"><con:settings/><con:parameters><con:parameter><con:name>apikey</con:name><con:style>QUERY</con:style></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>apikeyStatus</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>debug</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>true</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>apikeySecret</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>assignApis</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>callbackUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>label</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters><con:parameter><con:name>apikey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>apikeySecret</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>assignApis</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>debug</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>callbackUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>label</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:por="http://ns.l7tech.com/2011/08/portal-api-keys">por:ApiKeyResponse</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="apikey" value="tk1"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite name="Portal Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate" searchProperties="true" id="ff32dc5d-0745-4d45-85fa-f6e803b540fc"><con:settings/><con:testStep type="restrequest" name="Generate Key"><con:settings/><con:config service="Portal" resourcePath="/${#Project#path}/generate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Generate Key" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="${#Project#service}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Key to File"><con:settings/><con:config><script>def key = context.expand('${Generate Key#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Generate Key Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>1</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>// Wait for any dangling threads to finish processing
def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// Ensure all generated keys are unique then delete the temp file
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	def keys = new HashSet();
	if(line != null){
		while(line != null){
			if(line.isEmpty()){
				throw new RuntimeException("Found empty key in file.");
			}
			if(!keys.contains(line)){
				keys.add(line);
			}else{
				throw new RuntimeException("Found duplicate key: " + line);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were generated.");
	}
}finally{
	reader.close();
	file.delete();
}</con:tearDownScript><con:updateStatisticsPerTestStep>true</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register" searchProperties="true" id="4986d321-8d90-4a56-a8a0-7053079f5d25"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Key To File"><con:settings/><con:config><script>def key = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Register Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

// ensure each key registered by load test exists on the gateway with correct plan, secret, and service
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#secret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
				final String expectedService = context.expand('${#Project#service}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@id",expectedService);
				final String expectedPlan = context.expand('${#Project#plan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
				final String expectedCallbackUrl = context.expand('${#Project#callbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
				final String expectedLabel = context.expand('${#Project#label}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@label",expectedLabel);
			}else if(status == 404){
				throw new RuntimeException("Registered key not found: " + line);
			}else{
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were generated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}
</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete" searchProperties="true" id="7933db80-aa3e-436d-b744-b282799fcabe"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Delete Key"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete Key" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>admin</con:username><con:password>password</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="apikey" value="cb3043a6-d05d-4923-b968-950de1538805" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Delete Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;

// ensure each key registered and deleted by load test does not exist on the gateway
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				throw new RuntimeException("Key was not deleted: " + line);
			}else if(status != 404){
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were deleted.");
	}
}finally{
	reader.close();
	file.delete();
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Status" searchProperties="true" id="fc982182-d8d0-47ca-b761-cd11c04ca5ee"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Status Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Plan" searchProperties="true" id="b926f859-2fb2-4428-80b5-9bd099ee915d"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Plan"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Plan"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Plan" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Plan Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedPlan = context.expand('${#Project#newPlan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Secret" searchProperties="true" id="424102cf-3989-4f6f-a0d2-ea695dca5ea3"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="2066080b-b70a-4c87-add4-629f2285342e"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Secret Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Services" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Services"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Services"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Services" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}++${#Project#newService};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Services Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String service1 = context.expand('${#Project#service}');
				final String service2 = context.expand('${#Project#newService}');
				final String plan1 = context.expand('${#Project#plan}');
				final String plan2 = context.expand('${#Project#newPlan}');
				assertNumberOfNodes(doc,"ApiKey/Services/S",2);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@id",service1);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@plan",plan1);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@id",service2);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@plan",plan2);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}

protected void assertNumberOfNodes(final Document document, final String nodePath, final int numExpected) throws Exception {
	XPath xpath = XPathFactory.newInstance().newXPath();
	final XPathExpression expression = xpath.compile(nodePath);
	final NodeList nodes = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
	if(numExpected != nodes.getLength()){
		throw new RuntimeException("Expected " + numExpected + " nodes but found " + nodes.getLength());
	}
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Status then Secret" searchProperties="true" id="4327feb5-77c5-4d04-b4c1-0e5abffd000f"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Properties and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", registeredKey);
testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="df584006-8a65-49f0-b26d-08bead24e6ae"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" resourcePath="/${#Project#path}/update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="apikey" value="df584006-8a65-49f0-b26d-08bead24e6ae"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Status then Secret Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Callback" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Callback"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#newCallbackUrl}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Callback Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedCallbackUrl = context.expand('${#Project#newCallbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Label" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Label"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Label"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Label" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="label" value="${#Project#newLabel}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Label Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedLabel = context.expand('${#Project#newLabel}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@label",expectedLabel);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Callback" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Remove Callback"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Remove Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Remove Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Remove Callback Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl","");
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Portal Batch Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register and Write Key to File" searchProperties="true" id="eee27f62-c52d-45f0-9fa5-da3f7e6d7502"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Key To File"><con:settings/><con:config><script>def key = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Register and Write Key to File Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete Keys From File" searchProperties="true" id="2a0cfd94-492f-420c-ac6c-d8655c5e87bc"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Delete Key"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to delete.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete Key" mediaType="application/xml"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="apikey" value="9b48c163-a14b-4844-b174-92b3dff90b51" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;

// ensure each key registered and deleted by load test does not exist on the gateway
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				throw new RuntimeException("Key was not deleted: " + line);
			}else if(status != 404){
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were deleted.");
	}
}finally{
	reader.close();
	file.delete();
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Statuses from File" searchProperties="true" id="2da953a1-89d6-440a-ab7d-f1236b0f6d56"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="1a285492-a0a0-4b4b-9ee4-f44a0790a9f5"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Plans from File" searchProperties="true" id="f781ea0e-f35e-42c0-93de-7729c7f98089"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Plan"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Plan"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Plan" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="4d488e5f-658d-43bd-916a-e8d4816e597a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedPlan = context.expand('${#Project#newPlan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + response);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Secrets from File" searchProperties="true" id="326b176f-285c-41ff-b667-968b5a11ccd0"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9066d58f-d806-4e81-bcd1-68262d18cc43"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Services from File" searchProperties="true" id="569b0cfa-95d0-4a49-9222-9710b5d861b6"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Services"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Services"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Services" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}++${#Project#newService};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="ca6637a8-3844-4961-b3da-07d04a20878a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String service1 = context.expand('${#Project#service}');
				final String service2 = context.expand('${#Project#newService}');
				final String plan1 = context.expand('${#Project#plan}');
				final String plan2 = context.expand('${#Project#newPlan}');
				assertNumberOfNodes(doc,"ApiKey/Services/S",2);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@id",service1);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@plan",plan1);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@id",service2);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@plan",plan2);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}

protected void assertNumberOfNodes(final Document document, final String nodePath, final int numExpected) throws Exception {
	XPath xpath = XPathFactory.newInstance().newXPath();
	final XPathExpression expression = xpath.compile(nodePath);
	final NodeList nodes = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
	if(numExpected != nodes.getLength()){
		throw new RuntimeException("Expected " + numExpected + " nodes but found " + nodes.getLength());
	}
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Statuses then Secrets from File" searchProperties="true" id="0c52d4da-7d71-4a32-a958-be99929a1935"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", line);
				testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="19fae1ce-1a97-4673-bea5-760d0ee08a16"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="19fae1ce-1a97-4673-bea5-760d0ee08a16"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Callbacks from File" searchProperties="true" id="f9f037d5-c32f-4fc1-bbc5-472d40be06fc"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Callback"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#newCallbackUrl}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="4ba296e7-358d-4b06-9ffd-98aa54f7d880"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedCallbackUrl = context.expand('${#Project#newCallbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + response);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Labels from File" searchProperties="true" id="f5225a7c-4627-40d2-b091-c9b4d248de74"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Label"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Label"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Label" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="label" value="${#Project#newLabel}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="0bab5f2f-e6be-4eee-ad54-60ff50218836"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedLabel = context.expand('${#Project#newLabel}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@label",expectedLabel);
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + response);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Callbacks from File" searchProperties="true" id="ae84b610-384c-4d32-a301-213f906de50e"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Remove Key Callback"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Remove Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Remove Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="a46ccd10-5801-4a3a-91b8-8c20a8e14db3"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

// ensure each key exists on the gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#gatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl","");
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + response);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite name="Cluster Portal Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Generate Key On Primary"><con:settings/><con:config service="Portal" resourcePath="/${#Project#path}/generate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Generate Key On Primary" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="${#Project#service}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Primary Key to File"><con:settings/><con:config><script>def key = context.expand('${Generate Key On Primary#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Generate Key On Secondary"><con:settings/><con:config service="Portal" resourcePath="/${#Project#path}/generate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Generate Key On Secondary" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#secondaryGatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="${#Project#service}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Secondary Key to File"><con:settings/><con:config><script>def key = context.expand('${Generate Key On Secondary#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Generate Key Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>1</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>// Wait for any dangling threads to finish processing
def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// Ensure all generated keys are unique then delete the temp file
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	def keys = new HashSet();
	if(line != null){
		while(line != null){
			if(line.isEmpty()){
				throw new RuntimeException("Found empty key in file.");
			}
			if(!keys.contains(line)){
				keys.add(line);
			}else{
				throw new RuntimeException("Found duplicate key: " + line);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were generated.");
	}
}finally{
	reader.close();
	file.delete();
}</con:tearDownScript><con:updateStatisticsPerTestStep>true</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Key To File"><con:settings/><con:config><script>def key = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Register Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key registered on primary gateway exists on the secondary gateway with correct plan, secret, and service
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#secret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
				final String expectedService = context.expand('${#Project#service}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@id",expectedService);
				final String expectedPlan = context.expand('${#Project#plan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
			}else if(status == 404){
				throw new RuntimeException("Registered key not found: " + line);
			}else{
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were generated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Delete Key"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete Key" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="apikey" value="cb3043a6-d05d-4923-b968-950de1538805" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Delete Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key registered and deleted on primary gateway does not exist on the secondary gateway
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				throw new RuntimeException("Key was not deleted: " + line);
			}else if(status != 404){
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were deleted.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Status" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Status Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Plan" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Plan"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Plan"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Plan" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Plan Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedPlan = context.expand('${#Project#newPlan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Secret" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="781b9096-2b22-4417-941b-f58ec784641b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Secret Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Services" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Services"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Services"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Services" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}++${#Project#newService};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Services Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String service1 = context.expand('${#Project#service}');
				final String service2 = context.expand('${#Project#newService}');
				final String plan1 = context.expand('${#Project#plan}');
				final String plan2 = context.expand('${#Project#newPlan}');
				assertNumberOfNodes(doc,"ApiKey/Services/S",2);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@id",service1);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@plan",plan1);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@id",service2);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@plan",plan2);
			}else if (response == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}

protected void assertNumberOfNodes(final Document document, final String nodePath, final int numExpected) throws Exception {
	XPath xpath = XPathFactory.newInstance().newXPath();
	final XPathExpression expression = xpath.compile(nodePath);
	final NodeList nodes = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
	if(numExpected != nodes.getLength()){
		throw new RuntimeException("Expected " + numExpected + " nodes but found " + nodes.getLength());
	}
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Callback" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Callback"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#newCallbackUrl}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Callback Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedCallbackUrl = context.expand('${#Project#newCallbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Label" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Update Key Label"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Label"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Label" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#newPlan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="label" value="${#Project#newLabel}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Update Label Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedLabel = context.expand('${#Project#newLabel}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@label",expectedLabel);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Callback" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Property and Write Key to File"><con:settings/><con:config><script>def registeredKey = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
testRunner.testCase.testSteps["Remove Key Callback"].setPropertyValue("apikey", registeredKey);
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(registeredKey);
writer.flush();
writer.close();</script></con:config></con:testStep><con:testStep type="restrequest" name="Remove Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Remove Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="9b909c69-223c-43f1-b86b-3cb7e1558c80"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="Remove Callback Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
file.delete();</con:setupScript><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl","");
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Cluster Portal Batch Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register and Write Key to File" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Register Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register Key" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}"/>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="apikeySecret" value="${#Project#secret}"/>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="${=java.util.UUID.randomUUID()}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Write Key To File"><con:settings/><con:config><script>def key = context.expand('${Register Key#Response#//l7:ApiKey/text()}');
def tempFileName = context.expand('${#Project#tempFileName}');
def writer = new PrintWriter(new FileWriter(new File("../logs/" + tempFileName), true));
writer.println(key);
writer.flush();
writer.close();</script></con:config></con:testStep><con:loadTest name="Register and Write Key to File Load Test"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete Keys From File" searchProperties="true" id="bb1f4572-689e-4845-b2ec-b9175894a2dc"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Delete Key"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to delete.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete Key"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete Key" mediaType="application/xml"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="apikey" value="b057de0a-4bdc-4f6d-9981-b179500bb26c" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key registered and deleted on primary gateway does not exist on the secondary gateway
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int status = client.executeMethod(method);
			if(status == 200){
				throw new RuntimeException("Key was not deleted: " + line);
			}else if(status != 404){
				throw new RuntimeException("Unexpected status: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were deleted.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Statuses from File" searchProperties="true" id="3d613ff9-1c99-44ee-9725-e8bfaa37409b"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Status"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Status"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Status" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeyStatus" value="inactive"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="c34e0d82-a78b-47eb-b48d-79ee8da8462a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedStatus = "inactive";
				assertXPathTextContent(doc,"ApiKey/@status",expectedStatus);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Plans from File" searchProperties="true" id="bd315860-e4a4-4143-9448-bcd47c0c719d"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Plan"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Plan"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Plan" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="b230b8cc-3324-43b2-8896-1d89a6708eff"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedPlan = context.expand('${#Project#newPlan}');
				assertXPathTextContent(doc,"ApiKey/Services/S/@plan",expectedPlan);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Secrets from File" searchProperties="true" id="f55eee8d-5825-4a3b-b2d5-130d3074f151"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Secret"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Secret"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Secret" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="apikeySecret" value="${#Project#newSecret}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="7cc2c430-b23a-4655-80c3-c73974c787bf"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedSecret = context.expand('${#Project#newSecret}');
				assertXPathTextContent(doc,"ApiKey/Secret",expectedSecret);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Services from File" searchProperties="true" id="9671ba0a-8005-4d6b-8d4b-5cb95e803700"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Services"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Services"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Services" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="assignApis" value="${#Project#service};${#Project#plan}++${#Project#newService};${#Project#newPlan}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="6b98b5aa-98d4-44fe-a858-6c66fa4e7d12"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated plan
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String service1 = context.expand('${#Project#service}');
				final String service2 = context.expand('${#Project#newService}');
				final String plan1 = context.expand('${#Project#plan}');
				final String plan2 = context.expand('${#Project#newPlan}');
				assertNumberOfNodes(doc,"ApiKey/Services/S",2);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@id",service1);
				assertXPathTextContent(doc,"ApiKey/Services/S[1]/@plan",plan1);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@id",service2);
				assertXPathTextContent(doc,"ApiKey/Services/S[2]/@plan",plan2);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}

protected void assertNumberOfNodes(final Document document, final String nodePath, final int numExpected) throws Exception {
	XPath xpath = XPathFactory.newInstance().newXPath();
	final XPathExpression expression = xpath.compile(nodePath);
	final NodeList nodes = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
	if(numExpected != nodes.getLength()){
		throw new RuntimeException("Expected " + numExpected + " nodes but found " + nodes.getLength());
	}
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Callbacks from File" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Callback"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#newCallbackUrl}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="c34e0d82-a78b-47eb-b48d-79ee8da8462a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedCallbackUrl = context.expand('${#Project#newCallbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Key Labels from File" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Update Key Label"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Key Label"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Key Label" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="callbackUrl" value="${#Project#callbackUrl}"/>
  <con:entry key="label" value="${#Project#newLabel}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="c34e0d82-a78b-47eb-b48d-79ee8da8462a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedLabel = context.expand('${#Project#newLabel}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@label",expectedLabel);
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Key Callbacks from File" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Initialize Counter"><con:settings/><con:config><script>testRunner.testCase.setPropertyValue("counter", "1");</script></con:config></con:testStep><con:testStep type="groovy" name="Get Key From File"><con:settings/><con:config><script>int keyNumber = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
int lineNumber = 0;
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		while(line != null){
			lineNumber++;
			if (keyNumber == lineNumber){
				log.info("key number " + keyNumber + " processed");
				testRunner.testCase.testSteps["Remove Key Callback"].setPropertyValue("apikey", line);	
				break;
			}
			line = reader.readLine();
		}
		if(line == null){
			testRunner.gotoStepByName("Stop");
		}	
	}else{
		throw new RuntimeException("No keys to update.");
	}
}finally{
	reader.close();
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Remove Key Callback"><con:settings/><con:config service="Portal" methodName="Method 1" resourcePath="/${#Project#path}/update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Remove Key Callback" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#gatewayUrl}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#username}</con:username><con:password>${#Project#password}</con:password></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="label" value="${#Project#label}"/>
  <con:entry key="debug" value="true"/>
  <con:entry key="apikey" value="c34e0d82-a78b-47eb-b48d-79ee8da8462a"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter"><con:settings/><con:config><script>int counter = Integer.valueOf(testRunner.testCase.getPropertyValue("counter"));
counter = counter + 1;
testRunner.testCase.setPropertyValue("counter", String.valueOf(counter));
testRunner.gotoStepByName("Get Key From File");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop"><con:settings/><con:config><script>log.info("Stop");</script></con:config></con:testStep><con:tearDownScript>import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URLEncoder;

def sleep = context.expand('${#Project#sleep}');
Thread.sleep(new Long(sleep));

// ensure each key exists on the secondary gateway with correct updated status
def tempFileName = context.expand('${#Project#tempFileName}');
def file = new File("../logs/" + tempFileName);
def reader = new BufferedReader(new FileReader(file));
try{
	def line = reader.readLine();
	if(line != null){
		HttpClient client = new HttpClient();
		while(line != null){
			String gatewayUrl = context.expand('${#Project#secondaryGatewayUrl}');
			GetMethod method = new GetMethod(gatewayUrl + "/key?apikey=" + line);
			int response = client.executeMethod(method);
			if(response == 200){
				String xml = new String(method.getResponseBody());
				Document doc = buildDocumentFromXml(xml);
				assertXPathTextContent(doc,"ApiKey/Value",line);
				final String expectedCallbackUrl = context.expand('${#Project#newCallbackUrl}');
				assertXPathTextContent(doc,"ApiKey/OAuth/@callbackUrl",URLEncoder.encode(expectedCallbackUrl, "UTF-8"));
			}else if (status == 404){
				throw new RuntimeException("Registered key not found: " + line);	
			}else{
				throw new RuntimeException("Unexpected response: " + status);
			}
			line = reader.readLine();
		}	
	}else{
		throw new RuntimeException("No keys were updated.");
	}
}finally{
	reader.close();
	file.delete();
}

protected Document buildDocumentFromXml(final String xml) throws Exception {
   final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
   final ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
   return builder.parse(is);
}

protected void assertXPathTextContent(final Document document, final String xpathExpression, final String expectedTextContent) throws Exception {
   XPath xpath = XPathFactory.newInstance().newXPath();
   final XPathExpression expression = xpath.compile(xpathExpression);
   final Node result = (Node) expression.evaluate(document, XPathConstants.NODE);
   if(!expectedTextContent.equals(result.getTextContent())){
       throw new RuntimeException("Expected " + expectedTextContent + " but found " + result.getTextContent());
   }
}</con:tearDownScript><con:properties><con:property><con:name>doDelete</con:name><con:value>false</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>gatewayUrl</con:name><con:value>https://localhost:8443</con:value></con:property><con:property><con:name>service</con:name><con:value>11111</con:value></con:property><con:property><con:name>plan</con:name><con:value>planA</con:value></con:property><con:property><con:name>secret</con:name><con:value>shhhh</con:value></con:property><con:property><con:name>newService</con:name><con:value>22222</con:value></con:property><con:property><con:name>newPlan</con:name><con:value>planB</con:value></con:property><con:property><con:name>newSecret</con:name><con:value>mylittlepony</con:value></con:property><con:property><con:name>callbackUrl</con:name><con:value>http://localhost:8080/callback</con:value></con:property><con:property><con:name>newCallbackUrl</con:name><con:value>http://localhost:8080/callback2</con:value></con:property><con:property><con:name>label</con:name><con:value>labelA</con:value></con:property><con:property><con:name>newLabel</con:name><con:value>labelB</con:value></con:property><con:property><con:name>tempFileName</con:name><con:value>temp.txt</con:value></con:property><con:property><con:name>secondaryGatewayUrl</con:name><con:value>https://aleessg615slave.l7tech.com:8443</con:value></con:property><con:property><con:name>username</con:name><con:value>soapui</con:value></con:property><con:property><con:name>password</con:name><con:value>7layer</con:value></con:property><con:property><con:name>path</con:name><con:value>api/keys</con:value></con:property><con:property><con:name>sleep</con:name><con:value>0</con:value></con:property></con:properties><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>
