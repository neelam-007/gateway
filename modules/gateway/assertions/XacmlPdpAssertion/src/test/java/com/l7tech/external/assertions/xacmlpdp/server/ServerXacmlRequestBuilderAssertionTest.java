/**
 * Copyright (C) 2008, Layer 7 Technologies Inc.
 * User: darmstrong
 * Date: Jun 15, 2009
 * Time: 12:24:09 PM
 */
package com.l7tech.external.assertions.xacmlpdp.server;

import com.l7tech.server.message.PolicyEnforcementContext;
import com.l7tech.server.ApplicationContexts;
import com.l7tech.message.Message;
import com.l7tech.message.HttpServletRequestKnob;
import com.l7tech.message.HttpServletResponseKnob;
import com.l7tech.common.io.XmlUtil;
import com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion;
import com.l7tech.policy.assertion.AssertionStatus;
import org.xml.sax.SAXException;
import org.springframework.mock.web.MockServletContext;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.junit.Test;
import org.junit.Assert;
import org.w3c.dom.Document;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

public class ServerXacmlRequestBuilderAssertionTest {

    /**
     * Tests support for context variables of type Message as the content of an AttributeValue
     * @throws Exception
     */
    @Test
    public void testAttributeValueContentOfTypeMessage() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);

        String contextVariable = "SINGLE_VALUE";
        context.setVariable(contextVariable, m);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+contextVariable+"}");
        attribute.setValues(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeValue[]{attributeValue}));

        subject.setAttributes(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeTreeNodeTag[]{attribute}));
        assertion.setSubjects(Arrays.asList(new XacmlRequestBuilderAssertion.Subject[]{subject}));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", singleValuedMessageTypeAttributeValue,
                fixLines(createdXml).trim());
    }

    /**
     * AttributeValue can be used to generate <AttributeValue> elements dynamically, if any of it's values
     * contain multi valued context variables.
     * If the content of AttributeValue is a multi valued context varaible, and one of it's values is a Message,
     * we will insert the xml fragment fromthe message as a direct child of <AttribtueValue>. This functionality
     * is not available from the UI currently but it is supported as we support placing a single context variable of
     * type Message into content, so for consistency, this is also supported in the multi valued context variable
     * scenario. This tests confirms it works
     * @throws Exception
     */
    @Test
    public void testAttributeValueContentIsMultiValuedOfDifferentTypes() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);
        Object [] contextVars = new Object[]{"one", m, "three"};

        String multiContextVariable = "MULTI_VALUE";
        context.setVariable(multiContextVariable, contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);
        
        attributeValue.setContent("${"+multiContextVariable+"}");
        attribute.setValues(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeValue[]{attributeValue}));

        subject.setAttributes(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeTreeNodeTag[]{attribute}));
        assertion.setSubjects(Arrays.asList(new XacmlRequestBuilderAssertion.Subject[]{subject}));
        
        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", multiValuedAttributeValueDynamicRequest,
                fixLines(createdXml).trim());
    }

    /**
     * Tests the dynamic behaviour of AttributeValue. This is specifically checking that only 3 elements
     * are created, as 3 is the size of the smallest multi valued context variable used
     * @throws Exception
     */
    @Test
    public void testDynamicAttributeValueBehaviour() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);
        Object [] contentVars = new Object[]{"one", m, "three"};

        String multiContextVariable = "MULTI_VALUE";
        context.setVariable(multiContextVariable, contentVars);

        Object[] attributeKeyVar = new Object[]{"id1", "id2", "id3", "id4"};
        context.setVariable("IDS", attributeKeyVar);

        Object[] attributeValueVar = new Object[]{"val1", "val2", "val3", "val4", "val5"};
        context.setVariable("VALUES", attributeValueVar);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+multiContextVariable+"}");
        Map<String, String> attributeMap = new HashMap<String, String>();
        attributeMap.put("${IDS}", "${VALUES}");
        attributeValue.setAttributes(attributeMap);
        
        attribute.setValues(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeValue[]{attributeValue}));

        subject.setAttributes(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeTreeNodeTag[]{attribute}));
        assertion.setSubjects(Arrays.asList(new XacmlRequestBuilderAssertion.Subject[]{subject}));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedAttributeValues,
                fixLines(createdXml).trim());
    }


    /**
     * Test that ResourceContent's content can accept context variables of type Message.
     * @throws Exception
     */
    @Test
    public void testResourceWithMessage() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);

        String contextVariable = "SINGLE_VALUE";
        context.setVariable(contextVariable, m);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+contextVariable+"}");
        attribute.setValues(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeValue[]{attributeValue}));

        subject.setAttributes(Arrays.asList(new XacmlRequestBuilderAssertion.AttributeTreeNodeTag[]{attribute}));
        assertion.setSubjects(Arrays.asList(new XacmlRequestBuilderAssertion.Subject[]{subject}));

        XacmlRequestBuilderAssertion.Resource resource = new XacmlRequestBuilderAssertion.Resource();
        XacmlRequestBuilderAssertion.ResourceContent resourceContent =
                new XacmlRequestBuilderAssertion.ResourceContent();

        xml = "<resourcexml>content of resource content</resourcexml>";
        doc = XmlUtil.parse(xml);
        m = new Message(doc);
        context.setVariable("RC_CONTENT", m);
        resourceContent.setContent("${RC_CONTENT}");
        Map<String, String> rcAttributeMap = new HashMap<String, String>();
        rcAttributeMap.put("name1", "value1");
        resourceContent.setAttributes(rcAttributeMap);
        resource.setResourceContent(resourceContent);
        assertion.setResources(Arrays.asList(new XacmlRequestBuilderAssertion.Resource[]{resource}));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedResourceContent,
                fixLines(createdXml).trim());
    }

    /**
     * contextVariableName takes precedence over useRequest. When not null the xacmlRequestXml is placed in a variable
     */
    private PolicyEnforcementContext getContext()
            throws SAXException {
        Message request = new Message();
        Message response = new Message();

        MockServletContext servletContext = new MockServletContext();
        MockHttpServletRequest hrequest = new MockHttpServletRequest(servletContext);
        MockHttpServletResponse hresponse = new MockHttpServletResponse();

        PolicyEnforcementContext policyEnforcementContext = new PolicyEnforcementContext(request, response);

        request.attachHttpRequestKnob(new HttpServletRequestKnob(hrequest));
        response.attachHttpResponseKnob(new HttpServletResponseKnob(hresponse));

        return policyEnforcementContext;
    }

    private String fixLines(String input) {
        return input.replaceAll("\\r\\n", "\n").replaceAll("\\n\\r", "\n").replaceAll("\\r", "\n");
    }

    private static final String singleValuedMessageTypeAttributeValue = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String multiValuedAttributeValueDynamicRequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedAttributeValues = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue id1=\"val1\">one</AttributeValue>\n" +
            "            <AttributeValue id2=\"val2\">\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue id3=\"val3\">three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedResourceContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource>\n" +
            "        <ResourceContent name1=\"value1\">\n" +
            "            <resourcexml>content of resource content</resourcexml>\n" +
            "        </ResourceContent>\n" +
            "    </Resource>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";
}
