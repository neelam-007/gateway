/**
 * Copyright (C) 2008, Layer 7 Technologies Inc.
 * User: darmstrong
 * Date: Jun 15, 2009
 * Time: 12:24:09 PM
 */
package com.l7tech.external.assertions.xacmlpdp.server;

import com.l7tech.server.message.PolicyEnforcementContext;
import com.l7tech.server.ApplicationContexts;
import com.l7tech.message.Message;
import com.l7tech.message.HttpServletRequestKnob;
import com.l7tech.message.HttpServletResponseKnob;
import com.l7tech.common.io.XmlUtil;
import com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion;
import com.l7tech.external.assertions.xacmlpdp.XacmlAssertionEnums;
import static com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion.MultipleAttributeConfig.FieldName.*;
import static com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion.MultipleAttributeConfig.FieldType.XPATH_RELATIVE;
import static com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion.MultipleAttributeConfig.FieldType.XPATH_ABSOLUTE;
import static com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion.MultipleAttributeConfig.FieldType.REGULAR;
import static com.l7tech.external.assertions.xacmlpdp.XacmlRequestBuilderAssertion.MultipleAttributeConfig.FieldType.CONTEXT_VARIABLE;
import com.l7tech.policy.assertion.AssertionStatus;
import org.xml.sax.SAXException;
import org.springframework.mock.web.MockServletContext;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.junit.Test;
import org.junit.Assert;
import org.w3c.dom.Document;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

public class ServerXacmlRequestBuilderAssertionTest {
    /**
     * Tests support for context variables of type Message as the content of an AttributeValue
     * @throws Exception
     */
    @Test
    public void testAttributeValueContentOfTypeMessage() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);

        String contextVariable = "SINGLE_VALUE";
        context.setVariable(contextVariable, m);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+contextVariable+"}");
        attribute.setValues(Arrays.asList(attributeValue));

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(attribute));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", singleValuedMessageTypeAttributeValue,
                fixLines(createdXml).trim());
    }

    /**
     * AttributeValue can be used to generate <AttributeValue> elements dynamically, if any of it's values
     * contain multi valued context variables.
     * If the content of AttributeValue is a multi valued context varaible, and one of it's values is a Message,
     * we will insert the xml fragment fromthe message as a direct child of <AttribtueValue>. This functionality
     * is not available from the UI currently but it is supported as we support placing a single context variable of
     * type Message into content, so for consistency, this is also supported in the multi valued context variable
     * scenario. This tests confirms it works
     * @throws Exception
     */
    @Test
    public void testAttributeValueContentIsMultiValuedOfDifferentTypes() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);
        Object [] contextVars = new Object[]{"one", m, "three"};

        String multiContextVariable = "MULTI_VALUE";
        context.setVariable(multiContextVariable, contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);
        
        attributeValue.setContent("${"+multiContextVariable+"}");
        attribute.setValues(Arrays.asList(attributeValue));

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(attribute));
        assertion.setSubjects(Arrays.asList(subject));
        
        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", multiValuedAttributeValueDynamicRequest,
                fixLines(createdXml).trim());
    }

    /**
     * Tests the dynamic behaviour of AttributeValue. This is specifically checking that only 3 elements
     * are created, as 3 is the size of the smallest multi valued context variable used
     * @throws Exception
     */
    @Test
    public void testDynamicAttributeValueBehaviour() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);
        Object [] contentVars = new Object[]{"one", m, "three"};

        String multiContextVariable = "MULTI_VALUE";
        context.setVariable(multiContextVariable, contentVars);

        Object[] attributeKeyVar = new Object[]{"id1", "id2", "id3", "id4"};
        context.setVariable("IDS", attributeKeyVar);

        Object[] attributeValueVar = new Object[]{"val1", "val2", "val3", "val4", "val5"};
        context.setVariable("VALUES", attributeValueVar);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+multiContextVariable+"}");
        Map<String, String> attributeMap = new HashMap<String, String>();
        attributeMap.put("${IDS}", "${VALUES}");
        attributeValue.setAttributes(attributeMap);

        attribute.setValues(Arrays.asList(attributeValue));

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(attribute));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedAttributeValues,
                fixLines(createdXml).trim());
    }


    /**
     * Test that ResourceContent's content can accept context variables of type Message.
     * @throws Exception
     */
    @Test
    public void testResourceWithMessage() throws Exception{
        PolicyEnforcementContext context = getContext();

        String xml = "<donal>value</donal>";
        Document doc = XmlUtil.parse(xml);
        Message m = new Message(doc);

        String contextVariable = "SINGLE_VALUE";
        context.setVariable(contextVariable, m);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        XacmlRequestBuilderAssertion.Attribute attribute = new XacmlRequestBuilderAssertion.Attribute();
        XacmlRequestBuilderAssertion.AttributeValue attributeValue = new XacmlRequestBuilderAssertion.AttributeValue();
        attributeValue.setCanElementHaveSameTypeSibilings(true);

        attributeValue.setContent("${"+contextVariable+"}");
        attribute.setValues(Arrays.asList(attributeValue));

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(attribute));
        assertion.setSubjects(Arrays.asList(subject));

        XacmlRequestBuilderAssertion.Resource resource = new XacmlRequestBuilderAssertion.Resource();
        XacmlRequestBuilderAssertion.ResourceContent resourceContent =
                new XacmlRequestBuilderAssertion.ResourceContent();

        xml = "<resourcexml>content of resource content</resourcexml>";
        doc = XmlUtil.parse(xml);
        m = new Message(doc);
        context.setVariable("RC_CONTENT", m);
        resourceContent.setContent("${RC_CONTENT}");
        Map<String, String> rcAttributeMap = new HashMap<String, String>();
        rcAttributeMap.put("name1", "value1");
        resourceContent.setAttributes(rcAttributeMap);
        resource.setResourceContent(resourceContent);
        assertion.setResources(Arrays.asList(resource));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedResourceContent,
                fixLines(createdXml).trim());
    }

    @Test
    public void testMultipleAttributes_NoValues() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE, multipleConfig, context);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EMPTY_XACML_REQUEST,
                fixLines(createdXml).trim());
    }

    private void configureMultipleAttributeConfig(String messageSource,
            XacmlRequestBuilderAssertion.MultipleAttributeConfig multipleConfig,
            PolicyEnforcementContext context) throws SAXException {
        Document doc = XmlUtil.parse(messageSource);
        Message m = new Message(doc);
        String messageVariable = "MESSAGE_VARIABLE";
        context.setVariable(messageVariable, m);
        multipleConfig.setMessageSource(XacmlAssertionEnums.MessageLocation.CONTEXT_VARIABLE);
        multipleConfig.setMessageSourceContextVar(messageVariable);
    }

    /**
     * Tests iteration and <AttributeValue> creation when the relative xpath for attribute value evaluates
     * to text nodes
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_RelativeXPath_NoNameSpaces_TextNodes() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE, multipleConfig, context);

        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/Attribute");
        Map<String, String> namespaces = new HashMap<String, String>();
        namespaces.put("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
        namespaces.put("ws", "http://warehouse.acme.com/ws");
        multipleConfig.setNamespaces(namespaces);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_RELATIVE);
        multipleConfig.getField(DATA_TYPE).setValue("datatype/text()");
        multipleConfig.getField(VALUE).setType(XPATH_RELATIVE);
        multipleConfig.getField(VALUE).setValue("value/a/text()");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedXPathRelativeTextNodesXml,
                fixLines(createdXml).trim());
    }

    /**
     * Test xpath support for generating multiple attributes, when the AttributeValue contents will be an xml
     * fragment, also the iterations should be more than one. This is specifically testing that the iteration
     * logic inside of addXpathAttribtues is correct
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_RelativeXPath_NoNameSpaces_NodeSet_MultipleIterations() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE, multipleConfig, context);

        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/Attribute");
        Map<String, String> namespaces = new HashMap<String, String>();
        namespaces.put("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
        namespaces.put("ws", "http://warehouse.acme.com/ws");
        multipleConfig.setNamespaces(namespaces);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_RELATIVE);
        multipleConfig.getField(DATA_TYPE).setValue("datatype/text()");
        multipleConfig.getField(VALUE).setType(XPATH_RELATIVE);
        multipleConfig.getField(VALUE).setValue("value/a");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedXPathRelativeNodeSetXml,
                fixLines(createdXml).trim());
    }


    /**
     * Same as above similiarly named test, the relative text values contain namespaces
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_RelativeXPath_NameSpaces_NodeSet_MultipleIterations() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");
        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_RELATIVE);
        multipleConfig.getField(DATA_TYPE).setValue("datatype/text()");
        multipleConfig.getField(VALUE).setType(XPATH_RELATIVE);
        multipleConfig.getField(VALUE).setValue("value/a");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedXPathRelativeNodeSetXml,
                fixLines(createdXml).trim());
    }

    /**
     * As it's not 2.0, only one AttributeValue should be created, even though there is data for more
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_MultipleIterations_NonXACML20() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");
        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_RELATIVE);
        multipleConfig.getField(DATA_TYPE).setValue("datatype/text()");
        multipleConfig.getField(VALUE).setType(XPATH_RELATIVE);
        multipleConfig.getField(VALUE).setValue("value/a");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        assertion.setXacmlVersion(XacmlAssertionEnums.XacmlVersionType.V1_1);
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", expectedXPathRelativeNodeSetXmlNon2_0,
                fixLines(createdXml).trim());
    }

    /**
     * Test that relative and absolute xpaths work side by side, with the relative path defining the iteration
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_RelativeAndAbsoluteXPath() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");
        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_ABSOLUTE);
        multipleConfig.getField(DATA_TYPE).setValue("/soapenv:Envelope/soapenv:Body/ws:listProducts/test/text()");
        multipleConfig.getField(VALUE).setType(XPATH_RELATIVE);
        multipleConfig.getField(VALUE).setValue("value/a");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XPATH_RELATIVE_AND_ABSOLUTE,
                fixLines(createdXml).trim());
    }

    /**
     * Test that relative and absolute xpaths work side by side, with the relative path defining the iteration
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_AllAbsolute() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_ABSOLUTE);
        multipleConfig.getField(ID).setValue("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute/donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_ABSOLUTE);
        multipleConfig.getField(DATA_TYPE).setValue("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute/datatype/text()");
        multipleConfig.getField(VALUE).setType(XPATH_ABSOLUTE);
        multipleConfig.getField(VALUE).setValue("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute/value/a");

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XPATH_ALL_ABSOLUTE,
                fixLines(createdXml).trim());
    }

    /**
     * Test the behaviour when the AttributeValue field is a multi valued context variable
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_MultiValuedContextVariable() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);
        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(XPATH_RELATIVE);
        multipleConfig.getField(DATA_TYPE).setValue("datatype/text()");
        multipleConfig.getField(VALUE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(VALUE).setValue("${MULTI_VARIABLE}");

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        Object [] contextVars = new Object[]{"one", messageVar, "three"};
        context.setVariable("MULTI_VARIABLE", contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XPATH_ATTRIBUTE_VALUE_ISC_MULTI_CTX_VARIABLE,
                fixLines(createdXml).trim());
    }

    /**
     * Test the beahviour when a multi valued context variable is part of the iteration due to it being supplied
     * into the id, datatype, issuer or issuerinstant text fields
     * In this test, the xpath iteration will terminate first - it expects 2 results, while the min multi valued
     * context variable has 4 results
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_MultiValuedContextVariablePartOfIteration_XpathIsMin() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);
        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(DATA_TYPE).setValue("${MULTI_DATATYPE}");
        multipleConfig.getField(VALUE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(VALUE).setValue("${MULTI_VARIABLE}");

        //define datatype as a multi valued context variable
        Object [] dataTypes = new Object[]{"datatype1", "datatype2", "datatype3", "datatype4"};
        context.setVariable("MULTI_DATATYPE", dataTypes);

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        Object [] contextVars = new Object[]{"one", messageVar, "three"};
        context.setVariable("MULTI_VARIABLE", contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XACML_XPATH_IS_MIN_ITERATOR,
                fixLines(createdXml).trim());
    }

    /**
     * Test the beahviour when a multi valued context variable is part of the iteration due to it being supplied
     * into the id, datatype, issuer or issuerinstant text fields
     * In this test, the multi context var iteration will terminate first - it has 2 values, while xpath expects 3
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_MultiValuedContextVariablePartOfIteration_ContextVarIsMin() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES_3ATTRIBUTES, multipleConfig, context);
        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(DATA_TYPE).setValue("${MULTI_DATATYPE}");
        multipleConfig.getField(VALUE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(VALUE).setValue("${MULTI_VARIABLE}");

        //define datatype as a multi valued context variable
        Object [] dataTypes = new Object[]{"datatype1", "datatype2"};
        context.setVariable("MULTI_DATATYPE", dataTypes);

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        Object [] contextVars = new Object[]{"one", messageVar, "three"};
        context.setVariable("MULTI_VARIABLE", contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XACML_XPATH_IS_MIN_ITERATOR,
                fixLines(createdXml).trim());
    }

    /**
     * Test the beahviour when a multi valued context variable is the only thing we are iterating on
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_MultiValuedContextVariablePartOfIteration_ContextVarOnly() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_ABSOLUTE);
        multipleConfig.getField(ID).setValue("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute/donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(DATA_TYPE).setValue("${MULTI_DATATYPE}");
        multipleConfig.getField(VALUE).setType(CONTEXT_VARIABLE);
        multipleConfig.getField(VALUE).setValue("${MULTI_VARIABLE}");

        //define datatype as a multi valued context variable
        Object [] dataTypes = new Object[]{"datatype1", "datatype2"};
        context.setVariable("MULTI_DATATYPE", dataTypes);

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        Object [] contextVars = new Object[]{"one", messageVar, "three"};
        context.setVariable("MULTI_VARIABLE", contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXEPCTED_XACML_CONTEXT_VAR_ONLY_ITERATOR,
                fixLines(createdXml).trim());
    }

    /**
     * Test the beahviour when a multi valued context variable is the only thing we are iterating on
     * @throws Exception
     */
    @Test
    public void testMultipleAttributes_SingleContextVariablesOnly() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);

        setNameSpaces(multipleConfig);

        context.setVariable("ID", "id1");
        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(REGULAR);
        multipleConfig.getField(ID).setValue("${ID}");
        multipleConfig.getField(DATA_TYPE).setType(REGULAR);
        multipleConfig.getField(DATA_TYPE).setValue("${DATATYPE}");
        multipleConfig.getField(VALUE).setType(REGULAR);
        multipleConfig.getField(VALUE).setValue("${ATTRIBUTE_VALUE}");

        //define datatype as a multi valued context variable
        context.setVariable("DATATYPE", "datatype1");

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        context.setVariable("ATTRIBUTE_VALUE", messageVar);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        AssertionStatus status = server.checkRequest(context);

        Assert.assertEquals("checkRequest returned invalid AssertionStatus",  AssertionStatus.NONE, status);

        //validate generated xml
        Message reqeust = context.getRequest();
        String createdXml = XmlUtil.elementToXml(reqeust.getXmlKnob().getDocumentReadOnly().getDocumentElement());

        Assert.assertEquals("Invalid XACML reqeust generated by assertion", EXPECTED_XACML_SINGLE_CONTEXT_VARS_ONLY,
                fixLines(createdXml).trim());
    }

    /**
     * Test the beahviour when a multi valued context variable is part of the iteration, however the fields which
     * can define iteration cannot take xml fragments, so ensure that if the multi valued context variable used
     * for iteration does not contain any Messages
     * @throws Exception
     */
    @Test(expected = IllegalArgumentException.class)
    public void testMultipleAttributes_MultiValuedContextVariablePartOfIteration_InvalidContent() throws Exception{

        XacmlRequestBuilderAssertion.MultipleAttributeConfig
                multipleConfig = new XacmlRequestBuilderAssertion.MultipleAttributeConfig();

        PolicyEnforcementContext context = getContext();
        configureMultipleAttributeConfig(XPATH_MESSAGE_WITH_NAMESPACES, multipleConfig, context);
        multipleConfig.setXpathBase("/soapenv:Envelope/soapenv:Body/ws:listProducts/donal:Attribute");

        setNameSpaces(multipleConfig);

        //Just set up the minimum - id, datatype and value
        multipleConfig.getField(ID).setType(XPATH_RELATIVE);
        multipleConfig.getField(ID).setValue("donal:id/text()");
        multipleConfig.getField(DATA_TYPE).setType(REGULAR);
        multipleConfig.getField(DATA_TYPE).setValue("${MULTI_DATATYPE}"); //this should be an error - it contains a message
        multipleConfig.getField(VALUE).setType(REGULAR);
        multipleConfig.getField(VALUE).setValue("static string");

        String xml = "<donal>value</donal>";
        Document message = XmlUtil.parse(xml);
        Message messageVar = new Message(message);
        Object [] contextVars = new Object[]{"one", messageVar, "three"};
        //define datatype as a multi valued context variable
        context.setVariable("MULTI_DATATYPE", contextVars);

        XacmlRequestBuilderAssertion assertion = new XacmlRequestBuilderAssertion();
        XacmlRequestBuilderAssertion.Subject subject = new XacmlRequestBuilderAssertion.Subject();

        subject.setAttributes(Arrays.<XacmlRequestBuilderAssertion.AttributeTreeNodeTag>asList(multipleConfig));
        assertion.setSubjects(Arrays.asList(subject));

        ServerXacmlRequestBuilderAssertion server = new ServerXacmlRequestBuilderAssertion(
                assertion, ApplicationContexts.getTestApplicationContext());
        server.checkRequest(context);
    }

    private void setNameSpaces(XacmlRequestBuilderAssertion.MultipleAttributeConfig multipleConfig) {
        Map<String, String> namespaces = new HashMap<String, String>();
        namespaces.put("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
        namespaces.put("ws", "http://warehouse.acme.com/ws");
        namespaces.put("donal", "http://donal.com");
        multipleConfig.setNamespaces(namespaces);
    }

    /**
     * contextVariableName takes precedence over useRequest. When not null the xacmlRequestXml is placed in a variable
     */
    private PolicyEnforcementContext getContext()
            throws SAXException {
        Message request = new Message();
        Message response = new Message();

        MockServletContext servletContext = new MockServletContext();
        MockHttpServletRequest hrequest = new MockHttpServletRequest(servletContext);
        MockHttpServletResponse hresponse = new MockHttpServletResponse();

        PolicyEnforcementContext policyEnforcementContext = new PolicyEnforcementContext(request, response);

        request.attachHttpRequestKnob(new HttpServletRequestKnob(hrequest));
        response.attachHttpResponseKnob(new HttpServletResponseKnob(hresponse));

        return policyEnforcementContext;
    }

    private String fixLines(String input) {
        return input.replaceAll("\\r\\n", "\n").replaceAll("\\n\\r", "\n").replaceAll("\\r", "\n");
    }

    private static final String singleValuedMessageTypeAttributeValue = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EMPTY_XACML_REQUEST = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject/>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";
    
    private static final String multiValuedAttributeValueDynamicRequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedAttributeValues = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue id1=\"val1\">one</AttributeValue>\n" +
            "            <AttributeValue id2=\"val2\">\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue id3=\"val3\">three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedResourceContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeId=\"\" DataType=\"\">\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource>\n" +
            "        <ResourceContent name1=\"value1\">\n" +
            "            <resourcexml>content of resource content</resourcexml>\n" +
            "        </ResourceContent>\n" +
            "    </Resource>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedXPathRelativeTextNodesXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"first type\">\n" +
            "            <AttributeValue>a1</AttributeValue>\n" +
            "            <AttributeValue>a2</AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"second type\">\n" +
            "            <AttributeValue>a3</AttributeValue>\n" +
            "            <AttributeValue>a4</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedXPathRelativeNodeSetXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"first type\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a1</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a2</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"second type\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a3</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a4</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String expectedXPathRelativeNodeSetXmlNon2_0 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:1.0:context\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"first type\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a1</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"second type\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a3</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String XPATH_MESSAGE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<soapenv:Envelope\n" +
            "    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://warehouse.acme.com/ws\">\n" +
            "    <soapenv:Header/>\n" +
            "    <soapenv:Body>\n" +
            "        <ws:listProducts>\n" +
            "            <Attribute>\n" +
            "               <id>first id</id>\n" +
            "               <datatype>first type</datatype>\n" +
            "               <issuer>first issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a1</a>" +
            "                   <a>a2</a>\n" +
            "               </value>\n" +
            "           </Attribute>\n" +
            "           <Attribute>\n" +
            "               <id>second id</id>\n" +
            "               <datatype>second type</datatype>\n" +
            "               <issuer>second issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a3</a>" +
            "                   <a>a4</a>\n" +
            "               </value>\n" +
            "           </Attribute>\n" +
            "        </ws:listProducts>\n" +
            "    </soapenv:Body>\n" +
            "</soapenv:Envelope>";

    private static final String XPATH_MESSAGE_WITH_NAMESPACES = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<soapenv:Envelope\n" +
            "    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://warehouse.acme.com/ws\"" +
            "    xmlns:donal=\"http://donal.com\">\n" +
            "    <soapenv:Header/>\n" +
            "    <soapenv:Body>\n" +
            "        <ws:listProducts>\n" +
            "            <donal:Attribute>\n" +
            "               <donal:id>first id</donal:id>\n" +
            "               <datatype>first type</datatype>\n" +
            "               <issuer>first issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a1</a>" +
            "                   <a>a2</a>\n" +
            "               </value>\n" +
            "           </donal:Attribute>\n" +
            "           <donal:Attribute>\n" +
            "               <donal:id>second id</donal:id>\n" +
            "               <datatype>second type</datatype>\n" +
            "               <issuer>second issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a3</a>" +
            "                   <a>a4</a>\n" +
            "               </value>\n" +
            "           </donal:Attribute>\n" +
            "           <test>testval</test>\n" +
            "        </ws:listProducts>\n" +
            "    </soapenv:Body>\n" +
            "</soapenv:Envelope>";

    private static final String XPATH_MESSAGE_WITH_NAMESPACES_3ATTRIBUTES = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<soapenv:Envelope\n" +
            "    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://warehouse.acme.com/ws\"" +
            "    xmlns:donal=\"http://donal.com\">\n" +
            "    <soapenv:Header/>\n" +
            "    <soapenv:Body>\n" +
            "        <ws:listProducts>\n" +
            "            <donal:Attribute>\n" +
            "               <donal:id>first id</donal:id>\n" +
            "               <datatype>first type</datatype>\n" +
            "               <issuer>first issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a1</a>" +
            "                   <a>a2</a>\n" +
            "               </value>\n" +
            "           </donal:Attribute>\n" +
            "           <donal:Attribute>\n" +
            "               <donal:id>second id</donal:id>\n" +
            "               <datatype>second type</datatype>\n" +
            "               <issuer>second issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a3</a>" +
            "                   <a>a4</a>\n" +
            "               </value>\n" +
            "           </donal:Attribute>\n" +
            "           <donal:Attribute>\n" +
            "               <donal:id>third id</donal:id>\n" +
            "               <datatype>third type</datatype>\n" +
            "               <issuer>third issuer</issuer>\t\n" +
            "               <value>\n" +
            "                   <a>a5</a>" +
            "                   <a>a6</a>\n" +
            "               </value>\n" +
            "           </donal:Attribute>\n" +
            "           <test>testval</test>\n" +
            "        </ws:listProducts>\n" +
            "    </soapenv:Body>\n" +
            "</soapenv:Envelope>";

    private static final String EXPECTED_XPATH_RELATIVE_AND_ABSOLUTE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"testval\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a1</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a2</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"testval\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a3</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a4</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EXPECTED_XPATH_ALL_ABSOLUTE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"first type\">\n" +
            "            <AttributeValue>\n" +
            "                <a>a1</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a2</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a3</a>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <a>a4</a>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EXPECTED_XPATH_ATTRIBUTE_VALUE_ISC_MULTI_CTX_VARIABLE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"first type\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"second type\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EXPECTED_XACML_XPATH_IS_MIN_ITERATOR = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"datatype1\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"second id\" DataType=\"datatype2\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EXEPCTED_XACML_CONTEXT_VAR_ONLY_ITERATOR = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"datatype1\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "        <Attribute AttributeID=\"first id\" DataType=\"datatype2\">\n" +
            "            <AttributeValue>one</AttributeValue>\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "            <AttributeValue>three</AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";

    private static final String EXPECTED_XACML_SINGLE_CONTEXT_VARS_ONLY = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Request xmlns=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\">\n" +
            "    <Subject>\n" +
            "        <Attribute AttributeID=\"id1\" DataType=\"datatype1\">\n" +
            "            <AttributeValue>\n" +
            "                <donal>value</donal>\n" +
            "            </AttributeValue>\n" +
            "        </Attribute>\n" +
            "    </Subject>\n" +
            "    <Resource/>\n" +
            "    <Action/>\n" +
            "    <Environment/>\n" +
            "</Request>";
}
