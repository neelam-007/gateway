package com.l7tech.common.security.xml;

import com.l7tech.common.util.HexUtils;
import com.l7tech.common.util.SoapUtil;
import com.l7tech.common.util.XmlUtil;
import com.l7tech.common.xml.TestDocuments;
import com.l7tech.skunkworks.SecureConversationKeyDeriver;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.util.List;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Key;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.HashMap;

/**
 * Test xml digital signature and encryption interoperability with messages
 * generated by a .net client using WSE 2.0
 * <p/>
 * <br/><br/>
 * LAYER 7 TECHNOLOGIES, INC<br/>
 * User: flascell<br/>
 * Date: Jun 15, 2004<br/>
 * $Id$<br/>
 */
public class DotNetInteropTest extends TestCase {

    public static void main(String[] args) throws Throwable {
        junit.textui.TestRunner.run(suite());
    }

    public static Test suite() {
        TestSuite suite = new TestSuite(DotNetInteropTest.class);
        return suite;
    }

    public void testValidateSignatureFromdotNetRequest() throws Exception {
        Document signedDoc = getSignedRequest();
        Element bodyEl = SoapUtil.getBodyElement(signedDoc);
        X509Certificate[] clientCert = SoapMsgSigner.validateSignature(signedDoc, bodyEl);
        assertTrue(clientCert.length > 0);
        assertTrue(clientCert[0].getSubjectDN().toString().equals("CN=WSE2QuickStartClient"));
        System.out.println("Signature verified successfully for subject: " + clientCert[0].getSubjectDN() + ".");
    }

    public void testInValidateSignatureFromBaddotNetSignature() throws Exception {
        Document signedDoc = getInvalidSignedRequest();
        Element bodyEl = SoapUtil.getBodyElement(signedDoc);
        boolean signatureFailed = false;
        try {
            SoapMsgSigner.validateSignature(signedDoc, bodyEl);
        } catch (InvalidSignatureException e) {
            signatureFailed = true;
        }
        assertTrue(signatureFailed);
    }

    public void testIssueSecurityContextToken() throws Exception {
        Document sctRequest = getSCTRequest();
        X509Certificate servercert = getRikerCert();
        PrivateKey privateServerKey = getRikerPrivateKey();
        XmlMangler.ProcessedEncryptedKey[] encryptionKeys = XmlMangler.getEncryptedKeyFromMessage(sctRequest,
                                                                                                   privateServerKey,
                                                                                                   servercert.getExtensionValue("2.5.29.14"));
        assertTrue(encryptionKeys.length == 1);
      //  assertTrue(Arrays.equals(DECRYPTED_KEY, encryptionKeys[0].decryptedKey.getEncoded()));
      //  System.out.println("Symmetric key decrypted succesfully");
    }

    public XmlMangler.ProcessedEncryptedKey testGetEncryptedKey() throws Exception {
        Document encryptedDoc = getEncryptedDoc();
        X509Certificate servercert = getRikerCert();
        PrivateKey privateServerKey = getRikerPrivateKey();
        XmlMangler.ProcessedEncryptedKey[] encryptionKeys = XmlMangler.getEncryptedKeyFromMessage(encryptedDoc,
                                                                                                  privateServerKey,
                                                                                                  servercert.getExtensionValue("2.5.29.14"));
        assertTrue(encryptionKeys.length == 1);
        assertTrue(Arrays.equals(DECRYPTED_KEY, encryptionKeys[0].decryptedKey.getEncoded()));
        System.out.println("Symmetric key decrypted succesfully");
        return encryptionKeys[0];
    }

    public void testDecryptMessageWithDerivedKeyToken() throws Exception {
        Document derivedKeyEncryptedDoc = getDerviedKeyEncryptedRequest();
        Element header = SoapUtil.getHeaderElement(derivedKeyEncryptedDoc);

        Element security = SoapUtil.getSecurityElement(header);

        byte[] secret = {5, 2, 4, 5, 8, 7, 9, 6, 32, 4, 1, 55, 8, 7, 77, 7};
        SecureConversationKeyDeriver sckd = new SecureConversationKeyDeriver();

        Key key = null;
        Element derivedKeyToken = null;

        List tokens = XmlUtil.findChildElementsByName(security, WSSC_NS, "DerivedKeyToken");
        HashMap tokenMap = new HashMap();
        String id = null;

        for (int i = 0; i < tokens.size(); i++) {
            derivedKeyToken= (Element) tokens.get(i);
            key = sckd.derivedKeyTokenToKey(derivedKeyToken, secret);
            id = derivedKeyToken.getAttributeNS(WSU_NS, "Id");
            tokenMap.put(id, key);
        }

        Element bodyEl = SoapUtil.getBodyElement(derivedKeyEncryptedDoc);
        Element encryptedData = (Element) (XmlUtil.findChildElementsByName(bodyEl, XMLENC_NS, "EncryptedData")).get(0);
        Element keyInfo = (Element) (XmlUtil.findChildElementsByName(encryptedData, XMLSIG_NS, "KeyInfo")).get(0);

        Element securityTokenRef =  (Element) (XmlUtil.findChildElementsByName(keyInfo, WSSE_NS, "SecurityTokenReference")).get(0);
        Element ref =  (Element) (XmlUtil.findChildElementsByName(securityTokenRef, WSSE_NS, "Reference")).get(0);

        id = ref.getAttributeNS(null, "URI");

        // trim the first character '#' in the id String
        Key decryptKey = (Key)tokenMap.get(id.substring(1, id.length()));

        // decrypt the body first
        XmlMangler.decryptElement(bodyEl, decryptKey, null);

        Element bodyChild = XmlUtil.findFirstChildElement(bodyEl);
        assertTrue("listProducts".equals(bodyChild.getLocalName()));
        System.out.println("Message decrypted successfully with the derived key");

        // validate the signature
        Element signature = (Element) (XmlUtil.findChildElementsByName(security, XMLSIG_NS, "Signature")).get(0);
        keyInfo = (Element) (XmlUtil.findChildElementsByName(signature, XMLSIG_NS, "KeyInfo")).get(0);
        securityTokenRef =  (Element) (XmlUtil.findChildElementsByName(keyInfo, WSSE_NS, "SecurityTokenReference")).get(0);
        ref =  (Element) (XmlUtil.findChildElementsByName(securityTokenRef, WSSE_NS, "Reference")).get(0);
        id = ref.getAttributeNS(null, "URI");

        // trim the first character '#' in the id String
        Key signedKey = (Key)tokenMap.get(id.substring(1, id.length()));

        // validate the signature
        SoapMsgSigner.validateSignature(derivedKeyEncryptedDoc, bodyEl, signedKey);

        System.out.println("Signature verified successfully with the derived key");
    }

    public void testValidateSignatureWithDerivedKeyToken() throws Exception {
        Document derivedKeySignedDoc = getDerviedKeySignedRequest();
        Element header = SoapUtil.getHeaderElement(derivedKeySignedDoc);

        Element security = SoapUtil.getSecurityElement(header);
        Element derivedKeyToken = (Element) ((XmlUtil.findChildElementsByName(security, "http://schemas.xmlsoap.org/ws/2004/04/sc", "DerivedKeyToken")).get(0));
        byte[] secret = {5, 2, 4, 5, 8, 7, 9, 6, 32, 4, 1, 55, 8, 7, 77, 7};

        SecureConversationKeyDeriver sckd = new SecureConversationKeyDeriver();
        Key key = sckd.derivedKeyTokenToKey(derivedKeyToken, secret);

        Element bodyEl = SoapUtil.getBodyElement(derivedKeySignedDoc);

        SoapMsgSigner.validateSignature(derivedKeySignedDoc, bodyEl, key);
        System.out.println("Signature verified successfully with the derived key");
    }

    public void testDecryptdotNetRequest() throws Exception {
        Document encryptedDoc = getEncryptedDoc();
        XmlMangler.ProcessedEncryptedKey encryptionKey = testGetEncryptedKey();
        Element body = SoapUtil.getBodyElement(encryptedDoc);
        XmlMangler.decryptElement(body, encryptionKey.decryptedKey, encryptionKey.referenceList);
        Element bodyChild = XmlUtil.findFirstChildElement(body);
        assertTrue("listProducts".equals(bodyChild.getLocalName()));
        System.out.println("Body decrypted successfully");
    }

    private PrivateKey getRikerPrivateKey() throws Exception {
        return TestDocuments.getDotNetServerPrivateKey();
    }

    private X509Certificate getRikerCert() throws Exception {
        return TestDocuments.getDotNetServerCertificate();
    }

    private Document getEncryptedDoc() throws Exception {
        return TestDocuments.getTestDocument(TestDocuments.DOTNET_ENCRYPTED_REQUEST);
    }

    private Document getSignedRequest() throws Exception {
        return TestDocuments.getTestDocument(TestDocuments.DOTNET_SIGNED_REQUEST);
    }

    private Document getInvalidSignedRequest() throws Exception {
        return TestDocuments.getTestDocument(TestDocuments.DOTNET_SIGNED_TAMPERED_REQUEST);
    }

    private Document getDerviedKeySignedRequest() throws Exception {
            return TestDocuments.getTestDocument(TestDocuments.DOTNET_SIGNED_USING_DERIVED_KEY_TOKEN);
    }

    private Document getDerviedKeyEncryptedRequest() throws Exception {
            return TestDocuments.getTestDocument(TestDocuments.DOTNET_ENCRYPTED_USING_DERIVED_KEY_TOKEN);
    }

    private Document getSCTRequest() throws Exception {
            return TestDocuments.getTestDocument(TestDocuments.DOTNET_SCT_REQUEST);
    }

    public static final byte[] DECRYPTED_KEY = {-54, 33,-19, 87, -46, 31, -86, 44, -10, 3, -37, 111, 125, -94, -64, 24};
    public static final String WSSE_NS = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
    public static final String WSU_NS = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";
    public static final String WSSC_NS = "http://schemas.xmlsoap.org/ws/2004/04/sc";
    public static final String XMLSIG_NS = "http://www.w3.org/2000/09/xmldsig#";
    public static final String XMLENC_NS = "http://www.w3.org/2001/04/xmlenc#";

}
