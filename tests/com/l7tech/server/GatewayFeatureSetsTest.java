/*
 * Copyright (C) 2005 Layer 7 Technologies Inc.
 *
 */

package com.l7tech.server;

import com.l7tech.policy.AllAssertions;
import com.l7tech.policy.assertion.Assertion;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.io.PrintStream;
import java.util.*;
import java.util.logging.Logger;

/**
 * @author mike
 */
public class GatewayFeatureSetsTest extends TestCase {
    private static Logger log = Logger.getLogger(GatewayFeatureSetsTest.class.getName());

    public GatewayFeatureSetsTest(String name) {
        super(name);
    }

    public static Test suite() {
        return new TestSuite(GatewayFeatureSetsTest.class);
    }

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    /** Ensures that the feature sets tree is internally consistent and assembles itself without error, and emits wiki doc. */
    public void testEmitWikiDocs() throws Exception {
        Map<String, GatewayFeatureSets.FeatureSet> profiles = GatewayFeatureSets.getProductProfiles();
        Map<String, GatewayFeatureSets.FeatureSet> roots = GatewayFeatureSets.getRootFeatureSets();
        Map<String, GatewayFeatureSets.FeatureSet> all = GatewayFeatureSets.getAllFeatureSets();

        Set<String> visited = new HashSet<String>();
        PrintStream out = System.out;

        Map<String, GatewayFeatureSets.FeatureSet> services = new LinkedHashMap<String, GatewayFeatureSets.FeatureSet>();
        Set<String> allServNames = new LinkedHashSet<String>(Arrays.asList(ALL_SERVICES));
        for (String servName : allServNames) {
            GatewayFeatureSets.FeatureSet serv = all.get(servName);
            assertNotNull(serv);
            services.put(servName, serv);
        }

        emit(out, "Service Names", services, new HashSet<String>(), false);
        emit(out, "Product Profiles", profiles, visited, true);
        emit(out, "Building Blocks", roots, visited, true);
    }

    private void emit(PrintStream out, String what, Map<String, GatewayFeatureSets.FeatureSet> sets, Set<String> visited, boolean includeLastTwoColumns) {
        out.println("\n\n<!-- Begin generated by " + getClass().getName() + " -- do not edit below this line -- " + what + " -->");
        String lasttwoHeaders = includeLastTwoColumns ? "!! Included Feature Sets !! Notes" : "";
        out.println("{| border=\"1\" cellpadding=\"3\" cellspacing=\"0\" style=\"font-size: 90%; border: gray solid 2px; border-collapse: collapse; text-align: left; width: 95%\" \n" +
                "|- \n" +
                "! Name !! Short Description " + lasttwoHeaders);
        for (Map.Entry<String, GatewayFeatureSets.FeatureSet> entry : sets.entrySet()) {
            String name = entry.getKey();
            GatewayFeatureSets.FeatureSet fs = entry.getValue();
            if (visited.contains(name)) continue;
            visited.add(name);
            out.println("|-");
            out.println("| " + name + " || " + fs.desc + (includeLastTwoColumns ? " || " : ""));
            for (GatewayFeatureSets.FeatureSet dep : fs.sets) {
                out.println("* " + dep.name);
            }
            if (includeLastTwoColumns)
                out.println("|| " + fs.getNote());
        }
        out.println("|}");
        out.println("<!-- End generated by " + getClass().getName() + " -- do not edit above this line -- " + what + " -->\n");
    }

    public void testAllAssertionsReachableThroughProfileAll() throws Exception {
        GatewayFeatureSets.FeatureSet profileAll = GatewayFeatureSets.getBestProductProfile();

        Assertion[] allAssertions = AllAssertions.SERIALIZABLE_EVERYTHING;
        for (Assertion assertion : allAssertions) {
            String name = GatewayFeatureSets.getFeatureSetNameForAssertion(assertion.getClass());
            if (!profileAll.contains(name))
                throw new RuntimeException("Assertion is not enabled by the full-featured Product Profile: " +
                        assertion.getClass() + " (feature set name would be " + name + ")");
        }
    }

    public void testEverythingMapped() throws Exception {
        Map<String, GatewayFeatureSets.FeatureSet> allSets = GatewayFeatureSets.getAllFeatureSets();

        Assertion[] allAssertions = AllAssertions.SERIALIZABLE_EVERYTHING;
        for (Assertion assertion : allAssertions) {
            String name = GatewayFeatureSets.getFeatureSetNameForAssertion(assertion.getClass());
            if (!allSets.containsKey(name))
                throw new RuntimeException("Assertion is not present in any Feature Set: " +
                        assertion.getClass() + " (feature set name would be " + name + ")");
        }

        for (String name : ALL_SERVICES) {
            if (!allSets.containsKey(name))
                throw new RuntimeException("Servlet is not present in any Feature Set: " + name);
        }
    }

    private static final String[] ALL_SERVICES = {
            "service:MessageProcessor",
            "service:Admin",
            "service:HttpMessageInput",
            "service:JmsMessageInput",
            "service:CSRHandler",
            "service:Passwd",
            "service:Policy",
            "service:TokenService",
            "service:SnmpQuery",
            "service:WsdlProxy",
            "service:Bridge",
    };

    /** Makes sure that all registered services are included in ALL_SERVICES.  Dual of testAllServicesMapped. */
    public void testAllServicesKnown() throws Exception {
        GatewayFeatureSets.FeatureSet profileAll = GatewayFeatureSets.getBestProductProfile();

        Set<String> allServs = new HashSet<String>(Arrays.asList(ALL_SERVICES));
        Set<String> names = new HashSet<String>();
        profileAll.collectAllFeatureNames(names);

        for (String name : names) {
            if (name.startsWith("service:") && !allServs.contains(name))
                throw new RuntimeException("Service is registered as a feature but is not present in ALL_SERVICES: " + name);
        }
    }

    /** Makes sure that all services in ALL_SERVICES are registered.  Dual of testAllServicesKnown. */
    public void testAllServicesMapped() throws Exception {
        GatewayFeatureSets.FeatureSet profileAll = GatewayFeatureSets.getBestProductProfile();

        Assertion[] allAssertions = AllAssertions.SERIALIZABLE_EVERYTHING;
        for (String name : ALL_SERVICES) {
            if (!profileAll.contains(name))
                throw new RuntimeException("Servlet is not enabled by the full-featured Product Profile: " + name);
        }

        for (Assertion assertion : allAssertions) {
            String name = GatewayFeatureSets.getFeatureSetNameForAssertion(assertion.getClass());
        }
    }

    public void testAllAssertionsProfiled() throws Exception {
        Map<String, GatewayFeatureSets.FeatureSet> allProfiles = GatewayFeatureSets.getProductProfiles();
        GatewayFeatureSets.FeatureSet allProfilesSet =
                new GatewayFeatureSets.FeatureSet("EVERYTHING_PROFILED", "", null,
                                                  allProfiles.values().toArray(new GatewayFeatureSets.FeatureSet[0]));

        Assertion[] allAssertions = AllAssertions.SERIALIZABLE_EVERYTHING;
        for (Assertion assertion : allAssertions) {
            String name = GatewayFeatureSets.getFeatureSetNameForAssertion(assertion.getClass());
            if (!allProfilesSet.contains(name))
                throw new RuntimeException("Assertion is not enabled by any root-level Product Profile: " +
                        assertion.getClass() + " (feature set name would be " + name + ")");
        }


    }
}
