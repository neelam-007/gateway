<project name="UneasyRooster" default="dev" basedir=".">

    <!-- ssg build file (Ant) -->
    <property name="app.name" value="ssg"/>

    <!-- Uncomment for jikes/emacs to be used
    <property name="build.compiler" value="jikes"/>
    <property name="build.compiler.emacs" value="true"/> -->

    <!-- as the file name says -->
    <property file="${src.root}/etc/ssg.version"/>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!--
      ** Set default build properties
      ** Properties that were not specified in user properties
    -->
    <property file="${src.root}/etc/default_build.properties"/>

    <!-- where the builds go -->
    <property name="dist.build.home" value="${src.root}/dist"/>
    <property name="dev.build.home" value="${src.root}/build"/>

    <!-- distribution archive names -->
    <property name="war" value="${app.name}.war"/>
    <property name="tar" value="${app.name}.tar"/>
    <property name="tar.gz" value="${app.name}_${app.version}.tar.gz"/>

    <!-- ear not used
      <property name="ear"        value="${app.name}.ear"/>
    -->

    <!-- project classpath -->
    <path id="project.class.path">
        <pathelement location="src"/>
        <fileset dir="lib">
            <include name="*.jar"/>
             <!--
                * Issue with multiple parsers.
                * JDK 1.4 ships it's own parses and contributes to the
                * overall parser mess. java.beans.XmlEncoder and other
                * classes  do not like xerces so excluded it from project
                * classpath.
                * It is not throughly tested to see if this breaks other things.
              -->
            <exclude name="*xerces*"/>
            <exclude name="*xml-api*"/>
        </fileset>
        <fileset dir="lib">
            <include name="*.zip"/>
        </fileset>
    </path>
    <property name="test.class.path" refid="project.class.path"/>

    <!--
       * jars that go in $TOMCAT_HOME/common/lib
       * currently in ant this is used in conjunction with
       * fileset (look for patternset id usage throughout this
       * build.xml for examples)
    -->
    <property name="common.lib.jars"
              value="saaj.jar, jaxrpc.jar"/>

    <!--
      ** init dev target The "dev" target depends on this target.
      -->
    <target name="init-dev">
        <property name="build.dir" value="${dev.build.home}"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
    </target>


    <!--
      ** config dist target. The "dist" target depends on this target.
      -->
    <target name="init-dist">
        <property name="dist.build" value="true"/>
        <property name="build.dir" value="${dist.build.home}"/>

        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>

        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
    </target>


    <target name="cleandev" depends="clean, dev"/>

    <!--
      ** configure and invoke developer's build
      -->
    <target name="dev" depends="init-dev">
        <antcall target="compile">
        </antcall>
        <antcall target="compile-tests">
        </antcall>

        <antcall target="compile-one">
        </antcall>
    </target>

    <target name="build-component" depends="init-dev">
        <property name="buildnumber.file" value="${src.root}/buildnumber.${component}"/>

        <echo>(not) running cvs update ${buildnumber.file}</echo>
        <!--
        <cvs command="update ${buildnumber.file}"/>
        -->

        <antcall target="clean"/>
        <antcall target="compile"/>
        <antcall target="compile-tests"/>
        <antcall target="test"/>
        <antcall target="deploy"/>

        <buildnumber file="${buildnumber.file}"/>

        <echo>(not) running cvs commit ${buildnumber.file}</echo>
        <!--
        <cvs command="commit ${buildnumber.file}"/>
        -->

        <property name="tag" value="${component}-build${build.number}"/>

        <echo>(not) running cvs tag -R ${tag} ${dirs}</echo>

        <!--
        <cvs command="tag -R ${tag} ${dirs}"/>
        -->
    </target>

    <!-- Directories that should be tagged in an SSG build -->
    <path id="ssg.tag.path">
        <dirset dir="${src.root}">
            <include name="etc"/>
            <include name="web"/>
            <include name="src/com/l7tech/credential"/>
            <include name="src/com/l7tech/identity"/>
            <include name="src/com/l7tech/message"/>
            <include name="src/com/l7tech/policy"/>
            <include name="src/com/l7tech/objectmodel"/>
            <include name="src/com/l7tech/service"/>
            <include name="src/com/l7tech/util"/>
        </dirset>
    </path>

    <target name="build-ssg">
        <pathconvert refid="ssg.tag.path" property="ssg.tag.dirs" pathSep=" "/>

        <antcall target="build-component">
            <param name="component" value="ssg"/>
            <param name="dirs" value="${ssg.tag.dirs}"/>
        </antcall>
    </target>

    <!-- Directories that should be tagged in a console build -->
    <path id="console.tag.path">
        <dirset dir="${src.root}">
            <include name="etc"/>
            <include name="src/com/l7tech/console"/>
            <include name="src/com/l7tech/identity"/>
            <include name="src/com/l7tech/objectmodel"/>
            <include name="src/com/l7tech/policy"/>
            <include name="src/com/l7tech/service"/>
        </dirset>
    </path>

    <target name="build-console">
        <pathconvert refid="console.tag.path" property="console.tag.dirs" pathSep=" "/>

        <antcall target="build-component">
            <param name="component" value="console"/>
            <param name="dirs" value="${console.tag.dirs}"/>
        </antcall>
    </target>

    <!--
      ** configure and invoke developer's build for source files
      ** that match the pattern passed as -Dcompile.pattern
      -->
    <target name="compile-one" depends="init-dev" if="compile.pattern">
        <echo message="Compiling **/*${compile.pattern}* in ${src.root}."/>
        <javac srcdir="src" destdir="${build.classes}" debug="on"
            optimize="off"
            includes="**/*${compile.pattern}*" deprecation="on" depend="on"
            verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <!--
      ** developer's 'deploy' target.
      ** compile and package the application.
      ** Then deploy a package into the ${tomcat.home}/webapps ($TOMCAT_HOME/webapps)
      -->
    <target name="deploy" depends="init-dev">
        <antcall target="package">
        </antcall>

        <!--
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        -->
        <copy todir="${tomcat.home}/webapps">
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>

        <!--
          ** Java 1.4 changed the rules as to to how packages beginning in java.* and javax.*
          **  get loaded. Specifically, they only get loaded from endorsed directories.
          ** jaxrpc.jar and saaj.jar contain javax packages, so may not get picked up.
          ** Copy such libraries into $TOMCAT_HOME/common/lib
          **  -->
        <copy todir="${tomcat.home}/common/lib">
            <fileset dir="${src.root}/lib" includes="${common.lib.jars}"/>
        </copy>

        <!--
          this server.xml is ready to be modified by sslGen.sh who will later
          make the ssl cert and record it's keystore password in it
        -->
        <copy todir="${tomcat.home}/conf">
            <fileset dir="${src.root}/etc" includes="server.xml"/>
        </copy>
    </target>

    <!--
      ** configure and invoke unit tests
      -->
    <target name="test" depends="dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off">
            <classpath>
                <pathelement path="${test.class.path}"/>
                <pathelement path="${build.dir}/classes"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>
            <test name="com.l7tech.identity.ldap.LdapIdentityProviderServerTest" haltonfailure="no"/>
            <test name="com.l7tech.util.ThreadPoolTest" haltonfailure="no"/>
            <test name="com.l7tech.util.locator.AbstractLocatorTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgManagerTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.FunctionalTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.ClientPolicyTest" haltonfailure="no"/>
            <test name="com.l7tech.service.WsdlTest" haltonfailure="no"/>
            <!--
             ** add policy tests into the com.l7tech.policy.AllTests class
            -->
            <test name="com.l7tech.policy.AllTests" haltonfailure="no"/>
            <!--
              ** add tests here **
              -->
        </junit>
    </target>

    <!--
      ** Clean the directory structure.
      ** This is used only by developer's build.
      -->
    <target name="clean" depends="init-dev">
        <delete dir="${build.classes}"/>
        <delete dir="${src.root}/src/com/l7tech/corba/ens"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.lib}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${javadoc.home}"/>
        <delete file="${src.root}/src/com/l7tech/util/Version.java"/>
    </target>

    <!-- javadoc target -->
    <target name="javadoc" depends="prepare">
        <javadoc packagenames="com.*" sourcepath="src"
            destdir="${javadoc.home}">
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!--
      ** Non 'build' targets from this point; just various helper
  targets.
      ** Please do not invoke below targets as main targets.
    -->

    <!--
      ** 'package' target.
      ** package the application ( both client and server) in their
      ** respective archives (war, jar).
      ** This target is invoked by other targets such as deploy and dist.
      -->
    <target name="package" depends="init-dev, compile">
        <!-- the ssg war -->
        <war warfile="${build.dir}/${war}" webxml="${build.etc}/web.xml">
            <lib dir="${build.dir}/lib"
                 excludes="${common.lib.jars}, jh.jar, kunststoff.jar, servlet.jar, xercesImpl.jar, xml-apis.jar">
            </lib>
            <classes dir="${build.classes}"/>
            <zipfileset dir="${src.root}/etc" includes="server-config.wsdd" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/src/com/l7tech/util/locator" includes="services.properties" prefix="WEB-INF/classes/com/l7tech/util/locator"/>
        </war>
        <!-- the client proxy jar -->
        <jar jarfile="${build.dir}/ClientProxy.jar" manifest="${src.root}/etc/ClientProxy.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/**" /> <!-- Well that was easy enough! -->
            </fileset>
        </jar>
        <!-- the console jar -->
        <jar jarfile="${build.dir}/ManagementConsole.jar" manifest="${src.root}/etc/ManagementConsole.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/**" /> <!-- Well that was easy enough! -->
            </fileset>
        </jar>
    </target>

    <!--
      ** Create the directory structure, copy the resources, libs and
      ** update version tokens
      -->
    <target name="prepare">
        <!-- time stamp -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <!-- lib -->
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib"
                excludes="**/CVS/*,**/**ant*,**/optional.jar,
                          **/*junit.jar, **/jsdk23.jar"/>
        </copy>

        <!-- the web.xml -->
        <copy todir="${build.etc}">
            <fileset dir="${src.root}/etc" includes="web.xml"/>
        </copy>

        <!-- Resources -->
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc">
                <!-- <include name="hibernate.cfg.xml"/> -->
                <include name="hibernate.properties"/>
                <include name="SSG.hbm.xml"/>
                <include name="com/l7tech/objectmodel/hibernatepersistence.properties"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="**/resources/*"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/proxy/resources/*"/>
            </fileset>
        </copy>

        <!-- html and other static web files -->
        <copy todir="${doc.root}">
            <fileset dir="${src.root}/web" includes="**/*"
                excludes="**/CVS/*"/>
        </copy>

        <mkdir dir="${javadoc.home}"/>
    </target>

    <!--
      ** main compile target
      -->
    <target name="compile" depends="prepare, configure_properties" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

     <!--
      ** token replacement target.
      ** This should be done ONLY for non distribution builds.
      -->
    <target name="configure_properties" unless="dist.build">

        <!--
        <echo message="The database url is '${database.connection.url}'"/>
        <echo message="The database url is '${database.user}'"/>
        <echo message="The database url is '${database.password}'"/>
        -->

        <replace file="${build.classes}/hibernate.properties"
            token="DB_URL" value="${database.connection.url}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_USER" value="${database.user}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_PASSWORD" value="${database.password}"/>
    </target>


    <!-- ** main compile target -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="tests" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="tests">
                <include name="**/resources/*"/>
            </fileset>
        </copy>
    </target>

    <target name="BROKEN-start-tomcat">
        <java classname="org.apache.catalina.startup.Bootstrap"
            dir="${tomcat.home}"
            fork="yes"
            jvm="${java.home}/bin/java"
            maxmemory="128m">
            <jvmarg value="-Djava.compiler=NONE"/>
            <sysproperty key="tomcat.home" value="${tomcat.home}"/>
            <arg value="-start"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="BROKEN-stop-tomcat">
        <java classname="org.apache.tomcat.startup.Tomcat"
            dir="${tomcat.home}"
            fork="yes">
            <sysproperty key="tomcat.home" value="${tomcat.home}"/>
            <arg value="-stop"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

</project>
