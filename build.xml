<?xml version="1.0" encoding="UTF-8"?>
<project name="UneasyRooster" default="dev" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Ant build file for UneasyRooster
    </description>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!-- set environment properties -->
    <property environment="env"/>
    <property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/>
    <property name="hostname" value="${env.HOSTNAME}"/>

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" location="${basedir}"/>

    <!-- get the version -->
    <property file="${src.root}/build.version"/>

    <!--
      Set default build properties
      Properties that were not specified in user properties
      Mainly DB info, compiler settings, etc.
    -->
    <property file="etc/build/default_build.properties"/>


    <property file="etc/build/install.properties"/>

    <!--
      Ivy initialization is global
    -->
    <ivy:settings file="etc/build/ivysettings.xml"/>    

    <!-- project classpath -->
    <path id="project.classpath">
        <fileset dir="lib/repository">
            <!--
              include bc provider before tarari_jce_provider since that
              contains old copies of the bc classes.
            -->
            <include name="**/bcprov-*.jar"/>
        </fileset>
        <fileset dir="lib/repository"/>
    </path>

    <path id="project.classpath.fortest">
        <path refid="project.classpath"/>
    </path>

    <!--
      Classpath for Idea form compiler
    -->
    <path id="uidesigner.classpath">
        <fileset dir="lib/tools">
            <include name="jdom.jar"/>
            <include name="asm.jar"/>
            <include name="asm-commons.jar"/>
            <include name="javac2.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for Idea form compiler
    -->
    <taskdef name="javac2t"
             classname="com.intellij.ant.Javac2"
             classpathref="uidesigner.classpath"/>

    <!--
      Task definition for Pack 200
    -->
    <taskdef name="pack200"
             classname="org.jdesktop.deployment.ant.pack200.Pack200Task"
    	     classpath="lib/tools/deployment-ant-pack200-1.0beta.jar"/>

    <!--
      Task definition for JDepend
    -->
    <taskdef name="jdepend"
             classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask"
             classpath="lib/tools/ant-jdepend.jar:lib/tools/jdepend-2.9.jar"/>

    <!--
      Task definition for FindBugs
    -->
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpath="lib/tools/findbugs-ant.jar"/>

    <macrodef name="javac2">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="debug" default="on"/>
        <attribute name="target" default="1.5"/>
        <attribute name="source" default="1.5"/>
        <attribute name="optimize" default="on"/>
        <attribute name="classpathref" default="project.classpath"/>
        <attribute name="include" default="**/*.form"/>
        <sequential>
            <javac2t
                    srcdir="@{srcdir}"
                    destdir="@{destdir}"
                    debug="@{debug}"
                    target="@{target}"
                    optimize="@{optimize}"
                    source="@{source}"
                    classpathref="@{classpathref}">
                <include name="@{include}"/>
            </javac2t>
        </sequential>
    </macrodef>

    <!--
      Task definition for XmlBeans
    -->
    <taskdef name="xmlbeancompiler"
             classname="org.apache.xmlbeans.impl.tool.XMLBean"
             classpath="lib/xbean.jar:lib/jsr173_1.0_api.jar"/>

    <!--
      Classpath for obfuscation
    -->
    <path id="zelix.classpath">
        <fileset dir="lib/tools">
            <include name="ZKM.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for class file obfuscation
    -->
    <taskdef name="Zelix" classname="ZKMTask" classpathref="zelix.classpath"/>

    <!--
      Classpath for svn
    -->
    <path id= "svnant.classpath"  >
        <fileset dir= "lib/tools" >
            <include name= "svn*.jar" />
        </fileset>
    </path>

    <!--
      Taskdef for svn
    -->
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svnant.classpath" />

    <!--
      Various bolt-on task definitions
    -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!--
      Patternset used for Bridge API javadoc
    -->
    <patternset id="bridgeapi.sources">
        <include name="com/l7tech/proxy/SecureSpanBridge.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeOptions.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeFactory.java"/>
    </patternset>

    <!--
      Patternset used for Manager API javadoc
    -->
    <patternset id="managerapi.sources">
        <include name="com/l7tech/console/SsmApplication*.java"/>
        <include name="com/l7tech/console/security/AuthenticationProvider.java"/>
        <include name="com/l7tech/console/security/InvalidHostCertificateException.java"/>
        <include name="com/l7tech/console/security/InvalidHostNameException.java"/>
        <include name="com/l7tech/console/security/LogonListener.java"/>
        <include name="com/l7tech/gateway/common/**/*.java"/>
        <include name="com/l7tech/identity/**/*.java"/>
        <include name="com/l7tech/objectmodel/**/*.java"/>
    </patternset>

    <!--
      License Generator library patternset (also ".")
    -->
    <patternset id="licensegenerator.libs">
        <include name="**/kunststoff.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/commons-lang-2.3.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/commons-collections-3.2.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/qname.jar"/>
        <include name="**/forms_rt.jar"/>
        <include name="**/xmlpad.jar"/>
        <include name="**/xmlpad-res.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/log4j-1.2.14.jar"/>
        <include name="**/bcprov*.jar"/>
        <include name="**/xalan-2.7.1.jar"/>
        <include name="**/serializer-xalan-2.7.1.jar"/>
        <include name="**/saaj-api.jar"/>
        <include name="**/saaj-impl.jar"/>
    </patternset>

    <!--
      Initialize build properties
    -->
    <target name="init" depends="init-full"/>
    <target name="init-full" depends="package.readversion,init-core"/>
    <target name="init-core">
        <echo level="info">
        java.specification.name=${java.specification.name}
        java.specification.vendor=${java.specification.vendor}
        java.specification.version=${java.specification.version}
        java.runtime.name=${java.runtime.name}
        java.runtime.version=${java.runtime.version}
        </echo>

        <property name="build.dir" value="${src.root}/build"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <property name="build.reports" value="${build.dir}/reports"/>
        <property name="build.installer" value="${build.dir}/installer"/>
        <property name="build.rpm" value="${build.dir}/rpm"/>

        <property name="src.installer" value="${src.root}/installer"/>
        <property name="dist.dir" value="${src.root}/dist"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>

        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>
        <property name="vendor.name" value="Layer 7 Technologies Inc."/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <!-- modules excluded from a production build -->
        <property name="project.module.excludes" value="skunkworks/build.xml"/>

        <!-- paths with dynamic components -->
        <path id="project.test.classpath">
            <path refid="project.classpath.fortest"/>
        </path>

        <available property="makensis.available" file="${build.install.compiler}"/>
        <condition property="makensis.enabled">
            <and>
                <isset property="makensis.available"/>
                <isset property="makensis"/>
            </and>
        </condition>

        <condition property="makerpm.available">
            <or>
                <available file="rpmbuild" filepath="/bin:/usr/bin:/usr/local/bin"/>
                <available file="rpm" filepath="/bin:/usr/bin:/usr/local/bin"/>
            </or>
        </condition>
        <condition property="makerpm.enabled">
            <and>
                <isset property="makerpm.available"/>
                <isset property="makerpm"/>
            </and>
        </condition>

        <!-- Performance test config -->
        <property name="test.perf.from" value="teamcity@tyan64.l7tech.com"/>
        <property name="test.perf.to" value=""/>

        <!-- Deprecated, but preserved in case used in anyones build.properties -->
        <property name="deploy.keys.password" value="blahblah"/>

        <!-- Defaults for development SSG deployments -->
        <property name="deploy.dir" value="${build.dir}"/>
        <property name="deploy.cluster.password" value="${deploy.keys.password}"/>
        <property name="deploy.db.username" value="gateway"/>
        <property name="deploy.db.password" value="7layer"/>
        <property name="deploy.db.name" value="ssg"/>
        <property name="deploy.db.host" value="localhost"/>
        <property name="deploy.db.port" value="3306"/>
       
        <condition property="echo.makerpm.enabled">
            <isset property="makerpm.enabled"/>
        </condition>
        <condition property="echo.makensis.enabled">
            <isset property="makensis.enabled"/>
        </condition>
        <property name="echo.makerpm.enabled" value="false" />
        <property name="echo.makensis.enabled" value="false" />
	<echo level="info">
        RPM Build Enabled               = ${echo.makerpm.enabled}
        Windows Installer Build Enabled = ${echo.makensis.enabled}
        </echo>

    </target>

    <!--
      Shortcut target for clean dev
    -->
    <target name="cleandev" depends="clean, dev"/>

    <!--
      Initialization for a dev build.
    -->
    <target name="init-dev">
        <property name="dev.build" value="true"/>
        <property file="build.number" prefix="install"/>
    </target>

    <!--
      Configure and invoke developer's build
      -->
    <target name="dev"
            description="Developer build (does not package)"
            depends="init-dev, compile-tests"/>

    <macrodef name="ivyinstall">
        <attribute name="file"/>
        <sequential>
            <ivy:resolve file="@{file}"/>

            <ivy:publish 
               artifactspattern=""
               srcivypattern="[module]-ivy-[revision].xml"
               resolver="localfile"
               status="release"
               haltonmissing="false"
               overwrite="true"/>
        </sequential>
    </macrodef>

    <target name="build-module-list" unless="build-path.text" depends="init-core">
        <ivy:buildlist reference="module-build-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="**/build.xml" excludes="${project.module.excludes}"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path" pathid="build-path.text"/>
    </target>

    <target name="build-module-list-all" unless="build-all-path.text" depends="init-core">
        <ivy:buildlist reference="module-build-all-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-all-path" pathid="build-all-path.text"/>
    </target>

    <macrodef name="ivy-echo-build-plan">
        <attribute name="refid"/>
        <attribute name="pathid"/>
        <sequential>
            <pathconvert property="@{pathid}" pathsep="${line.separator}            " dirsep="/" refid="@{refid}">
                <mapper type="regexp" from=".*[/\\](modules.*)/build.xml" to="\1"/>
            </pathconvert>
            <echo level="info">
        ===============================================================
          Ivy Modules (in dependency order)
        ===============================================================
            ${@{pathid}}
        ===============================================================
            </echo>
        </sequential>
    </macrodef>

    <target name="repository-install" description="Install an artifact to the build repository." depends="prepare.base">
        <fail unless="art">art is a required property (the artifact to install)</fail>
        <fail unless="org">org is a required property (organization for the new library)</fail>
        <fail unless="rev">rev is a required property (the artifact revision)</fail>
        
        <available file="${art}" property="repository.artifact.available"/>
        <fail unless="repository.artifact.available">The repository artifact could not be found.</fail>        

        <!-- build module/artifact name without revision -->
        <basename property="repository.module.artname1" file="${art}" suffix=".jar"/>
        <basename property="repository.module.artname2" file="${art}" suffix="-${rev}.jar"/>
        <condition property="mod" value="${repository.module.artname2}">
            <equals arg1="${repository.module.artname1}" arg2="${repository.module.artname2}-${rev}"/>
        </condition>
        <property name="mod" value="${repository.module.artname1}"/>

        <!-- 
          install to temp repository, format is:
           build/ivy/temp.repository/[organisation]/[artifact]-[revision].[ext] 
        -->
        <property name="repository.artifact.directory" value="${build.dir}/ivy/temp.repository/${org}"/>
        <mkdir dir="${repository.artifact.directory}"/> <!-- Create temp source directory -->
        <copy file="${art}" tofile="${repository.artifact.directory}/${mod}-${rev}.jar"/>
        
        <echo level="info">Loading Ivy settings for remote repositories.</echo>
        <ivy:settings id="ivy.remote" file="etc/build/ivysettings_remote.xml"/>    

        <!-- install to our repository -->
        <ivy:install settingsRef="ivy.remote" organisation="${org}" module="${mod}" revision="${rev}" from="localfile" to="local.repository" transitive="false"/>
    </target>

    <target name="repository-install-remote" description="Install an artifact to the build repository from a remote repository." depends="prepare.base">
        <fail unless="mod">mod is a required property (the module to install)</fail>
        <fail unless="org">org is a required property (organization for the new library)</fail>
        <fail unless="rev">rev is a required property (the artifact revision)</fail>
        <property name="trans" value="true"/>        

        <echo level="info">Deleting installation cache.</echo>        
        <property name="build.repo" value="${build.dir}/ivy/temp.repository/"/>
        <delete dir="${build.repo}" verbose="true"/>
        <mkdir dir="${build.repo}"/>

        <echo level="info">Loading Ivy settings for remote repositories.</echo>
        <ivy:settings id="ivy.remote" file="etc/build/ivysettings_remote.xml"/>    

        <!-- install to our temp repository under "build" -->
        <echo level="info">Downloading artifacts to cache.</echo>
        <ivy:install settingsRef="ivy.remote" organisation="${org}" module="${mod}" revision="${rev}" type="jar" from="libraries" to="localfile" transitive="${trans}"/>

        <!-- copy to main repository -->
        <echo level="info">Moving artifacts to repository.</echo>
        <copy todir="lib/repository" verbose="true">
          <fileset dir="${build.repo}">
            <include name="**/*.jar"/>            
            <include name="**/*.xml"/>      
            <present present="srconly" targetdir="lib/repository"/>      
          </fileset>
        </copy>
    </target>

    <presetdef name="modules">
        <subant buildpathref="module-build-path" >
            <property name="module.version.default.target" value="${build.version}"/>

            <propertyset dynamic="false">
                <propertyref name="build.junit.xmlformat"/>
                <propertyref prefix="module.obfuscate"/>
                <propertyref name="module.compile.excludes"/>
                <propertyref name="module.sign"/>
                <propertyref name="module.pack200"/>
                <propertyref name="src.root"/>
                <propertyref prefix="build.version"/>
                <propertyref prefix="build.em.version"/>
                <propertyref name="build.timestamp"/>
                <propertyref name="install.build.number"/>
                <propertyref name="build.host"/>
                <propertyref name="build.user" />
                <propertyref name="build.product"/>
                <propertyref name="build.vendor"/>
                <propertyref name="build.vendor.id"/>
                <propertyref name="ivy.settings.filepath"/>
                <propertyref name="module.official.build"/>
            </propertyset>
        </subant>
    </presetdef>

    <target name="retrieve" depends="prepare.base, build-module-list">
        <modules target="retrieve"/>
    </target>

    <target name="publish-main-modules" depends="prepare.base, build-module-list" unless="package.jars.notrequired">
        <modules target="publish"/>
    </target>

    <target name="publish-all-modules" depends="prepare.base, build-module-list-all" unless="package.jars.notrequired">
        <modules target="publish-all" buildpathref="module-build-all-path"/>
    </target>

    <target name="publish-all-modules-quick" depends="prepare.base, build-module-list-all">
        <modules target="publish-all-quick" buildpathref="module-build-all-path"/>
    </target>

    <target name="clean-modules" depends="build-module-list-all">
        <modules target="clean" buildpathref="module-build-all-path"/>
    </target>

    <macrodef name="xslt-update">
        <attribute name="style"/>
        <attribute name="file"/>
        <attribute name="data" default=""/>
        <sequential>
            <xslt in="@{file}"
                  out="@{file}.tmp"
                  style="@{style}"
                  force="true">
                <param name="data" expression="@{data}"/>
             </xslt>

            <move file="@{file}.tmp" tofile="@{file}" overwrite="true"/>
        </sequential>
    </macrodef>

    <!--
      Publish the latest dependency / artifact information to the build repository
    -->
    <target name="idea-inspections" depends="build-module-list">
        <property name="ivy.settings.filepath" location="etc/build/ivysettings_idea.xml"/>
        <mkdir dir="${build.etc}"/>
        <!-- Clean cache -->
        <delete dir="${build.dir}/ivycache"/>
        <mkdir dir="${build.dir}/ivycache"/>
        <delete dir="${build.dir}/idearepo"/>
        <mkdir dir="${build.dir}/idearepo"/>

        <echo level="info">Building IDEA modules.</echo>
        <modules target="idea"/>

        <!-- Aggregate all dependencies -->
        <concat destfile="${build.etc}/dependency.xml">
            <string value="&lt;project-dependencies&gt;"/>
            <fileset dir="modules" includes="**/build/etc/dependency.xml"/>
            <string value="&lt;/project-dependencies&gt;"/>
        </concat>

        <!-- Regenerate IDEA module for inspections (All modules) -->
        <pathconvert property="module.paths.xml.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[\\/](modules[\\/].*)" to="&lt;path file=&quot;\1&quot;/&gt;"/>
            <path>
                <dirset dir="modules">
                    <include name="**/src/main/java"/>
                    <include name="**/src/test/java"/>
                    <exclude name="skunkworks/**"/>
                </dirset>
            </path>
        </pathconvert>
        <echo file="${build.etc}/module-paths.xml">&lt;module-paths&gt;
                ${module.paths.xml.text}
            &lt;/module-paths&gt;
        </echo>
        <delete file="Inspections.iml"/>
        <xslt in="${build.etc}/module-paths.xml" out="Inspections.iml" style="etc/build/idea_module_inspections.xsl">
            <param name="data" expression="${build.etc}/dependency.xml"/>
        </xslt>
    </target>

    <!--
      Generate IDEA project/modules
    -->
    <target name="idea" depends="build-module-list-all" description="Generate IDEA project/modules">
        <property name="ivy.settings.filepath" location="etc/build/ivysettings_idea.xml"/>
        <echo level="info">Clear cache and configure repository settings. (${ivy.settings.filepath})</echo>
        <mkdir dir="${build.etc}"/>
        <!-- Clean cache -->
        <delete dir="${build.dir}/ivycache"/>
        <mkdir dir="${build.dir}/ivycache"/>
        <delete dir="${build.dir}/idearepo"/>
        <mkdir dir="${build.dir}/idearepo"/>

        <echo level="info">Building IDEA modules.</echo>
        <modules target="idea" buildpathref="module-build-all-path"/>

        <!-- Module for root content -->
        <copy file="etc/build/idea_module.xml" tofile="UneasyRooster.iml" overwrite="false"/>

        <echo level="info">Building IDEA project.</echo>
        <!-- Generate XML descriptor for modules -->
        <pathconvert property="modules.xml.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[/\\](modules.*.iml)" to="&lt;module file=&quot;\1&quot;/&gt;"/>
            <path>
                <fileset dir="modules" includes="**/*.iml"/>
            </path>
        </pathconvert>
        <echo file="${build.etc}/modules.xml">&lt;modules&gt;
                &lt;module file="UneasyRooster.iml"/&gt;
                ${modules.xml.text}
            &lt;/modules&gt;
        </echo>
        <!-- Transform to a project file -->
        <copy file="etc/build/idea_project.xml" tofile="UneasyRooster.ipr" overwrite="false"/>
        <xslt in="UneasyRooster.ipr" out="UneasyRooster.ipr.tmp" style="etc/build/idea_project.xsl">
            <param name="data" expression="${build.etc}/modules.xml"/>
            <param name="idea.javac.out" expression="${idea.javac.out}" if="idea.javac.out"/>
            <param name="idea.jdk" expression="${idea.jdk}" if="idea.jdk"/>
        </xslt>
        <move file="UneasyRooster.ipr.tmp" tofile="UneasyRooster.ipr" overwrite="true"/>

        <echo level="info">Building IDEA workspace.</echo>
        <property name="idea.teamcity.user" value="${user.name}"/>
        <copy file="etc/build/idea_workspace.xml" tofile="UneasyRooster.iws" overwrite="false"/>
        <xslt in="UneasyRooster.iws" out="UneasyRooster.iws.tmp" style="etc/build/idea_workspace.xsl">
            <param name="idea.teamcity.server" expression="${idea.teamcity.server}" if="idea.teamcity.server"/>
            <param name="idea.teamcity.user" expression="${idea.teamcity.user}"/>
            <param name="idea.teamcity.password" expression="${idea.teamcity.password}" if="idea.teamcity.password"/>
            <param name="idea.teamcity.remember" expression="${idea.teamcity.remember}" if="idea.teamcity.remember"/>
            <param name="idea.gateway.vmOptions" expression="-Dcom.l7tech.server.home=&quot;${deploy.dir}&quot; -Dcom.l7tech.server.runtime=&quot;${deploy.dir}&quot; -Dcom.l7tech.util.buildVersion=${build.version}"/>
            <param name="idea.client.vmOptions" expression="-Dcom.l7tech.util.buildVersion=${build.version}"/>
            <param name="idea.manager.vmOptions" expression="-Dcom.l7tech.util.buildVersion=${build.version}"/>
            <param name="idea.ems.vmOptions" expression="-Dcom.l7tech.util.buildVersion=${build.em.version} -Dcom.l7tech.ems.outputDbScript=overwrite -Dcom.l7tech.ems.development=true"/>
        </xslt>
        <move file="UneasyRooster.iws.tmp" tofile="UneasyRooster.iws" overwrite="true"/>
        <echo level="info">Generation complete.</echo>
    </target>

    <!--
      Delete IDEA project/modules
    -->
    <target name="idea-clean" depends="prepare.base" description="Delete IDEA project/modules">
        <patternset id="project.files.pattern">
            <include name="UneasyRooster.ipr"/>
            <include name="UneasyRooster.iws"/>
            <include name="UneasyRooster.iml"/>
            <include name="modules/*/*.iml"/>
            <include name="modules/*/*/*.iml"/>
            <include name="modules/*/*/*/*.iml"/>
        </patternset>
        <pathconvert property="project.files.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[/\\](.*\.i[mpw][lrs])" to="\1"/>
            <path>
                <fileset dir=".">
                    <patternset refid="project.files.pattern"/>
                </fileset>
            </path>
        </pathconvert>
        <echo level="info"> Project files for deletion:
                ${project.files.text}
        </echo>
        <input message="Delete project files?" validargs="y,n" addproperty="do.delete" />
        <condition property="do.exit">
            <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.exit">idea-clean, failing on user request.</fail>
        <delete>
            <fileset dir=".">
                <patternset refid="project.files.pattern"/>
            </fileset>
        </delete>
    </target>

    <!--
      Display information on a Jar file
    -->
    <target name="jarinfo">
        <fail unless="file">You must specify a JAR file [-Dfile=...]</fail>
        <echo level="info">Listing Jar file: ${file}</echo>
        <!-- This just stops idea showing an error for the undefined property -->
        <property name="file" value=""/>
        <jarlib-display file="${file}"/>
        <echo level="info">Listing complete (if theres no output you can try unzip -p ${file} META-INF/MANIFEST.MF)</echo>
    </target>

    <!--
      Print a list of available unit tests (or things that may be tests)
    -->
    <target name="summary" unless="test">
        <echo level="info">Possible test classes are: (use -Dtest=...)</echo>
        <pathconvert property="x" pathsep="${line.separator}" dirsep="/">
            <mapper type="regexp" from=".*[/\\](.*)\.class" to="\1"/>
            <path>
                <fileset dir="modules" includes="**/build/test-classes/**/*Test.class"/>
            </path>
        </pathconvert>
        <echo>${x}</echo>
        <echo>Use test-one -Dtest=x,y,z</echo>
    </target>

    <!--
      Configure and invoke unit tests
    -->
    <target name="test" description="Run JUnit tests" depends="test.work, report.test">
        <checkfail/>
    </target>

    <!--
      Run tests
    -->
    <target name="test.work" depends="publish-all-modules">
    </target>

    <!--
      Run all unit tests
    -->
    <target name="test.all" description="Run all JUnit tests" depends="test.work, report.test">
        <checkfail/>
    </target>

    <!--
      Run all unit tests and reports
    -->
    <target name="test.junit" description="Run all JUnit tests and reports" depends="test.work, report.test, report.jdepend, report.findbugs, report.dependencies, javadoc">
        <checkfail/>
    </target>

    <target name="test.perf.init" depends="prepare.base">
        <!-- Web server root directory. -->
        <if>
            <os family="unix"/>
            <then>
                <property name="test.perf.www.dir" location="/var/www/html"/>
            </then>
            <elseif>
                <os family="windows"/>
                <then>
                    <property name="test.perf.www.dir" location="${env.SYSTEMDRIVE}\Inetpub\wwwroot"/>
                </then>
            </elseif>
            <else>
                <fail message="Cannot assign web server root directory because OS family is unrecognized."/>
            </else>
        </if>
        <fail message="Web server root directory does not exist [test.perf.www.dir]: ${test.perf.www.dir}">
            <condition>
                <not>
                    <available file="${test.perf.www.dir}" type="dir"/>
                </not>
            </condition>
        </fail>

        <property name="test.perf.root.dir" location="${test.perf.www.dir}/testperf"/>

        <!-- Directory that stores all Japex test reports. -->
        <property name="test.perf.reports.dir" location="${test.perf.root.dir}/reports"/>
        <mkdir dir="${test.perf.reports.dir}"/>

        <!-- Directory for trend output. -->
        <property name="test.perf.trend.dir" location="${test.perf.root.dir}/trend"/>
        <mkdir dir="${test.perf.trend.dir}"/>

        <!-- Directory for regression output. -->
        <property name="test.perf.regression.dir" location="${test.perf.root.dir}/regression"/>
        <mkdir dir="${test.perf.regression.dir}"/>
    </target>

    <target name="test.perf.run" description="Run performance test to generate a Japex test report." depends="clean.test, test.perf.init, package.client, package.manager, package.gateway">
        <echo level="info">Running performance test.</echo>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="layer7-skunkworks" reference="module-build-path-skunk" onMissingDescriptor="skip">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-skunk" pathid="build-path-skunk-text"/>
        <modules target="publish-all-quick" buildpathref="module-build-path-skunk"/>

        <!-- Composes desired Japex report file name and final location. -->
        <tstamp>
            <format property="test.perf.report.suffix" pattern="yyyy'-'MM'-'dd'.'HHmm"/>
        </tstamp>
        <property name="test.perf.report.name" value="${build.version.major}.${build.version.minor}${build.version.subminor}_${test.perf.report.suffix}"/>
        <property name="test.perf.report.file" location="${test.perf.reports.dir}/${test.perf.report.name}.xml"/>

        <!-- Creates temporary directory for Japex to output test report.
             This is necessary because Japex is hardcoded to output folder and file names I don't like. -->
        <tstamp>
            <format property="test.perf.tmp.suffix" pattern="yyyyMMddHHmmss"/>
        </tstamp>
        <property name="test.perf.tmp.dir" location="${build.dir}/tmp-testperf-${test.perf.tmp.suffix}"/>
        <mkdir dir="${test.perf.tmp.dir}"/>

        <!-- classpath for the tested code -->
        <!--
          This is ugly due to the error that occurs when creating the cache path, which seems to be a failure to build the
          full path (including transitive dependencies)

          A cleaner approach may be to resolve all the dependencies of the skunkworks module when it is built.
        -->
        <ivy:cachepath organisation="com.l7tech" module="layer7-skunkworks" inline="true" conf="default,test" pathid="japex.skunk.path"/>
        <pathconvert property="japex.skunk.text" pathsep=":" dirsep="/" refid="japex.skunk.path"/>
        <pathconvert property="japex.class.text" pathsep=":" dirsep="/">
            <path>
                <pathelement location="${japex.skunk.text}"/>
                <fileset dir="${build.dir}">
                    <include name="Gateway.jar"/>
                </fileset>
                <fileset dir="${build.dir}/gatewaylibs"/>
            </path>
        </pathconvert>
        <echo>Japex test classpath:
            ${japex.class.text}
        </echo>

        <!-- classpath for the test runner -->
        <path id="test.perf.classpath">
            <fileset dir="${src.root}/lib">
                <include name="ant.jar"/>
                <include name="test/japex-1.1.jar"/>
                <include name="test/jdsl-1.1.jar"/>
                <include name="tools/junit-4.4.jar"/>
            </fileset>
        </path>

        <!-- Runs Japex to generate test report file. -->
        <java dir="." fork="true" classname="com.sun.japex.Japex" classpathref="test.perf.classpath">
            <jvmarg value="-Djapex.reportsDirectory=${test.perf.tmp.dir}"/>
            <jvmarg value="-Djapex.class.text=${japex.class.text}"/>
            <jvmarg value="-Dlayer7.name=${test.perf.report.name}"/>
            <jvmarg value="-Dlayer7.version=v${build.version.major}.${build.version.minor}${build.version.subminor}"/> <!-- letter 'v' to prevent Japex from parsing this as number -->
            <jvmarg value="-Dlayer7.notes=snapshot performance test"/>
            <jvmarg value="-Dsrc.root=${src.root}"/>
            <arg line="-nohtml"/>
            <arg line="-verbose"/>
            <arg line="modules/skunkworks/src/main/java/com/l7tech/test/performance/japex-config.xml"/>
        </java>

        <!-- Moves Japex test report to desired final location. -->
        <move tofile="${test.perf.report.file}">
            <fileset dir="${test.perf.tmp.dir}">
                <include name="**/report.xml"/>
            </fileset>
        </move>

        <delete dir="${test.perf.tmp.dir}"/>

        <echo level="info">Performance test complete.</echo>
    </target>

    <target name="test.perf.trend" description="Generate trend charts from Japex test reports." depends="clean.test, test.perf.init">
        <echo level="info">Running performance trend.</echo>
        <java fork="true" classname="com.l7tech.test.performance.TrendReport">
            <classpath>
                <pathelement location="modules/skunkworks/build/classes"/>
                <fileset dir="lib">
                    <include name="ant.jar"/>
                    <include name="**/jcommon-1.0.5.jar"/>
                    <include name="**/jfreechart-1.0.2.jar"/>
                    <include name="xercesImpl.jar"/>
                    <include name="**/commons-lang-2.3.jar"/>
                    <include name="test/japex-1.1.jar"/>
                </fileset>
                <fileset dir="build">
                    <include name="Gateway.jar"/>
                    <include name="gatewaylibs/layer7-*.jar"/>
                </fileset>
            </classpath>
            <arg value="-note=You can change benchmark list in &lt;code>UneasyRooster/build.xml&lt;/code> Ant target &lt;code>test.perf.trend&lt;/code>."/>
            <arg value="-note=Also see &lt;a href=&quot;../regression/index.html&quot;>Regression Report&lt;/a>"/>
            <arg value="-note=Also see &lt;a href=&quot;http://sarek.l7tech.com/mediawiki/index.php?title=Nightly_Performance_Regression#Post-implementation_Documentation&quot;>functional spec&lt;/a> on how to generate this"/>
            <arg value="-verbose"/>
            <arg value="Performance Trend Report"/>             <!-- title -->
            <arg value="${test.perf.trend.dir}"/>               <!-- outputDir -->
            <arg value="${test.perf.reports.dir}?today?-14D"/>  <!-- reportDir, include any Japex test report from last 14 days -->
            <!-- Add specific Japex test reports here. -->
            <arg value="${test.perf.reports.dir}/4.2_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.3_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.4_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.5_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.6_final.xml"/>
        </java>
        <echo level="info">Performance trend complete.</echo>
    </target>

    <target name="test.perf.regression" description="Generate regression report and e-mail from Japex test reports." depends="clean.test, test.perf.init" if="test.perf.to">
        <echo level="info">Running performance regression.</echo>
        <java classname="com.l7tech.test.performance.RegressionReport" fork="true">
            <classpath>
                <pathelement location="modules/skunkworks/build/classes"/>
                <fileset dir="lib">
                    <include name="**/mail-1.4*.jar"/>
                    <include name="**/smtp-1.4*.jar"/>
                    <include name="xercesImpl.jar"/>
                    <include name="**/commons-lang-2.3.jar"/>
                    <include name="test/japex-1.1.jar"/>
                </fileset>
                <fileset dir="build">
                    <include name="Gateway.jar"/>
                    <include name="gatewaylibs/layer7-*.jar"/>
                </fileset>
            </classpath>
            <jvmarg value="-Dmail.smtp.host=mail.l7tech.com"/>
            <arg value="-alwaysEMail"/>
            <arg value="-httpDir=testperf/regression"/>
            <arg value="-note=View this page online &lt;a href=&quot;index.html&quot;>here&lt;/a>."/>
            <arg value="-note=You can change threshold, benchmark list and e-mail recipients in &lt;code>UneasyRooster/build.xml&lt;/code> Ant target &lt;code>test.perf.regression&lt;/code>."/>
            <arg value="-note=Also see &lt;a href=&quot;../trend/index.html&quot;>Trend Report&lt;/a>."/>
            <arg value="-note=Also see &lt;a href=&quot;http://sarek.l7tech.com/mediawiki/index.php?title=Nightly_Performance_Regression#Post-implementation_Documentation&quot;>functional spec&lt;/a> on how to generate this"/>
            <arg value="-verbose"/>
            <arg value="Performance Regression Report"/>        <!-- title -->
            <arg value="${test.perf.regression.dir}"/>          <!-- outputDir -->
            <arg value="${test.perf.from}"/>                    <!-- sender -->
            <arg value="${test.perf.to}"/>                      <!-- toList -->
            <arg line="5 below avg"/>                           <!-- Highlight any 5% below average of benchmarks. -->
            <arg value="${test.perf.reports.dir}?today?-14D"/>  <!-- reportDir, include any Japex test report from last 14 days -->
            <!-- Add specific Japex test reports here, e.g.,
                 <arg value="${test.perf.reports.dir}/4.2_final.xml"/> -->
        </java>
        <echo level="info">Performance regression complete.</echo>
    </target>

    <target name="test.perf.nightly" description="Run nightly performance tests." depends="test.perf.run, test.perf.trend, test.perf.regression">
        <echo level="info">Nightly performance tests complete.</echo>
    </target>

    <!-- JDepend report -->
    <target name="report.jdepend" depends="package.report.jars">
        <echo level="info">Generating JDepend report.</echo>
        <mkdir dir="${build.reports}/jdepend"/>
        <mkdir dir="${build.reports}/teamcity"/>

        <mkdir dir="${build.dir}/layer7libs"/>
        <copy todir="${build.dir}/layer7libs" flatten="true">
            <fileset dir="${build.dir}">
                <include name="Client*.jar"/>
                <include name="Gateway*.jar"/>
                <include name="Manager*.jar"/>
                <include name="clientlibs/layer7-*"/>
                <include name="gatewaylibs/layer7-*"/>
                <include name="managerlibs/layer7-*"/>
            </fileset>
        </copy>

        <jdepend format="xml" outputfile="${build.reports}/jdepend/index.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <exclude name="EDU.*"/>
            <exclude name="edu.*"/>
            <exclude name="org.*"/>
            <exclude name="sun.*"/>
            <exclude name="snoozesoft.*"/>
            <exclude name="x0AcClassesPassword.*"/>
            <exclude name="x0AcClassesTLSClient.*"/>
            <exclude name="x0AcClassesXMLDSig.*"/>
            <exclude name="x0Assertion.*"/>
            <exclude name="net.*"/>
            <exclude name="com.whirlycott.*"/>
            <exclude name="com.tibco.*"/>
            <exclude name="com.tarari.*"/>
            <exclude name="com.sun.*"/>
            <exclude name="com.rsa.*"/>
            <exclude name="com.ncipher.*"/>
            <exclude name="com.mchange.*"/>
            <exclude name="com.jgoodies.*"/>
            <exclude name="com.japisoft.*"/>
            <exclude name="com.intellij.*"/>
            <exclude name="com.incors.*"/>
            <exclude name="com.ibm.*"/>
            <exclude name="com.chrysalisits.*"/>
            <exclude name="com.vladium.*"/>
            <exclude name="antlr"/>
            <exclude name="antlr.*"/>

            <classespath>
                <fileset dir="${build.dir}/layer7libs"/>
            </classespath>
        </jdepend>

        <xslt processor="trax"
              classpath="lib/tools/ant-trax.jar"
              style="etc/build/jdepend.xsl"
              basedir="${build.reports}/jdepend"
              destdir="${build.reports}/jdepend"
              includes="index.xml"
              />

        <zip destfile="${build.reports}/teamcity/jdepend.zip" basedir="${build.reports}/jdepend" />
    </target>

    <target name="report.findbugs.checkavailable">
        <available property="findbugs.isavailable" file="${findbugs.home}" type="dir"/>
    </target>

    <target name="report.dependencies" depends="prepare.base">
        <mkdir dir="${build.reports}/ivy"/>
        <mkdir dir="${build.reports}/teamcity"/>
        
        <ivy:resolve file="modules/gateway/server/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/console/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="manager_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/xmlvpnclient/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="xmlvpnclient_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/ems/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="ems_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/config/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_config_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/processcontroller/ivy.xml" conf="default" showprogress="false" log="quiet"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_processcontroller_dependencies.html" graph="false"/>

        <echoxml file="${build.reports}/ivy/index.html">
            <html>
                <head>
                    <title>Ivy Dependencies by SecureSpan Application.</title>
                </head>
                <body bgcolor="white">
                    <ul>
                        <li><a href="gateway_dependencies.html">Gateway</a></li>
                        <li><a href="manager_dependencies.html">Manager</a></li>
                        <li><a href="xmlvpnclient_dependencies.html">XML VPN Client</a></li>
                        <li><a href="ems_dependencies.html">Enterprise Service Manager</a></li>
                        <li><a href="gateway_config_dependencies.html">Gateway Configuration Client</a></li>
                        <li><a href="gateway_processcontroller_dependencies.html">Gateway Process Controller</a></li>
                    </ul>
                </body>
            </html>
        </echoxml>

        <zip destfile="${build.reports}/teamcity/ivydeps.zip" basedir="${build.reports}/ivy" />
    </target>

    <!--
      Build FindBugs report
    -->
    <target name="report.findbugs" depends="package.report.jars, report.findbugs.checkavailable" if="findbugs.isavailable">
        <echo level="info">Generating FindBugs report.</echo>
        <mkdir dir="${build.reports}/findbugs"/>
        <mkdir dir="${build.reports}/teamcity"/>

        <mkdir dir="${build.dir}/layer7libs"/>
        <copy todir="${build.dir}/layer7libs" flatten="true">
            <fileset dir="${build.dir}">
                <include name="Client*.jar"/>
                <include name="Gateway*.jar"/>
                <include name="Manager*.jar"/>
                <include name="clientlibs/layer7-*"/>
                <include name="gatewaylibs/layer7-*"/>
                <include name="managerlibs/layer7-*"/>
            </fileset>
        </copy>

        <!--
          Write project file for FindBugs
        -->
        <path id="findbugs.source.path">
            <fileset dir="${src.root}/modules" includes="**/src/main/java"/>
        </path>
        <path id="findbugs.target.class.path">
            <fileset dir="${build.dir}/layer7libs"/>
        </path>
        <path id="findbugs.aux.class.path">
            <fileset dir="${build.dir}/layer7libs">
                <include name="clientlibs/*"/>
                <include name="gatewaylibs/*"/>
                <include name="managerlibs/*"/>
            </fileset>
        </path>
        <pathconvert property="findbugs.target.class.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.target.class.path">
            <mapper type="regexp" from="(.*)" to="&lt;Jar&gt;\1&lt;/Jar&gt;"/>
        </pathconvert>
        <pathconvert property="findbugs.aux.class.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.aux.class.path">
            <mapper type="regexp" from="(.*)" to="&lt;AuxClasspathEntry&gt;\1&lt;/AuxClasspathEntry&gt;"/>
        </pathconvert>
        <pathconvert property="findbugs.source.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.source.path">
            <mapper type="regexp" from="(.*)" to="&lt;SrcDir&gt;\1&lt;/SrcDir&gt;"/>
        </pathconvert>
        <echo file="${build.etc}/findbugs.fbp">&lt;Project filename="${build.etc}/findbugs.fbp" projectName="UneasyRooster"&gt;
            ${findbugs.target.class.xml}
            ${findbugs.aux.class.xml}
            ${findbugs.source.xml}
            &lt;/Project&gt;
        </echo>
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="${build.reports}/findbugs/index.html"
                  jvmargs="-Xmx512m"
                  projectFile="${build.etc}/findbugs.fbp">
        </findbugs>

        <zip destfile="${build.reports}/teamcity/findbugs.zip" basedir="${build.reports}/findbugs" />
    </target>

    <!--
      Build JUnit report
    -->
    <target name="report.test" if="build.junit.xmlformat" depends="init">
        <!-- Create report -->
        <mkdir dir="${build.reports}"/>
        <junitreport todir="${build.reports}">
            <fileset dir="${src.root}/modules">
                <include name="**/build/reports/tests/TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports}/html"/>
        </junitreport>

        <!-- Package as build artifact -->
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/junit.zip" basedir="${build.reports}/html" />
    </target>

    <!--
      Clean data from running tests.
    -->
    <target name="clean.test" depends="init-core">
        <delete>
            <fileset dir="${src.root}/modules">
                <include name="**/build/reports/tests/*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/">
                <include name="WspWriterTest*"/>
            </fileset>
        </delete>
    </target>

    <!--
      Remove any build artifacts
    -->
    <target name="clean" depends="init-core,clean.test,clean-modules" description="Delete all build output.">
        <delete dir="${dist.dir}"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${build.rpm}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*/*"/>
                <include name="Client-*/*"/>
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete dir="${javadoc.home}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="stubdata*"/>
            </fileset>
        </delete>
        <delete file="${src.root}/tools/com/l7tech/tools/JarChecker.class"/>
        <property name="buildinfo.update" value="true"/>
    </target>

    <!--
        Javadoc target
    -->
    <target name="javadoc" depends="init,prepare" description="Generates Javadoc.">
        <delete dir="${javadoc.home}"/>
        <mkdir dir="${javadoc.home}"/>
        <path id="javadoc.src.path">
            <dirset dir="${src.root}/modules">
                <include name="*/src/main/java"/>
                <include name="*/*/src/main/java"/>
                <exclude name="skunkworks/src/main/java"/>
            </dirset>
        </path>
        <path id="javadoc.class.path">
            <fileset dir="lib/repository"/>
        </path>
        <javadoc sourcepathref="javadoc.src.path"
                 classpathref="javadoc.class.path"
                 destdir="${javadoc.home}"
                 packagenames="com.*"
                 windowtitle="Layer 7 Technologies API Specification"
                 doctitle="Layer 7 Technologies API Specification"
                 defaultexcludes="yes"
                 version="true"
                 use="true"
                 splitindex="true"
                 maxmemory="512m">
            <header><![CDATA[<b>Layer 7 Technologies Inc.<b><br><font size='-1'>UneasyRooster</font>]]></header>
            <bottom><![CDATA[<i>Copyright &#169; 2008 Layer 7 Technologies Inc. All Rights Reserved.</i>]]></bottom>
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
            <link href="http://static.springframework.org/spring/docs/2.5.x/api/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
            <link href="http://hc.apache.org/httpclient-3.x/apidocs/"/>
            <link href="http://ws.apache.org/commons/policy/apidocs/"/>
            <link href="http://www.bouncycastle.org/docs/docs1.5/"/>
            <link href="http://jaxen.codehaus.org/apidocs/"/>
            <link href="http://www.dom4j.org/apidocs/"/>
            <link href="http://jetty.mortbay.org/javadoc/"/>
            <link href="http://tomcat.apache.org/tomcat-6.0-doc/api/"/>
            <link href="http://www.jfree.org/jfreechart/api/javadoc/"/>
            <link href="http://www.toedter.com/en/jcalendar/api/"/>
            <tag name="noinspection" enabled="false"/>
        </javadoc>
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/javadoc.zip" basedir="${javadoc.home}" />
    </target>

    <!--
      Compile target
    -->
    <target name="compile"
            description="Compile the Java code and UI forms."
            depends="package.jars">
    </target>

    <target name="package.jars"
            description="Compile and package Java code and UI forms."
            depends="prepare,publish-main-modules"
            unless="package.jars.notrequired">
    </target>

    <!--
      Package target.
      Package the application (gateway, manager, client) into their
      Respective archives (jar).
      This target is invoked by other targets such as dist.
    -->
    <target name="package"
            description="Create the SSG JAR file and SSB/SSM installers."
            depends="package.gateway.all, package.manager, package.client, package.installclients, package.installgateway.work"/>


    <target name="package.gateway.all" depends="package.configwiz.all, package.ssgflasher, package.gateway, package.modules, pack.manager, package.api, package.em"/>

    <!--
      Build the windows installers without any dependencies.

      This target is a direct replacement for the old perl "make_installers.pl -b"

      NOTE: This is "broken" by design, it does exactly what the perl script used to do, you must
            build the ssg before running this target.
    -->
    <target name="make_installers"
            description="Create the SSG JAR file and SSXVC/SSM Win32 installers (was make_installers.pl -b)."
            depends="makerpm, makensis-unsafe, package.installclient.work, package.installmanager.work, package.installgateway.work">
    </target>

    <!--
      Generate a version string if not supplied
    -->
    <target name="package.readversion" depends="package.readlocal,package.readversion.securespan, package.readversion.em">
        <echo level="info">Build is using SS version: "${build.version}" [${build.rpmversion}-${build.version.revision}]</echo>
        <echo level="info">Build is using EM version: "${build.em.version}" [${build.em.rpmversion}-${build.em.version.revision}]</echo>
    </target>
    <target name="package.readlocal">
        <property file="${src.root}/local.build.version"/>        
    </target>
    <target name="package.readversion.securespan" unless="build.version" depends="package.defaultrpmversion">
        <!-- Set properties to keep IDEA happy -->
        <property name="build.version.major" value=""/>
        <property name="build.version.minor" value=""/>
        <property name="build.version.subminor" value=""/>
        <property name="build.version.label" value=""/>
        <property name="build.version.revision" value=""/>

        <condition property="build.version" value="${build.version.major}.${build.version.minor}${build.version.label}">
            <equals arg1="0" arg2="${build.version.subminor}"/>
        </condition>
        <property name="build.version" value="${build.version.major}.${build.version.minor}.${build.version.subminor}${build.version.label}"/>
        <property name="build.rpmversion" value="${build.version}"/>
    </target>
    <target name="package.readversion.em" unless="build.em.version" depends="package.defaultemrpmversion">
        <!-- Set properties to keep IDEA happy -->
        <property name="build.em.version.major" value=""/>
        <property name="build.em.version.minor" value=""/>
        <property name="build.em.version.subminor" value=""/>
        <property name="build.em.version.label" value=""/>
        <property name="build.em.version.revision" value=""/>

        <condition property="build.em.version" value="${build.em.version.major}.${build.em.version.minor}${build.em.version.label}">
            <equals arg1="0" arg2="${build.em.version.subminor}"/>
        </condition>
        <property name="build.em.version" value="${build.em.version.major}.${build.em.version.minor}.${build.em.version.subminor}${build.em.version.label}"/>
        <property name="build.em.rpmversion" value="${build.em.version}"/>
    </target>
    <target name="package.defaultrpmversion" if="build.version" unless="build.rpmversion">
        <property name="build.rpmversion" value="${build.version}"/>        
    </target>
    <target name="package.defaultemrpmversion" if="build.em.version" unless="build.em.rpmversion">
        <property name="build.em.rpmversion" value="${build.em.version}"/>        
    </target>

    <!--
      Get the version for this build from the BuildInfo util.
    -->
    <target name="package.readversion.unsafe" depends="package.readversion">
    </target>

    <!--
      Compile and package the SSB
    -->
    <target name="client" description="Build and package the SSXVC" depends="package.installclient"/>

    <!--
      Compile and package the SSM
    -->
    <target name="manager" description="Build and package the SSM" depends="package.installmanager"/>

    <!--
      Compile and package the SSG
    -->
    <target name="gateway" description="Build and package the SSG" depends="package.installgateway.work"/>

    <!--
      Compile and package just the ConfigWizards
    -->
    <target name="configwizard" description="Build and package just the config wizards" depends="package.configwiz.all"/>

    <!--
      Compile and package a single module and any modules that directly depend on it
    -->
    <target name="module" description="Build and package a single module (use with -Dmodule=...)" depends="prepare.base">
        <fail unless="module">module is a required property (the module to package)</fail>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist leaf="${module}" reference="module-build-path-single" onMissingDescriptor="skip" onlydirectdep="true">
            <fileset dir="modules" includes="**/build.xml" excludes="${project.module.excludes}"/>
        </ivy:buildlist>

        <ivy-echo-build-plan refid="module-build-path-single" pathid="module-build-path-single-text"/>
        <modules target="publish" buildpathref="module-build-path-single"/>
    </target>

    <!--
      Create a new modular assertion
    -->
    <target name="new-assertion" description="Generate a new modular assertion">
        <ant dir="modules/gateway/assertions"/>
    </target>

    <!--
      Clean development deploy of SSG
    -->
    <target name="cleandeploy" description="Delete deployed libraries/modules" depends="init-core">
        <echo level="info">Deleting web libraries</echo>
        <delete dir="${deploy.dir}/web/ssg/webadmin/applet"/>

        <echo level="info">Deleting modules</echo>
        <delete dir="${deploy.dir}/modules/assertions"/>

        <echo level="info">Deleting libraries</echo>
        <delete dir="${deploy.dir}/lib"/>
        <delete file="${deploy.dir}/Gateway.jar"/>
    </target>

    <!--
      Deploy SSG configuration files for development (to run with classes from IDE)
      This will not deploy the Manager Applet or any modular assertions
    -->
    <target name="deployconfig" description="Deploy configuration files for a development SSG (run from IDE)" depends="init,db.properties">
        <echo level="info">Creating deployment directories</echo>
        <mkdir dir="${deploy.dir}/web/ssg/webadmin/applet/lib"/>
        <mkdir dir="${deploy.dir}/var/attachments"/>
        <mkdir dir="${deploy.dir}/var/modules"/>
        <mkdir dir="${deploy.dir}/var/logs"/>
        <mkdir dir="${deploy.dir}/etc/conf"/>

        <echo level="info">Copying gateway configuration files</echo>
        <echo level="info">Copying configuration files</echo>
        <concat destfile="${deploy.dir}/etc/conf/node.properties" force="no" fixlastline="true">
            <string lastmodified="1970" value="#"/>
            <string lastmodified="1970" value="# Node properties file generated by ANT deploy (${build.timestamp})"/>
            <string lastmodified="1970" value="#"/>
            <string lastmodified="1970" value="node.db.config.main.host = ${deploy.db.host}"/>
            <string lastmodified="1970" value="node.db.config.main.port = ${deploy.db.port}"/>
            <string lastmodified="1970" value="node.db.config.main.name = ${deploy.db.name}"/>
            <string lastmodified="1970" value="node.db.config.main.user = ${deploy.db.username}"/>
            <string lastmodified="1970" value="node.db.config.main.pass = ${deploy.db.password}"/>
            <string lastmodified="1970" value="node.cluster.pass = ${deploy.cluster.password}"/>
        </concat>
        <echo level="info">Copying web files</echo>
        <copy file="${src.root}/web/index.html" todir="${deploy.dir}/web/ssg" preservelastmodified="true"/>

        <echo level="info">Finished copying gateway configuration files</echo>
    </target>

    <!--
      Deploy SSG for development
    -->
    <target name="deploy" description="Deploy a development SSG (run with ./run.sh gateway)" depends="package.gateway.ifrequired, deployconfig">
        <echo level="info">Creating deployment directories</echo>
        <mkdir dir="${deploy.dir}/lib"/>
        <mkdir dir="${deploy.dir}/var/logs"/>
        <mkdir dir="${deploy.dir}/modules/assertions"/>

        <echo level="info">Copying gateway files</echo>
        <echo level="info">Copying web files</echo>
        <copy file="${src.root}/web/index.html" todir="${deploy.dir}/web/ssg" preservelastmodified="true"/>
        <copy file="${build.dir}/layer7-gateway-console-applet.jar" todir="${deploy.dir}/web/ssg/webadmin/applet/" preservelastmodified="true"/>
        <delete>
            <fileset dir="${deploy.dir}/web/ssg/webadmin/applet/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${deploy.dir}/web/ssg/webadmin/applet/lib" preservelastmodified="true">
           <fileset dir="${build.dir}/managerappletlibs"/>
        </copy>

        <echo level="info">Copying modules</echo>
        <delete>
            <fileset dir="${deploy.dir}/modules/assertions"/>
        </delete>
        <copy todir="${deploy.dir}/modules/assertions" preservelastmodified="true">
            <fileset dir="${build.dir}/modules" includes="*.aar" excludes="*-client*.aar"/>
        </copy>

        <echo level="info">Copying libraries</echo>
        <delete>
            <fileset dir="${deploy.dir}/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${deploy.dir}/lib" preservelastmodified="true">
           <fileset dir="${build.dir}/gatewaylibs"/>
        </copy>
        <copy file="${build.dir}/Gateway.jar" todir="${deploy.dir}/" preservelastmodified="true"/>
        <echo level="info">Finished copying gateway files</echo>
    </target>

    <target name="pack.manager" depends="pack.manager.compress"/>

    <macrodef name="pack-mac">
        <attribute name="jarfile"/>
        <attribute name="packfile" default="@{jarfile}.pack.gz"/>
        <sequential>
            <pack200 src="@{jarfile}" destfile="@{packfile}" segmentlimit="-1" gzipoutput="true"/>
        </sequential>
    </macrodef>

    <target name="pack.manager.compress" depends="package.manager" if="pack200">
        <pack-mac jarfile="${build.dir}/layer7-gateway-console-applet.jar"/>

        <!--
          Note that the build does not fail if any of these are missing, but a
          warning is logged.
        -->
        <pack-mac jarfile="${build.dir}/managerappletlibs/activation-1.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/antlr-2.7.7-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/aopalliance-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/apache-harmony-asn1-0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/browser-launcher-1.0rc4.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/commons-codec-1.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/commons-collections-3.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/commons-httpclient-3.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/commons-lang-2.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/commons-logging-1.1.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/concurrent-1.3.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/dom4j-1.6.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/ehcache-1.2.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/forms_rt-7.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/hibernate-core-3.3.1.GA.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jaxb-api-2.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jaxb-impl-2.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jaxen-1.1.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jaxws-api-2.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jaxws-rt-2.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jcalendar-1.3.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jcommon-1.0.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jfreechart-1.0.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jsr173-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/jsr181-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/kunststoff-2.0.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/layer7-uddi-lib-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/log4j-1.2.14.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/looks-1.1.3.jar"/>
        <!-- 
          This JAR is signed in a way that is not compatible with pack200
        -->
        <!-- <pack-mac jarfile="${build.dir}/managerappletlibs/mail-1.4.1.jar"/> -->
        <pack-mac jarfile="${build.dir}/managerappletlibs/nekohtml-0.9.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/persistence-api-3.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/policy-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/resolver-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/saaj-api-1.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/saaj-impl-1.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/servlet-api-2.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/sjsxp-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-aop-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-beans-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-context-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-core-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-orm-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-tx-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/spring-web-2.5.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/whirlycache-1.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/wsdl4j-1.6.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xalan-2.7.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xalan-serializer-2.7.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xbean-2.2.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xbean-saml-1.1-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xbean-saml-2.0-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xbean-xenc-xmldsig-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xercesImpl-2.9.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xmlpad-3.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xmlpad-res-3.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xss4j.00.patch-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerappletlibs/xss4j-1.0.jar"/>
    </target>

    <!--
      See if it looks like packaging is required
    -->
    <target name="package.gateway.checkrequired">
        <uptodate property="package.gateway.notrequired">
            <srcfiles dir="." includes="modules/*/src/main/java/**/*, etc/**/*, modules/gateway/*/src/main/java/**/*, modules/gateway/assertions/*/src/main/java/**/*, modules/**/ivy.xml, modules/**/build.xml"/>
            <mapper type="merge" to="${build.dir}/Gateway.jar"/>
        </uptodate>
        <condition property="compile.forms.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="ssg.only">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="manager.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="package.jars.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
    </target>

    <!--
      Package the SSG if it looks like something changed
    -->
    <target name="package.gateway.ifrequired" depends="package.gateway.checkrequired, package.gateway, package.readversion, pack.manager, package.modules" unless="package.gateway.notrequired">
    </target>

    <!--
      Package the SSG (JAR).
    -->
    <target name="package.gateway" depends="package.jars" unless="package.gateway.notrequired">
        <!-- packaging process controller libs -->
        <mkdir dir="${build.dir}/processcontrollerlibs"/>
        <delete>
            <fileset dir="${build.dir}/processcontrollerlibs" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/processcontrollerlibs">
            <fileset dir="modules/gateway/processcontroller/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/processcontroller/build/layer7-gateway-processcontroller.jar" tofile="${build.dir}/Controller.jar"/>

        <!-- packaging gateway libs -->
        <mkdir dir="${build.dir}/gatewaylibs"/>
        <delete>
            <fileset dir="${build.dir}/gatewaylibs" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/gatewaylibs">
            <fileset dir="modules/gateway/server/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/server/build/layer7-gateway-server.jar" tofile="${build.dir}/Gateway.jar"/>
    </target>

    <!--
      Package the Enterprise Manager (JAR).
    -->
    <target name="package.em" depends="package.jars" unless="ssg.only">
        <!-- packaging gateway libs -->
        <mkdir dir="${build.dir}/enterprisemanagerlibs"/>
        <delete>
            <fileset dir="${build.dir}/enterprisemanagerlibs" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/enterprisemanagerlibs">
            <fileset dir="modules/ems/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/ems/build/layer7-ems.jar" tofile="${build.dir}/EnterpriseManager.jar"/>
    </target>

    <target name="package.modules" depends="package.jars" unless="package.jars.notrequired">
        <ivy:resolve file="modules/gateway/assertions/ivy-modular-assertions.xml" showprogress="false" transitive="false" conf="default,client,optional" log="quiet"/>

        <delete dir="${build.dir}/modules"/>
        <mkdir dir="${build.dir}/modules"/>
        <ivy:retrieve conf="default,client" pattern="${build.dir}/modules/[artifact]-[revision].[ext]"/>
        
        <delete dir="${build.dir}/modules-optional"/>
        <mkdir dir="${build.dir}/modules-optional"/>
        <ivy:retrieve conf="optional" pattern="${build.dir}/modules-optional/[artifact]-[revision].[ext]"/>
    </target>

    <!--
      Task to generate JAR file manifests with classpaths.
    -->
    <macrodef name="generate-manifest">
        <attribute name="propertyPrefix"/>
        <attribute name="filename"/>
        <attribute name="pathPrefix" default=""/>
        <element name="section" optional="yes"/>
        <sequential>
            <fileset id="@{propertyPrefix}.lib.fileset" dir="${src.root}/lib" casesensitive="yes">
                <patternset refid="@{propertyPrefix}.libs"/>
            </fileset>
            <pathconvert property="@{propertyPrefix}.libs.path" pathsep=" " dirsep="/" refid="@{propertyPrefix}.lib.fileset">
                <mapper type="regexp" from=".*[/\\](.*)\.jar" to="lib/\1.jar"/>
            </pathconvert>
            <copy todir="${build.etc}">
                <fileset dir="${src.root}/etc" includes="@{filename}"/>
            </copy>
            <manifest file="${build.etc}/@{filename}" mode="update">
                <attribute name="Implementation-Title" value="${app.name}"/>
                <attribute name="Implementation-Version" value="${build.version.major}.${build.version.minor}"/>
                <attribute name="Implementation-Vendor" value="${vendor.name}"/>
                <attribute name="Class-Path" value="@{pathPrefix} ${@{propertyPrefix}.libs.path}"/>
                <section/>
            </manifest>
        </sequential>
    </macrodef>

    <!--
      Package the SSB (JAR)
    -->
    <target name="package.client" unless="ssg.only" depends="package.client.jar"/>
    <target name="package.client.jar" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/clientlibs"/>
        <delete>
            <fileset dir="${build.dir}/clientlibs" includes="layer7-*"/>            
        </delete>
        <copy todir="${build.dir}/clientlibs">
            <fileset dir="modules/xmlvpnclient/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/xmlvpnclient/build/layer7-xmlvpnclient.jar" tofile="${build.dir}/Client.jar"/>
    </target>

    <!--
      Package the SSM (JAR)
    -->
    <target name="package.manager.jar" depends="package.jars" unless="manager.notrequired">
        <mkdir dir="${build.dir}/managerlibs"/>
        <delete>
            <fileset dir="${build.dir}/managerlibs" includes="layer7-*"/>            
        </delete>
        <copy todir="${build.dir}/managerlibs">
            <fileset dir="modules/gateway/console/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <mkdir dir="${build.dir}/managerappletlibs"/>
        <copy todir="${build.dir}/managerappletlibs">
            <fileset dir="modules/gateway/console-applet/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/console/build/layer7-gateway-console.jar" tofile="${build.dir}/Manager.jar"/>
        <copy file="modules/gateway/console-applet/build/layer7-gateway-console-applet.jar" todir="${build.dir}"/>
    </target>

    <target name="package.manager" depends="package.manager.jar" unless="manager.notrequired">
    </target>

    <target name="package.report.jars" depends="package.client.jar,package.gateway,package.manager.jar"/>

    <target name="package.skunkworks" depends="prepare.base">
        <ivy:buildlist reference="module-build-path-skunkworks" onMissingDescriptor="skip" root="layer7-skunkworks">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-skunkworks" pathid="build-path.text"/>
        <modules buildpathref="module-build-path-skunkworks" target="publish"/>
    </target>

    <!--
      Package the RandomXmlGenerator (Always invoked by hand)
    -->
    <target name="package.randomxmlgenerator"
            description="Compile and package the RandomXmlGenerator"
            depends="package.skunkworks">
    </target>

    <!--
      Package GClient (Always invoked by hand)
    -->
    <target name="package.gclient"
            depends="package.skunkworks">
    </target>

    <!--
      Package UDDI tool (Always invoked by hand)
    -->
    <target name="package.udditool"
            depends="package.skunkworks">
    </target>

    <target name="package.internal" depends="prepare.base">
        <ivy:buildlist reference="module-build-path-internal" onMissingDescriptor="skip" root="layer7-internal">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-internal" pathid="build-path.text"/>
        <modules buildpathref="module-build-path-internal" target="publish"/>
    </target>

    <!--
      Package the LicenseGenerator (Aways invoked by hand)
    -->
    <target name="package.licensegenerator"
            description="Compile and packate the License Generator (also testpackage.licensegenerator)"
            depends="package.internal"/>

    <!--
      Package the AuditSignatureChecker (Aways invoked by hand)
    -->
    <target name="package.auditsignaturechecker"
            description="Compile and package the Audit Signature Checker."
            depends="package.internal"/>

    <!--
      Build the windows installers
    -->
    <target name="package.installclients" unless="ssg.only" depends="package.installclient, package.installmanager">
    </target>

    <!--
      Build the SSB windows installer
    -->
    <target name="package.installclient" depends="package.client, package.installclient.work"/>
    <target name="package.installclient.work" depends="package.installclient.work.main, package.installclient.work.nsis"/>
    <target name="package.installclient.work.main" depends="init, package.readversion.unsafe">
        <!-- Copy Client JAR and its lib JARs -->
        <delete dir="${build.installer}/Client-${build.version}" failonerror="false"/>
        <delete file="${build.installer}/Client-${build.version}.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Client-${build.version}/lib/assertions"/>
        <copy todir="${build.installer}/Client-${build.version}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.dir}/clientlibs">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy todir="${build.installer}/Client-${build.version}/lib/assertions">
            <fileset dir="${build.dir}/modules" includes="*-client-*.aar"/>
        </copy>
        <copy file="${build.dir}/Client.jar"
              tofile="${build.installer}/Client-${build.version}/Client.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Client.sh"
              tofile="${build.installer}/Client-${build.version}/Client.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Client-${build.version}/Client.sh" perm="755"/>

        <!-- Config files -->
        <copy file="${src.root}/modules/proxy/src/main/resources/com/l7tech/proxy/resources/logging.properties"
              todir="${build.installer}/Client-${build.version}"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Help files -->
        <unzip src="${src.root}/webhelp/ssb/help.zip"
               dest="${build.installer}/Client-${build.version}"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Client-${build.version}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Client-${build.version}/Client.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Client-${build.version}/**/*"/>
                <exclude name="Client-${build.version}/Client.sh"/>
            </tarfileset>
        </tar>
    </target>
    
    <target name="package.installclient.work.nsis" if="makensis.enabled" depends="package.installclient.work.main">
        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${src.installer}/proxy/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/DPACKAGE_REL=installer\Client-${build.version}"/>
            <arg value="/DOUTPUT_DIR=../../../build/installer"/>
            <arg value="/DMUI_VERSION=${build.version}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="Client.nsi"/>
        </exec>

    </target>

    <!--
      Build the SSM windows installer
      - Copy required JAR files
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
      - Create distribution TAR
    -->
    <target name="package.installmanager" depends="package.manager, package.installmanager.work"/>
    <target name="package.installmanager.work" depends="package.installmanager.work.main, package.installmanager.work.nsis"/>
    <target name="package.installmanager.work.main" depends="package.readversion.unsafe">
        <!-- Copy Manager JAR and its lib JARs -->
        <delete dir="${build.installer}/Manager-${build.version}" failonerror="false"/>
        <delete file="${build.installer}/Manager-${build.version}.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Manager-${build.version}/lib"/>
        <copy todir="${build.installer}/Manager-${build.version}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.dir}/managerlibs">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="${build.dir}/Manager.jar"
              tofile="${build.installer}/Manager-${build.version}/Manager.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Manager.sh"
              tofile="${build.installer}/Manager-${build.version}/Manager.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Manager-${build.version}/Manager.sh" perm="555"/>

        <!-- Config files -->
        <copy file="${src.root}/modules/gateway/console/src/main/resources/com/l7tech/console/resources/logging.properties"
              todir="${build.installer}/Manager-${build.version}"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Help files -->
        <unzip src="${src.root}/webhelp/ssm/help.zip"
               dest="${build.installer}/Manager-${build.version}"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Manager-${build.version}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Manager-${build.version}/Manager.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Manager-${build.version}/**/*"/>
                <exclude name="Manager-${build.version}/Manager.sh"/>
            </tarfileset>
        </tar>
    </target>
    <target name="package.installmanager.work.nsis" if="makensis.enabled" depends="package.installmanager.work.main">
        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${src.installer}/console/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/DPACKAGE_REL=installer\Manager-${build.version}"/>
            <arg value="/DOUTPUT_DIR=../../../build/installer"/>
            <arg value="/DMUI_VERSION=${build.version}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="Manager.nsi"/>
        </exec>
    </target>

    <!-- comment out package.installgateway.work.nsis depends item, bug 3703, as Gateway exe not supported post-3.7 -->
    <!-- target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.nsis, package.installgateway.work.rpm"/ -->

    <target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.rpm, package.em.tar, package.installem.work.rpm"/>
    <!--
      Build the SSG windows installer
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
    -->
    <target name="package.installgateway.work.nsis" depends="package.readversion.unsafe"  if="makensis.enabled">
        <!-- Update NSI file -->
        <generate-nsi nsiFile="SSG.nsi"
                      nsiPath="server/win32/"
                      propertyPrefix="gateway"
                      libDir="gatewaylibs"/>

        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${src.installer}/server/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="../../../build/etc/SSG.nsi"/>
        </exec>
    </target>

    <target name="package.installgateway.work.rpm.check" if="makerpm.enabled" depends="prepare.base">
        <available property="package.installgateway.work.rpm.sourceavailable" file="${tarball}"/>
        <available property="package.installgateway.work.rpm.appliance.sourceavailable" file="${appliance-tarball}"/>
        <condition property="package.installgateway.work.rpm.x86_64.appliance.required">
          <and>
            <isset property="install.jdk64.tar.gz"/>
            <available file="${install.jdk64.tar.gz}"/>
            <isset property="package.installgateway.work.rpm.appliance.sourceavailable"/>
          </and>
        </condition>
    </target>

    <!--
      Set the release for the build, by default this is the date with "svn" prepended.

      Other (optional) additions could be:
        - .rc1 (release candidate)
        - .m1  (milestone)

      This gets added after any existing release number in the spec file (e.g 0.1.svn20060201)
    -->
    <target name="package.checkrelease" unless="ssg.install.official">
        <property name="build.release" value=".svn${DSTAMP}"/>
    </target>

    <!--
      Create the SSG RPM (Core)
    -->
    <target name="package.installgateway.work.rpm.core" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.rpmspec" value="etc/ssg.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${tarball}</echo>
        <copy file="${tarball}" tofile="${build.rpm}/SOURCES/ssg.tar.gz"/>
        <copy file="${package.installgateway.work.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^[a-zA-Z &quot;]{0,80}Layer 7 SecureSpan\(tm\) Gateway v)[0-9\._\-a-z]{1,10}" replace="${build.version}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssg.spec" topDir="${build.rpm}" command="-bb --target noarch" failOnError="true"/>

        <!--<condition property="package.installgateway.work.rpm.x86_64.required">-->
          <!--<isset property="install.jdk64.tar.gz"/>-->
        <!--</condition>-->
    </target>

    <target name="package.installgateway.work.rpm.appliance" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.appliance.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.appliance.rpmspec" value="etc/appliance/ssg-appliance.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.appliance.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${appliance-tarball}</echo>
        <echo level="info">Using source JDK: ${install.jdk.tar.gz}</echo>
        <copy file="${appliance-tarball}" tofile="${build.rpm}/SOURCES/ssg-appliance.tar.gz"/>
        <copy file="${install.jdk.tar.gz}" tofile="${build.rpm}/SOURCES/jdk.tar.gz"/>
        <copy file="${package.installgateway.work.appliance.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssg-appliance.spec" topDir="${build.rpm}" command="-bb --target i386" failOnError="true"/>
    </target>

    <target name="package.installgateway.work.rpm.stig" depends="init, package.readversion, package.checkrelease" if="makerpm.enabled">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Prepare the source tarball -->
        <mkdir dir="${build.rpm}/SOURCES/temp"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg/etc"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg/bin"/>
        <copy file="etc/stig/harden.sh" todir="${build.rpm}/SOURCES/temp/ssg/bin"/>
        <tar destfile="${build.rpm}/SOURCES/ssg-security.tar.gz" basedir="${build.rpm}/SOURCES/temp" compression="gzip"/>
        <delete dir="${build.rpm}/SOURCES/temp"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.stig.rpmspec" value="etc/stig/ssg-security.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.stig.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${build.rpm}/SOURCES/ssg-security.tar.gz</echo>
        <copy file="${package.installgateway.work.stig.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssg-security.spec" topDir="${build.rpm}" command="-bb --target noarch" failOnError="true"/>
    </target>

    <!--
      Create the Enterprise Manager RPM
    -->
    <target name="package.installem.work.rpm.check" if="makerpm.enabled" depends="init">
        <available property="package.installem.work.rpm.sourceavailable" file="${emtarball}"/>
    </target>
    <target name="package.installem.work.rpm.core" depends="package.installem.work.rpm.check, package.readversion, package.checkrelease" if="package.installem.work.rpm.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- build -->
        <property name="build.release" value=""/>
        <property name="package.installem.work.rpmspec" value="etc/enterprisemanager/ssem.spec"/>
        <echo level="info">Using spec file : ${package.installem.work.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${emtarball}</echo>
        <copy file="${emtarball}" tofile="${build.rpm}/SOURCES/ssem.tar.gz"/>
        <copy file="${package.installem.work.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.em.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.em.version.revision}${build.release}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssem.spec" topDir="${build.rpm}" command="-bb --target noarch" failOnError="true"/>
    </target>

    <target name="securityrpm" depends="package.installgateway.work.rpm.stig">
        <move todir="${dist.dir}" flatten="true">
            <fileset dir="${build.rpm}/RPMS">
                <include name="*/*.rpm"/>
            </fileset>
        </move>
    </target>

    <!--
      Create the SSG RPM (x86_64)
    -->
    <target name="package.installgateway.work.rpm.appliance.x86_64" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.x86_64.appliance.required">
        <echo level="info">Using source JDK: ${install.jdk64.tar.gz}</echo>
        <copy file="${install.jdk64.tar.gz}" tofile="${build.rpm}/SOURCES/jdk.tar.gz" overwrite="true"/>
        <rpm specFile="ssg-appliance.spec" topDir="${build.rpm}" command="-bb --target x86_64" failOnError="true"/>
    </target>

    <!--
      Create the SSG RPM
    -->
    <target name="package.installgateway.work.rpm" depends="package.installgateway.work.rpm.core, package.installgateway.work.rpm.appliance, package.installgateway.work.rpm.appliance.x86_64" if="makerpm.enabled">
        <echo level="info">RPM build completed.</echo>
    </target>

    <!--
      Create the Enterprise Manager RPM
    -->
    <target name="package.installem.work.rpm" depends="package.installem.work.rpm.core" if="makerpm.enabled">
        <echo level="info">Enterprise Manager RPM build completed.</echo>
    </target>

    <!-- Package the ssg flasher utility -->
    <target name="package.ssgflasher" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/migration"/>
        <mkdir dir="${build.dir}/migration/lib"/>
        <mkdir dir="${build.dir}/migration/cfg"/>

        <copy todir="${build.dir}/migration">
            <fileset dir="${src.root}/etc">
                <include name="ssgmigration.sh"/>
                <include name="ssgmigration.cmd"/>
                <include name="migrationlogging.properties"/>
            </fileset>
        </copy>

        <chmod file="${build.dir}/migration/ssgmigration.sh" perm="755"/>

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-gateway-config" showprogress="false" conf="default" log="quiet"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-utility" revision="latest.integration" property="module.utility.version"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-gateway-config" revision="latest.integration" property="module.gateway.config.version"/>

        <jar jarfile="${build.dir}/migration/SSGMigration.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.flasher.FlashUtilityLauncher"/>
            </manifest>
        </jar>

        <copy todir="${build.dir}/migration/lib">
            <fileset dir="modules/utility/build">
                <include name="layer7-utility-*.jar"/>
            </fileset>
        </copy>
    </target>

    <!--
      Package all configuration wizards
    -->
    <target name="package.configwiz.all" depends="package.configwiz, package.systemconfigwiz"/>

    <!--
      Package the main configuration wizard (JAR)
    -->
    <target name="package.configwiz" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/configwizard/lib"/>

        <copy todir="${build.dir}/configwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssgconfig.cmd"/>
                <include name="ssgconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-gateway-config" showprogress="false" conf="default" log="quiet"/>
        <ivy:retrieve inline="true" organisation="com.l7tech" module="layer7-gateway-config" conf="default" pattern="${build.dir}/configwizard/lib/[artifact]-[revision].[ext]"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-utility" revision="latest.integration" property="module.utility.version"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-gateway-config" revision="latest.integration" property="module.gateway.config.version"/>

        <jar jarfile="${build.dir}/configwizard/ConfigWizard.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.client.Main"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigMasterPassphrase.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.MasterPassphraseChanger"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigProcessController.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="lib/layer7-gateway-config-${module.gateway.config.version}.jar"/> 
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.client.beans.trust.TrustInterviewer"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/DatabaseUpgrader.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.DatabaseUpgrader"/>
            </manifest>
        </jar>

    </target>

    <!--
      Package the system configuration wizard (JAR)
    -->
    <target name="package.systemconfigwiz" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/sysconfigwizard"/>
        <mkdir dir="${build.dir}/sysconfigwizard/lib"/>
        <mkdir dir="${build.dir}/sysconfigwizard/configfiles"/>

        <copy todir="${build.dir}/sysconfigwizard/lib">
            <fileset dir="modules/utility/build">
                <include name="layer7-utility*.jar"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc/appliance">
                <include name="ssg_sys_config.pl"/>
                <include name="systemconfig.sh"/>
            </fileset>
        </copy>

         <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc/">
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <jar jarfile="${build.dir}/sysconfigwizard/SystemConfigWizard.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility.jar"/>
                <attribute name="X-Layer7-Jar" value="../../Gateway/runtime/Gateway.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.server.config.systemconfig.SysConfigWizardLauncher"/>
            </manifest>
        </jar>
    </target>

    <!--
      Package the signed Layer 7 API (JAR)
    -->
    <target name="package.api" depends="package.jars">
        <!--
            Sign Layer7 API jar
        -->
        <copy file="modules/gateway/api/build/layer7-api.jar" tofile="${build.dir}/layer7-api.jar"/>

        <mkdir dir="${build.dir}/docs"/>

        <!--
          Accompanying javadoc for layer7-api
        -->
        <javadoc
                destdir="${build.dir}/docs/layer7-api"
                version="true"
                author="false"
                use="true"
                windowtitle="Layer 7 External API">

             <!--links to j2se & j2ee javadocs provided so they can be linked to from within the layer7-api javadoc -->
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://java.sun.com/javaee/5/docs/api/"/>

            <fileset dir="modules/gateway/api/src/main/java">
                <!--
                  Leave some classes undocumented; they appear in the api jar,
                  but aren't supposed to be used by 3rd party devlopers
                -->
                <exclude name="com/l7tech/policy/assertion/ext/CustomAuditor.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/Category.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditor.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionUI.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/EditListener.java"/>
            </fileset>
        </javadoc>
    </target>

    <target name="bridgeapi.javadoc" depends="init">
        <mkdir dir="${build.dir}/docs"/>
        <javadoc
                destdir="${build.dir}/docs/bridge-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Technologies API Specification"
                doctitle="Layer 7 Technologies API Specification"
                header="&lt;b&gt;Layer 7 Technologies&lt;/b&gt;"
                bottom="&lt;font size=-1&gt;Copyright (c) 2007, Layer 7 Technologies&lt;/font&gt;"
                 >

            <fileset dir="${src.root}/modules/proxy/src/main/java" defaultexcludes="yes">
                <patternset refid="bridgeapi.sources"/>
            </fileset>

            <!--<classpath refid="project.classpath"/>-->
        </javadoc>
    </target>

    <target name="managerapi.javadoc" depends="init">
        <delete dir="${build.dir}/docs/manager-api"/>
        <mkdir dir="${build.dir}/docs/manager-api"/>
        <javadoc
                destdir="${build.dir}/docs/manager-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Manager API"
                maxmemory="1024m">

            <fileset dir="${src.root}/modules/gateway/console/src/main/java" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>

            <classpath refid="project.classpath"/>
        </javadoc>
    </target>

    <target name="package.managerapi" depends="package.manager.jar,managerapi.javadoc" description="Package the Manager API for distribution.">
        <zip destfile="${build.dir}/ManagerAPI-${build.version}.zip">
            <zipfileset dir="${src.root}/modules/skunkworks/src/main/resources/com/l7tech/example/manager/apidemo" includes="readme.txt"/>
            <zipfileset dir="${src.root}/modules/skunkworks/src/main/java" includes="com/l7tech/example/manager/apidemo/**/*.java" prefix="sample/src"/>
            <zipfileset dir="${build.dir}" includes="Manager.jar" prefix="lib"/>
            <zipfileset dir="${build.dir}/managerlibs" casesensitive="yes" prefix="lib"/>
            <zipfileset dir="${build.dir}/docs/manager-api" prefix="javadoc"/>
        </zip>
    </target>

    <target name="package.clientapi" depends="package.client.jar,bridgeapi.javadoc" description="Package the Client API for distribution.">
        <!-- package bridge api for distribution -->
        <zip destfile="${build.dir}/BridgeAPI-${build.version}.zip" basedir="${build.dir}/docs" includes="bridge-api/**" />
    </target>

    <target name="detect.custom.assertion.sample" depends="prepare">
        <available property="custom.assertion.sample.present" file="${src.root}/CustomAssertionSample" type="dir"/>    
    </target>

    <target name="zip.api.customassertion" depends="package.api,detect.custom.assertion.sample" if="custom.assertion.sample.present">
        <!-- package layer7 api for distribution -->
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}">
          <fileset dir="${src.root}/CustomAssertionSample/">
            <include name="*.txt"/>
            <include name="*.pdf"/>
          </fileset>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc/html"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc/html">
          <fileset dir="${build.dir}/docs/layer7-api"/>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/lib"/>
        <copy file="${build.dir}/layer7-api.jar" tofile="${build.dir}/CustomAssertionAPI-${build.version}/lib/layer7-api.jar"/>


        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>
        <copy file="${src.root}/CustomAssertionSample/build.sh" todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>
        <copy file="${src.root}/CustomAssertionSample/build.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/resources"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/tools"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/src"/>

        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/resources">
          <fileset dir="${src.root}/CustomAssertionSample/resources"/>
        </copy>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/tools">
          <fileset dir="${src.root}/CustomAssertionSample/tools"/>
        </copy>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/src">
          <fileset dir="${src.root}/CustomAssertionSample/src"/>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/lib"/>
        <copy file="${build.dir}/layer7-api.jar" tofile="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/lib/layer7-api.jar"/>

        <zip destfile="${build.dir}/CustomAssertion_dev_kit-${build.version}.zip">
            <zipfileset dir="${build.dir}" filemode="755">
                <include name="CustomAssertionAPI-${build.version}/**/*.sh"/>
            </zipfileset>
            <zipfileset dir="${build.dir}">
                <include name="CustomAssertionAPI-${build.version}/**/*"/>
                <exclude name="CustomAssertionAPI-${build.version}/**/*.sh"/>
            </zipfileset>
        </zip>
    </target>

    <target name="zip.api" depends="package.clientapi,package.managerapi,zip.api.customassertion"/>

    <macrodef name="checkdeps">
        <attribute name="libfilesetref"/>
        <attribute name="jarfile"/>
        <attribute name="resultproperty"/>
        <attribute name="ignoreclasses" default=""/>
        <attribute name="failpackages" default=""/>
        <sequential>
            <java classname="com.l7tech.tools.JarChecker" fork="true" resultproperty="@{resultproperty}">
                <classpath>
                    <pathelement path="tools"/>
                    <fileset refid="@{libfilesetref}"/>
                    <pathelement location="@{jarfile}"/>
                </classpath>
                <sysproperty key="java.awt.headless" value="true"/>
                <sysproperty key="com.l7tech.tools.JarChecker.failpackages" value="@{failpackages}"/>
                <arg value="@{jarfile}"/>
                <arg line="@{ignoreclasses}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
      Task to check if the build should be failed
    -->
    <macrodef name="checkfail">
        <sequential>
            <fail if="fail">Exiting due to build failures.</fail>
        </sequential>
    </macrodef>

    <!--
      Core prepare target
    -->
    <target name="prepare.base" depends="init">
        <!-- time stamp -->
        <tstamp>
            <format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <mkdir dir="${javadoc.home}"/>

        <!-- set up build properties -->
        <property file="build.number" prefix="install"/>
        <property name="build.host" value="${hostname}"/>
        <property name="build.user" value="${user.name}"/>
        <property name="build.product" value="Layer 7 SecureSpan Suite"/>
        <property name="build.vendor" value="Layer 7 Technologies"/>
        <property name="build.vendor.id" value="com.l7tech"/>
        <echoproperties destfile="${build.etc}/filter.properties" prefix="build"/>
        <echoproperties destfile="${build.etc}/filter.properties" prefix="install"/>
    </target>

    <!--
      Create the directory structure, copy the resources, libs and
      update version tokens
    -->
    <target name="prepare"
            depends="prepare.base">
    </target>

    <!--
      Set database properties for configured DB
    -->
    <target name="db.properties"
            depends="db.properties.mysql"/>

    <macrodef name="set-db-properties">
        <attribute name="driver"/>
        <attribute name="url"/>
        <attribute name="user"/>
        <attribute name="password"/>
        <attribute name="pingstmt"/>
        <sequential>
            <property name="database.driver" value="@{driver}"/>
            <property name="database.url" value="@{url}"/>
            <property name="database.user" value="@{user}"/>
            <property name="database.password" value="@{password}"/>
            <property name="database.pingstmt" value="@{pingstmt}"/>
        </sequential>
    </macrodef>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <set-db-properties
                driver="${my.database.driver}"
                url="${my.database.url}"
                user="${my.database.user}"
                password="${my.database.password}"
                pingstmt="${my.database.pingstmt}"/>
    </target>
  
    <!--
        Hibernate properties token replacement target.
        This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties.dev" depends="db.properties" if="dev.build" unless="no.dev.build">
        <echo level="info">
            database.driver   = '${database.driver}'
            database.url      = '${database.url}'
            database.user     = '${database.user}'
            database.pingstmt = '${database.pingstmt}'
        </echo>
    </target>

    <!--
      Test compilation target 
    -->
    <target name="compile-tests" depends="publish-all-modules-quick"/>

    <!--
      Official build
    -->
    <target name="ssg-install-full"
            description="Offical build target [optionally use with skip-obfuscate, makerpm and makensis]"
            depends="ssg-install-full-init,INTERNAL-ssg-install-init-pre,package,zip.api,distribute">
    </target>

    <!--
      Initialization for a build.
    -->
    <target name="init-dist">
        <property name="no.dev.build" value="true"/>
    </target>

    <!--
      Unofficial build
    -->
    <target name="dist"
            description="Build distributable software packages [optionally use with obfuscate]"
            depends="init-dist, makensis, makerpm, pack200, clean, package, distribute">
    </target>


    <target name="distribute" depends="prepare">
        <echo level="info">Moving packaged software to distribution directory.</echo>

        <echo level="info">Creating: ${dist.dir}</echo>
        <mkdir dir="${dist.dir}"/>

        <move todir="${dist.dir}" flatten="true" verbose="true">
            <fileset dir="${build.rpm}/RPMS">
                <include name="*/*.rpm"/>
            </fileset>
            <fileset dir="${build.installer}">
                <include name="*Installer.exe"/>
                <include name="Manager-*.tar.gz"/>
                <include name="Client-*.tar.gz"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="CustomAssertion_dev_kit-*.zip"/>
                <include name="BridgeAPI-*.zip"/>
                <include name="ManagerAPI-*.zip"/>
            </fileset>
            <fileset dir="${build.dir}/modules-optional">
                <include name="*.aar"/>
            </fileset>
        </move>
    </target>

    <target name="tar"
            description="Build TARs for use in Solaris/Tarari builds"
            depends="ssg-install-full-init,INTERNAL-ssg-install,package.solaris.tar,package.tarari.tar"/>

    <!--
      Set the standard options for an official build. 
    -->
    <target name="ssg-install-full-init">
        <property name="ssg.install.enabled" value="true"/>
        <property name="ssg.install.official" value="true"/>
        <property name="makerpm" value="true"/>
        <property name="makensis" value="true"/>
        <property name="module.obfuscate" value="true"/>
        <property name="module.official.build" value="true"/>        
        <property name="pack200" value="true"/>
    </target>

    <!--
      Initialize full install (before anything is done, ie. packaging)
    -->
    <target name="INTERNAL-ssg-install-init-pre" if="ssg.install.enabled" depends="prepare.base">
        <fail unless="makerpm.available">RPM packaging is not available, cannot perform official build.</fail>

        <echo level="info" message="Using build number ${install.build.number}"/>
    </target>

    <target name="obfuscate" description="Enable obfuscated build (when packaging)">
        <echo level="info">Enabling obfuscation for build.</echo>
        <property name="module.obfuscate" value="true"/>
    </target>

    <target name="skip-obfuscate" description="Disable obfuscated build (when packaging)">
        <echo level="info">Disabling obfuscation for build.</echo>
        <property name="module.obfuscate.disabled" value="false"/>
    </target>

    <target name="pack200" description="Enable pack200 compression (when packaging)">
        <echo level="info">Enabling pack200 for build.</echo>
        <property name="pack200" value="true"/>
        <property name="module.pack200" value="true"/>
    </target>

    <!--
      Initialize full install
    -->
    <target name="INTERNAL-ssg-install-init" depends="package.readversion, INTERNAL-ssg-install-init-pre, package.gateway.all, init" if="ssg.install.enabled">
        <fail unless="install.build.number"
              message="Set the install.build.number property before running this target!"/>

        <fail unless="install.jdk.tar.gz" message="Set the install.jdk.tar.gz property or create install.properties!"/>

        <condition property="jdk.exists">
            <available file="${install.jdk.tar.gz}"/>
        </condition>

        <fail unless="jdk.exists" message="Couldn't find ${install.jdk.tar.gz}! Check your install.properties file!"/>

        <echo>Making directories...</echo>

        <!-- Appliance directories -->
        <mkdir dir="${install.src.app}/etc/init.d"/>
        <mkdir dir="${install.src.app}/etc/snmp"/>
        <mkdir dir="${install.src.app}/etc/sysconfig"/>
        <mkdir dir="${install.src.app.bin}" />
        <mkdir dir="${install.src.app.etc}" />
        <mkdir dir="${install.src.app.firewall}" />
        <mkdir dir="${install.src.app.migconfig}"/>
        <mkdir dir="${install.src.app.libexec}"/>
        <mkdir dir="${install.src.app.ssgconfig}"/>
        <mkdir dir="${install.src.app.ssgprofile}"/>
        <mkdir dir="${install.src.app.sysconfigwizard}"/>

        <!-- Gateway directories -->
        <mkdir dir="${install.src.ssg.applet}"/>
        <mkdir dir="${install.src.ssg.appletlib}"/>
        <mkdir dir="${install.src.ssg.attachment}"/>
        <mkdir dir="${install.src.ssg.base}"/>
        <mkdir dir="${install.src.ssg.bin}"/>
        <mkdir dir="${install.src.ssg.conf}"/>
        <mkdir dir="${install.src.ssg.configwizard}"/>
        <mkdir dir="${install.src.ssg.control}"/>
        <mkdir dir="${install.src.ssg.controlbin}"/>
        <mkdir dir="${install.src.ssg.controletc}"/>
        <mkdir dir="${install.src.ssg.controletc}/conf"/>
        <mkdir dir="${install.src.ssg.controllib}"/>
        <mkdir dir="${install.src.ssg.controllogs}"/>
        <mkdir dir="${install.src.ssg.etc}"/>
        <mkdir dir="${install.src.ssg.flasher}"/>
        <mkdir dir="${install.src.ssg.help}"/>
        <mkdir dir="${install.src.ssg.lib}"/>
        <mkdir dir="${install.src.ssg.libext}"/>
        <mkdir dir="${install.src.ssg.logs}"/>
        <mkdir dir="${install.src.ssg.profile}"/>        
        <mkdir dir="${install.src.ssg.profilebase}"/>
        <mkdir dir="${install.src.ssg.aarmods}"/>
        <mkdir dir="${install.src.ssg.sql}"/>
        <mkdir dir="${install.src.ssg.web}"/>
    </target>

    <!--                                                                                                   
      Full install main work
    -->
    <target name="INTERNAL-ssg-install-main" if="ssg.install.enabled">
        <!--copy the config wizard -->
        <copy todir="${install.src.ssg.configwizard}">
            <fileset dir="${build.dir}/configwizard">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--copy the system config wizard -->
        <copy todir="${install.src.app.sysconfigwizard}">
            <fileset dir="${build.dir}/sysconfigwizard">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--copy the ssg flasher -->
        <copy todir="${install.src.ssg.flasher}">
            <fileset dir="${build.dir}/migration">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy bundled modular assertions -->
        <copy todir="${install.src.ssg.aarmods}">
            <fileset dir="${build.dir}/modules" includes="*.aar" excludes="*-client-*.aar"/>
        </copy>

        <!-- Copy modified / new files -->
        <copy file="${src.root}/etc/omp.dat" tofile="${install.src.ssg.conf}/omp.dat"/>
    </target>

    <!--
      Top level work target for official builds
    -->
    <target name="INTERNAL-ssg-install" depends="INTERNAL-ssg-install-init, INTERNAL-ssg-install-main" if="ssg.install.enabled">
        <!-- Copy Controller.jar -->
        <copy todir="${install.src.ssg.control}">
            <fileset dir="${build.dir}" includes="Controller.jar"/>
        </copy>

        <!-- Copy Controller libs -->
        <copy todir="${install.src.ssg.controllib}" flatten="true">
            <fileset dir="${build.dir}/processcontrollerlibs" casesensitive="yes">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <!-- Copy Controller bin -->
        <copy todir="${install.src.ssg.controlbin}">
            <fileset dir="${src.root}/etc/processcontroller" includes="processcontroller.sh"/>
        </copy>

        <copy file="${src.root}/etc/omp.dat" tofile="${install.src.ssg.controletc}/conf/omp.dat"/>

        <!-- Copy Gateway.jar -->
        <copy todir="${install.src.ssg.base}">
            <fileset dir="${build.dir}" includes="Gateway.jar"/>
        </copy>

        <!-- Copy Gateway libs -->
        <copy todir="${install.src.ssg.lib}" flatten="true">
            <fileset dir="${build.dir}/gatewaylibs" casesensitive="yes">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <!-- Copy JMS lib -->
        <copy todir="${install.src.ssg.libext}" flatten="true">
            <fileset dir="${src.root}/lib/repository/javax.jms" casesensitive="yes">
                <include name="jms-1.1.jar"/>
            </fileset>
        </copy>

        <!-- Copy misc. stuff -->
        <copy todir="${install.src.ssg.sql}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <include name="ssg.sql"/>
                <include name="upgrade*.sql"/>
            </fileset>
        </copy>

        <!-- profile files -->
        <copy todir="${install.src.ssg.profilebase}">
            <fileset dir="${src.root}/etc">
                <include name="profile"/>
            </fileset>
        </copy>
        <copy todir="${install.src.ssg.profile}">
            <fileset dir="${src.root}/etc">
                <include name="ssgruntimedefs.sh"/>
                <include name="ssg-utilities.sh"/>
            </fileset>
        </copy>

        <!-- etc files -->
        <!--<copy todir="${install.src.ssg.etc}">-->
        <!--</copy>-->

        <!-- conf files -->
        <copy file="${src.root}/etc/ssg-java.security" tofile="${install.src.ssg.conf}/java.security"/>
        <copy file="${src.root}/etc/system.properties" todir="${install.src.ssg.conf}"/>
        <copy file="${src.root}/etc/ssglog.template.properties" tofile="${install.src.ssg.conf}/ssglog.properties"/>

        <!-- bin files -->
        <copy todir="${install.src.ssg.bin}">
            <fileset dir="${src.root}/etc">
                <include name="gateway.sh"/>
                <include name="install.sh"/>
                <include name="configure.sh"/>
            </fileset>
        </copy>

        <mkdir dir="${install.src.ssg.web}/ssg"/>
        <copy todir="${install.src.ssg.web}/ssg">
            <fileset dir="${src.root}/web" includes="*"/>
            <fileset dir="${src.root}/modules/common/src/main/resources/com/l7tech/common/resources" includes="wsil2xhtml.xml"/>
        </copy>

        <copy todir="${install.src.ssg.applet}">
            <fileset dir="${build.dir}" includes="layer7-gateway-console-applet.jar*"/>
        </copy>

        <unzip src="${src.root}/webhelp/ssm/help.zip" dest="${install.src.ssg.help}"/>
        <path id="ssmhelp.spacespath">
            <fileset dir="${install.src.ssg.help}">
                <include name="**/* *"/>
            </fileset>
        </path>
        <condition property="ssmhelp.fail.path.with.spaces">
            <length string="${toString:ssmhelp.spacespath}" when="greater" length="0" />
        </condition>
        <fail if="ssmhelp.fail.path.with.spaces">SSM help.zip contains path with spaces, please remove the spaces and try again.${line.separator}${toString:ssmhelp.spacespath}</fail>

        <copy todir="${install.src.ssg.appletlib}">
            <fileset dir="${build.dir}/managerappletlibs"/>
        </copy>

        <!-- copy new sudo exececuted files to new libexec directory -->
        <copy file="${src.root}/etc/grandmaster_flash" todir="${install.src.app.migconfig}"/>
        <copy file="${src.root}/etc/db/mysql/my.cnf" tofile="${install.src.app}/etc/my.cnf.ssg"/>
        <copy file="${src.root}/etc/appliance/appliancedefs.sh" todir="${install.src.app.ssgprofile}"/>
        <copy file="${src.root}/etc/processcontroller/sspc-initd" tofile="${install.src.app}/etc/init.d/ssg"/>
        <copy file="${src.root}/etc/appliance/sysconfigscript-initd" tofile="${install.src.app}/etc/init.d/ssgsysconfig"/>
        <copy file="${src.root}/etc/appliance/ssg-dbstatus-initd" tofile="${install.src.app}/etc/init.d/ssg-dbstatus"/>
        <copy file="${src.root}/etc/appliance/tcp_tune.sh" tofile="${install.src.app}/etc/init.d/tcp_tune"/>
        <copy file="${src.root}/etc/appliance/snmpd.conf" tofile="${install.src.app}/etc/snmp/snmpd.conf_example"/>
        <copy file="${src.root}/etc/appliance/iptables" tofile="${install.src.app}/etc/sysconfig/iptables"/>
        <copy file="${src.root}/etc/appliance/configuser_profile" tofile="${install.src.app.ssgconfig}/.bash_profile"/>

        <copy todir="${install.src.app.libexec}">
            <fileset dir="${src.root}/etc/appliance">
                <include name="load_keydata"/>
                <include name="save_keydata"/>
                <include name="wipe_keydata"/>
                <include name="zerohsm.sh"/>
                <include name="masterkey-manage.pl"/>
                <include name="update_firewall"/>
                <include name="gateway_control"/>
            </fileset>
        </copy>

        <copy todir="${install.src.app.bin}">
            <fileset dir="${src.root}/etc/appliance">
                <include name="md5passwd.pl"/>
                <include name="resetAdmin.sh"/>
                <include name="passServiceUsage.sh"/>
                <include name="ssg_appliance_startup_config.sh"/>
                <include name="firewall_control.sh"/>
                <include name="systeminfo.sh"/>
            </fileset>
        </copy>

        <copy todir="${install.src.app.etc}">
            <fileset dir="${src.root}/etc/appliance">
                <include name="host.properties"/>
                <include name="pkcs11_linux.cfg"/>            
            </fileset>
        </copy>

        <!-- Create software tarball -->
        <property name="tarball" value="${build.dir}/ssg-b${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Tarball (${tarball})...</echo>
        <tar destfile="${tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" mode="644" prefix="${install.target.ssg}">
                <include name="**/*"/>
                <exclude name="**/bin/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" mode="755" prefix="${install.target.ssg}">
                <include name="**/bin/*"/>
                <exclude name="**/bin/*.bat"/>
                <exclude name="**/bin/*.cnf"/>
                <exclude name="**/bin/*.conf"/>
                <exclude name="**/bin/*.exe"/>
                <exclude name="**/bin/*.gz"/>
                <exclude name="**/bin/*.ini"/>
                <exclude name="**/bin/*.jar"/>
                <exclude name="**/bin/*.txt"/>
                <exclude name="**/bin/*.xml"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" mode="644" prefix="${install.target.ssg}">
                <include name="**/bin/*.bat"/>
                <include name="**/bin/*.cnf"/>
                <include name="**/bin/*.conf"/>
                <include name="**/bin/*.exe"/>
                <include name="**/bin/*.gz"/>
                <include name="**/bin/*.ini"/>
                <include name="**/bin/*.jar"/>
                <include name="**/bin/*.txt"/>
                <include name="**/bin/*.xml"/>
            </tarfileset>
        </tar>

        <property name="appliance-tarball" value="${build.dir}/ssg-appliance-b${install.build.number}.tar.gz"/>
        <echo level="info">Creating Appliance Add-On Tarball (${appliance-tarball})...</echo>
        <tar destfile="${appliance-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.app}" username="gateway" group="gateway" mode="644" prefix="${install.target.app}">
                <include name="**/**/*"/>
            </tarfileset>
        </tar>

        <echo level="info">BUILD COMPLETE - Produced ${tarball} and ${appliance-tarball}!</echo>
    </target>

    <!-- Create the TAR used when building the Solaris PKG -->
    <target name="package.solaris.tar" depends="init">
        <echo level="info">Creating Solaris Gateway Build Tar ...</echo>
        <tar destfile="${build.dir}/solaris_build.tar.gz" compression="gzip" longfile="gnu">
            <tarfileset dir="${src.root}/etc" username="root" group="root" mode="755">
                <include name="solaris_build/**/*.sh"/>
                <exclude name="**/.svn"/>
            </tarfileset>
            <tarfileset dir="${src.root}/etc" username="root" group="root" mode="644">
                <include name="solaris_build/**/*"/>
                <exclude name="**/*.sh"/>
                <exclude name="**/.svn"/>
            </tarfileset>
        </tar>
    </target>

    <!-- Create the TAR used when building the Tarari rpm -->
    <target name="package.tarari.tar" depends="init">
        <echo level="info">Creating Tarari Gateway Tar ...</echo>
        <tar destfile="${build.dir}/tarari.tar.gz" compression="gzip" longfile="gnu">
            <tarfileset dir="${src.root}" username="root" group="root" mode="644">
                <include name="etc/appliance/tarari/tarari-initd"/>
                <include name="etc/appliance/tarari/tarariopts.sh"/>
            </tarfileset>
        </tar>
    </target>

    <!-- Create the TAR used when building the Enterprise Manager -->
    <target name="package.em.tar" depends="package.em.config" if="ssg.install.enabled">
        <echo level="info">Creating Enterprise Manager Build Tar ...</echo>

        <property name="install.src.em" value="${install.src.base}/enterprisemanager"/>
        <mkdir dir="${install.src.em}"/>

        <!-- create directory structure for tar -->
        <mkdir dir="${install.src.em}/etc/init.d"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/bin"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/config"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/etc"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/lib"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/var/logs"/>
        <mkdir dir="${install.src.em}/opt/SecureSpan/EnterpriseManager/var/db"/>

        <!-- copy files to install locations -->
        <copy file="${src.root}/etc/enterprisemanager/ssem-initd" tofile="${install.src.em}/etc/init.d/ssem"/>
        <copy file="${src.root}/etc/enterprisemanager/enterprisemanager.sh" todir="${install.src.em}/opt/SecureSpan/EnterpriseManager/bin"/>
        <copy file="${build.dir}/EnterpriseManager.jar" todir="${install.src.em}/opt/SecureSpan/EnterpriseManager/"/>
        <copy todir="${install.src.em}/opt/SecureSpan/EnterpriseManager/lib">
            <fileset dir="${build.dir}/enterprisemanagerlibs"/>
        </copy>
        <copy todir="${install.src.em}/opt/SecureSpan/EnterpriseManager/config">
            <fileset dir="${build.dir}/emsconfigwizard"/>
        </copy>
        <copy file="${src.root}/etc/omp.dat" tofile="${install.src.em}/opt/SecureSpan/EnterpriseManager/etc/omp.dat"/>

        <!-- package -->
        <property name="emtarball" value="${build.dir}/enterprisemanager-b${install.build.number}.tar.gz"/>
        <tar destfile="${emtarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.em}" username="gateway" group="gateway" mode="755">
                <include name="**/*.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.em}" username="gateway" group="gateway" mode="644">
                <exclude name="**/*.sh"/>
            </tarfileset>
        </tar>
    </target>

    <target name="package.em.config" unless="ssg.only" depends="package.jars">
        <echo level="info">Packaging Enterprise Manager Configuration Client</echo>
        <mkdir dir="${build.dir}/emsconfigwizard/lib"/>

        <copy todir="${build.dir}/emsconfigwizard">
            <fileset dir="${src.root}/etc/enterprisemanager">
                <include name="emconfig.sh"/>
            </fileset>
        </copy>

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-ems-config" showprogress="false" conf="default" log="quiet"/>
        <ivy:retrieve inline="true" organisation="com.l7tech" module="layer7-ems-config" conf="default" pattern="${build.dir}/emsconfigwizard/lib/[artifact]-[revision].[ext]"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-utility" revision="latest.integration" property="module.utility.version"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-ems-config" revision="latest.integration" property="module.ems.config.version"/>

        <jar jarfile="${build.dir}/emsconfigwizard/ConfigWizard.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="lib/layer7-ems-config-${module.ems.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.ems.config.client.Main"/>
            </manifest>
        </jar>
    </target>

    <!--
      Initialization for the pre-official build (set versions, etc)
    -->
    <target name="OFFICIAL-build.init.pre" depends="ssg-install-full-init">
        <delete file="local.build.version"/>
    </target>
    <target name="OFFICIAL-build.interactive" depends="init-core" unless="build.label">
        <input message="This will increment the OFFICIAL build count in CVS.  Are you sure you want to do this?"
               validargs="Y,y,N,n" addproperty="sure"/>

        <condition property="die">
            <not>
                <or>
                    <equals arg1="${sure}" arg2="y"/>
                    <equals arg1="${sure}" arg2="Y"/>
                </or>
            </not>
        </condition>
        <fail if="die" message="Aborted at user request."/>

        <input message="Enter SecureSpan version number" addproperty="official.build.version"/>
        <input message="Enter EM version number" addproperty="official.build.em.version"/>
    </target>
    <target name="OFFICIAL-build.init" depends="OFFICIAL-build.init.pre,init-core,OFFICIAL-build.interactive">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>

        <echo level="info">Running svn switch for build.number (to trunk/HEAD)</echo>
        <svn>
            <switch path="build.number" recurse="false" url="svn+ssh://sarek/home/svnuser/UneasyRooster/trunk/build.number"/>
        </svn>

        <buildnumber/>
        <property file="build.number" prefix="install"/>

        <!-- Set using provided label, only does something if not in "interactive" mode -->
        <property file="build.version" prefix="file"/>
        <property name="build.label" value=""/>

        <condition property="official.build.version" value="${file.build.version.major}.${file.build.version.minor}${build.label}">
            <equals arg1="0" arg2="${file.build.version.subminor}"/>
        </condition>
        <property name="official.build.version" value="${file.build.version.major}.${file.build.version.minor}.${file.build.version.subminor}${build.label}"/>
        <condition property="official.build.em.version" value="${file.build.em.version.major}.${file.build.em.version.minor}${build.label}">
            <equals arg1="0" arg2="${file.build.em.version.subminor}"/>
        </condition>
        <property name="official.build.em.version" value="${file.build.em.version.major}.${file.build.em.version.minor}.${file.build.em.version.subminor}${build.label}"/>
        <echo file="local.build.version"># Generated local build properties file ${line.separator}build.version=${official.build.version}${line.separator}build.em.version=${official.build.em.version}${line.separator}</echo>
    </target>

    <!--
      Pre-official build (sets version, buildnumber)
    -->
    <target name="OFFICIAL-build"
            description="Set the official buildnumber and product version."
            depends="OFFICIAL-build.init, clean">
        <echo level="info">commit -m '[OFFICIAL-build] Incremented build number to ${install.build.number}' build.number</echo>
        <svn>
            <commit file="build.number" recurse="false" message="[OFFICIAL-build] Incremented build number to ${build.number}"/>
        </svn>
    </target>

    <!--
      Task to update ZKM files with classpaths, jars, etc.
    -->
    <macrodef name="build-zkm">
        <attribute name="name"/>
        <attribute name="zkmFilePath" default="${src.root}/etc/obfuscation/genjarobf.zkm"/>
        <attribute name="out" default="./build/obfuscation"/>        
        <attribute name="jarFileset"/>
        <attribute name="libFileset"/>
        <sequential>
            <pathconvert property="obfuscate.@{name}.zkm.jars.path" pathsep="&quot;${line.separator}&quot;" dirsep="/" refid="@{jarFileset}"/>
            <pathconvert property="obfuscate.@{name}.zkm.libs.path" pathsep="&quot;${line.separator}&quot;" dirsep="/" refid="@{libFileset}"/>            
            <copy file="@{zkmFilePath}" tofile="build/etc/@{name}.zkm" overwrite="true">
                <filterset>
                    <filter token="CP" value="${obfuscate.@{name}.zkm.libs.path}"/>
                    <filter token="JAR" value="${obfuscate.@{name}.zkm.jars.path}"/>
                    <filter token="CHANGELOG" value="${build.dir}/obfuscation/@{name}_change.log"/>
                    <filter token="OUT" value="@{out}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <!--
       Enable installer build but don't require dependencies to be built
    -->
    <target name="makensis-unsafe">
        <echo level="info">Enabling Win32 installers for build.</echo>
        <property name="makensis" value="true"/>
    </target>

    <target name="makensis" description="Enable building of Win32 installers" depends="makensis-unsafe">
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="makerpm" description="Enable building of rpm installer(s)">
        <echo level="info">Enabling RPM installers for build.</echo>
        <property name="makerpm" value="true"/>
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="generate-xbean-jars">
        <xmlbeancompiler destfile="${src.root}/lib/xbean-xenc-xmldsig.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="xmldsig-core-schema.xsd, xenc-schema.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/lib/xbean-saml1_1.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="oasis-sstc-saml-schema-assertion-1.1.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/lib/xbean-saml2_0.jar">
            <classpath>
                <pathelement location="${src.root}/lib/xbean-xenc-xmldsig.jar"/>
                <path refid="project.classpath"/>
            </classpath>
            <fileset dir="${src.root}/etc/schema/xbean">
                <include name="saml-schema-assertion-2.0.xsd"/>
                <include name="saml-schema-authn-context-2.0.xsd"/>
                <include name="saml-schema-authn-context-types-2.0.xsd"/>
                <include name="saml-schema-authn-context-sslcert-2.0.xsd"/>
                <include name="saml-schema-authn-context-pword-2.0.xsd"/>
                <include name="saml-schema-authn-context-x509-2.0.xsd"/>
                <include name="saml-schema-authn-context-xmldsig-2.0.xsd"/>
            </fileset>
        </xmlbeancompiler>
    </target>

    <!--
      Macro for using the wsimport JAX-WS utility
    -->
    <macrodef name="wsimport">
        <attribute name="wsdl"/>
        <sequential>
          <exec executable="wsimport">
            <arg value="-keep"/>
            <arg value="-s"/>
            <arg value="build/uddisources"/>
            <arg value="-d"/>
            <arg value="build/uddiclasses"/>
            <arg value="-p"/>
            <arg value="com.l7tech.common.uddi.guddiv3"/>
            <arg value="-wsdllocation"/>
            <arg value="resources/@{wsdl}"/>
            <arg value="etc/schema/uddiv3/@{wsdl}"/>
          </exec>
        </sequential>
    </macrodef>

    <!--
      Generate the JAX-WS classes for UDDI v3.0.2.
      NOTE: Due to JDK bug we have to generate src with 1.6 but compile with 1.5
            http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6553734
    -->
    <target name="generate-uddi-jar">
        <property name="build.guddi.jar" value="build/guddi-1.0.0.jar"/>
        <mkdir dir="build/uddiclasses"/>
        <mkdir dir="build/uddisources"/>

        <!-- Comment out this block and compile with a 1.5 JDK -->
        <echo level="info">Generating classes from WSDL/Schemas</echo>
        <wsimport wsdl="uddi_v3_service_i.wsdl"/>
        <wsimport wsdl="uddi_v3_service_p.wsdl"/>
        <wsimport wsdl="uddi_v3_service_s.wsdl"/>

        <echo level="info">Compiling for 1.5</echo>
        <delete dir="build/uddiclasses"/>
        <mkdir dir="build/uddiclasses"/>
        <javac srcdir="build/uddisources" destdir="build/uddiclasses" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.5" source="1.5">
            <!-- Classpath not needed when we can build with 1.6 -->
            <classpath refid="project.classpath"/>
        </javac>

        <echo level="info">Building JAR</echo>
        <jar jarfile="${build.guddi.jar}" >
            <fileset dir="build/uddiclasses">
                <include name="**/*"/>
            </fileset>
            <zipfileset dir="etc/schema/uddiv3" prefix="com/l7tech/common/uddi/guddiv3/resources">
                <include name="**/*"/>
            </zipfileset>
        </jar>

        <echo level="info">Output JAR ${build.guddi.jar} should be copied to lib/gateway/uddi/generic for use in build.</echo>
    </target>
</project>
