<?xml version="1.0" encoding="UTF-8"?>
<!--
  Ant build file for UneasyRooster
-->
<project name="UneasyRooster" default="dev" basedir=".">
<!-- Uncomment for jikes/emacs to be used
    <property name="build.compiler" value="jikes"/>
    <property name="build.compiler.emacs" value="true"/> -->

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" location="${basedir}"/>

    <!-- get the version -->
    <property file="${src.root}/build.version"/>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

<!--
      ** Set default build properties
      ** Properties that were not specified in user properties
    -->
    <property file="${src.root}/etc/default_build.properties"/>

    <!-- where the builds go -->
    <property name="dev.build.home" value="${src.root}/build"/>

    <!-- distribution archive names -->
    <property name="war" value="ROOT.war"/>

    <!-- project classpath -->
    <path id="project.classpath">
        <pathelement location="src"/>
        <fileset dir="lib">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
<!--
               * Issue with multiple parsers.
               * JDK 1.4 ships it's own parses and contributes to the
               * overall parser mess. java.beans.XmlEncoder and other
               * classes  do not like xerces so excluded it from project
               * classpath.
               * It is not throughly tested to see if this breaks other things.

           fla note: xercesImpl.jar and xml-apis.jar are required by xss4j for xml-enc features.
           <exclude name="*xerces*"/>
           <exclude name="*xml-api*"/>
           -->
           <!-- Exclude since this is not necessary to compile and it includes old
                versions of some of the xml-apis.jar classes -->
           <exclude name="xml4j.jar"/>
           <!-- Exclude build related classes -->
           <exclude name="ant.jar"/>
           <exclude name="optional.jar"/>
        </fileset>
        <fileset dir="lib">
            <include name="*.zip"/>
        </fileset>
    </path>

    <!--
      Classpath for Idea form compiler
    -->
    <path id="uidesigner.classpath">
        <fileset dir="lib/tools">
            <include name="jdom.jar"/>
            <include name="asm.jar"/>
            <include name="asm-commons.jar"/>
            <include name="javac2.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for Idea form compiler
    -->
    <taskdef name="javac2"
             classname="com.intellij.ant.Javac2"
             classpathref="uidesigner.classpath"/>

    <!--
      Classpath for obfuscation
    -->
    <path id="zelix.classpath">
        <fileset dir="etc/obfuscation">
            <include name="ZKM.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for class file obfuscation
    -->
    <taskdef name="Zelix" classname="ZKMTask" classpathref="zelix.classpath"/>

    <!--
      Various bolt-on task definitions
    -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!--
      ** init dev target The "dev" target depends on this target.
      -->
    <target name="init-dev">
        <property name="build.dir" value="${dev.build.home}"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="build.test.classes" value="${build.dir}/test-classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>

        <!--Custom Assertions subproject-->
        <property name="customassertions.src.dir" value="${src.root}/CustomAssertions"/>
        <property name="customassertions.build.dir" value="${customassertions.src.dir}/build/output"/>
        <property name="customassertions.jar.name" value="CustomAssertions.jar"/>
        <property name="customassertions.jar.path" value="${customassertions.build.dir}/${customassertions.jar.name}"/>


        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <condition property="db.postgres">
            <equals arg1="${database.type}" arg2="postgres"/>
        </condition>

        <condition property="db.oracle8">
            <equals arg1="${database.type}" arg2="oracle8"/>
        </condition>

        <condition property="db.oracle9">
            <equals arg1="${database.type}" arg2="oracle9"/>
        </condition>

        <condition property="db.oracle10">
            <equals arg1="${database.type}" arg2="oracle10"/>
        </condition>

        <!-- paths with dynamic components -->
        <path id="project.test.classpath">
            <path refid="project.classpath"/>
            <pathelement location="${build.classes}"/>
        </path>

    </target>

    <target name="cleandev" depends="clean, dev"/>
    <target name="redeploy" depends="undeploy, deploy"/>

    <target name="dev.properties">
        <property name="dev.build" value="true"/>
        <property file="build.number"/>
    </target>

    <!--
      ** configure and invoke developer's build
      -->
    <target name="dev" description="Developer build (does not package)" depends="init-dev, dev.properties, compile-tests"/>

    <!--
      ** configure and invoke developer's build for source files
      ** that match the pattern passed as -Dcompile.pattern
      -->
    <target name="compile-one" depends="init-dev" if="compile.pattern">
        <echo message="Compiling **/*${compile.pattern}* in ${src.root}."/>
        <javac srcdir="src" destdir="${build.classes}" debug="on"
               optimize="off" includes="**/*${compile.pattern}*"
               deprecation="on" verbose="no">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <target name="undeploy" depends="init-dev, properties.check" if="tomcat.home">
        <delete dir="${tomcat.home}/webapps/ROOT"/>
        <delete file="${war}"/>
    </target>

    <target name="deploy.properties">
        <property name="dev.build" value="true"/>
        <property name="ssg.only" value="true"/>
    </target>

    <!--
      ** developer's 'deploy' target.
      ** compile and package the application.
      ** Then deploy a package into the ${tomcat.home}/webapps ($TOMCAT_HOME/webapps)
      -->
    <target name="deploy" depends="init-dev, properties.check, deploy.properties, package" if="tomcat.home">
        <copy todir="${tomcat.home}/webapps">
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>

        <copy todir="${tomcat.home}/common/endorsed">
            <fileset dir="${build.dir}">
                <include name="l7provider.jar"/>
            </fileset>
        </copy>

        <copy todir="${tomcat.home}/server/lib">
            <fileset dir="${build.dir}">
                <include name="l7valve.jar"/>
            </fileset>
        </copy>

        <copy todir="${tomcat.home}/shared/lib">
            <fileset dir="${build.dir}">
                <include name="layer7-api.jar"/>
            </fileset>
        </copy>

        <!--
          this server.xml is ready to be modified by sslGen.sh who will later
          make the ssl cert and record it's keystore password in it
        -->
        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${tomcat.home}/conf/server.xml"/>
        <copy file="${src.root}/etc/tomcat/truststore.ks" tofile="${tomcat.home}/conf/truststore.ks"/>
        <copy file="${src.root}/etc/tomcat/SsgSSLImplementation.properties" tofile="${tomcat.home}/conf/SsgSSLImplementation.properties"/>

    </target>

    <!--
      Display information on a Jar file
    -->
    <target name="jarinfo" if="file">
        <echo level="info">Listing Jar file: ${file}</echo>
        <jarlib-display file="${file}"/>
        <echo level="info">Listing complete (if theres no output you can try unzip -p ${file} META-INF/MANIFEST.MF)</echo>
    </target>

    <!-- Print a list of available unit tests (or things that may be tests) -->
    <target name="summary" unless="test">
        <echo level="info">Possible test classes are: </echo>
        <pathconvert property="x" targetos="unix" pathsep="${line.separator}">
            <map from="${build.test.classes}/" to=""/>
            <path>
                <fileset dir="${build.test.classes}" includes="**/*Test.class **/*Tests.class"/>
            </path>
        </pathconvert>
        <echo>${x}</echo>
        <echo level="info">NOTE: ** you will need to convert to a class name **</echo>
    </target>

    <!--
      Run a single JUnit test
    -->
    <target name="test-one" description="Run an individual unit test. (e.g. ./build.sh testcase -Dtest=com.l7tech.MyTest.class)" depends="clean.test, dev, summary" if="test">
        <junit printsummary="yes" haltonfailure="yes" fork="off">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <test name="${test}" haltonfailure="no" fork="yes"/>
        </junit>
    </target>

    <!--
      ** configure and invoke unit tests
      -->
    <target name="test" description="Run JUnit 'quick' tests" depends="test.work, test.report, checkfail"/>
    <target name="test.work" depends="clean.test, dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off" errorproperty="test.error" failureproperty="test.failure">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <!--
              Tests
            -->
            <test name="com.l7tech.common.audit.MessagesTest" haltonfailure="no" />
            <test name="com.l7tech.proxy.policy.ClientPolicyFactoryTest" haltonfailure="no" />
            <test name="com.l7tech.proxy.policy.ClientXpathAssertionsTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.ServerPolicyFactoryTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.policy.filter.FilterTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.xml.WssRoundTripTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.policy.PolicyServiceTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.message.KnobblyMessageTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.FunctionalTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.http.CookieTest" haltonfailure="no"/>
            <test name="com.l7tech.common.http.ParameterizedStringTest" haltonfailure="no"/>
            <test name="com.l7tech.common.security.wsfederation.FederationPassiveClientTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.EncryptionUtilTest" haltonfailure="no"/>
            <test name="com.l7tech.common.xml.ElementCursorTest" haltonfailure="no"/> <!-- move to test.intensive after a release or so, when it's not so new -->

            <!-- Move these WS-SecurityPolicy tests to test.intensive after a release or so, when it's no longer so new. -->
            <test name="com.l7tech.policy.wssp.WsspReaderTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.wssp.WsspWriterTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.wssp.WsspRoundTripTest" haltonfailure="no"/>

<!--
             ** add policy tests into the com.l7tech.policy.AllPolicyTests class
            -->
            <test name="com.l7tech.policy.AllPolicyTests" haltonfailure="no" fork="yes"/>
<!--

            ** Tomcat config. When done enable the tests below.
            **
           <test name="com.l7tech.logging.LogCLientTest" haltonfailure="no"/>
           <test name="com.l7tech.identity.ClientTest" haltonfailure="no"/>
           <test name="com.l7tech.service.ServiceAdminTest" haltonfailure="no"/>
           -->
<!--
              ** add fast precheckin tests here **
              -->
        </junit>
    </target>

    <target name="test.intensive"
            description="Run intensive JUnit tests."
            depends="clean.test, test.work, test.intensive.work, test.report, checkfail"/>
    <target name="test.intensive.work" depends="clean.test, dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off" errorproperty="test.error" failureproperty="test.failure">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <test name="com.l7tech.common.util.ThreadPoolTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.proxy.ClientPolicyTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.RequestXpathAssertionTest" fork="yes" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.StashManagerTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.mime.MimeBoundaryTerminatedInputStreamTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.util.ExceptionUtilsTest" haltonfailure="no"/>
            <test name="com.l7tech.identity.StubDataStoreTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.XmlUtilTest" haltonfailure="no"/>
            <test name="com.l7tech.server.MockServletApiTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.saml.SamlProcessingTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.TokenServiceTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.proxy.datamodel.SsgManagerTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgTest" haltonfailure="no"/>
            <test name="com.l7tech.common.security.xml.WssDecoratorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.xml.WssProcessorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.KeysTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.xml.XpathEvaluatorTest" haltonfailure="no"/>
            <test name="com.l7tech.common.xml.SoapMessageGeneratorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.mime.MimeHeaderTest" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.MimeHeadersTest" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.MimeBodyTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.io.failover.FailoverStrategyTest" haltonfailure="no"/>
            <test name="com.l7tech.service.WsdlTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.xml.tarari.util.TarariXpathConverterTest" haltonfailure="no"/>
            <test name="com.l7tech.internal.license.LicenseGeneratorTest" haltonfailure="no" />
            <test name="com.l7tech.internal.license.LicenseRoundTripTest" haltonfailure="no" />
            <test name="com.l7tech.common.io.BufferPoolByteArrayOutputStreamTest" haltonfailure="no" />
            <test name="com.l7tech.common.util.BufferPoolTest" haltonfailure="no" />
            <test name="com.l7tech.server.policy.assertion.ServerWsiBspAssertionTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.assertion.ServerWsiSamlAssertionTest" haltonfailure="no"/>
            <test name="com.l7tech.common.http.cache.HttpObjectCacheTest" haltonfailure="no" />
            <test name="com.l7tech.server.identity.AuthenticationResultTest" haltonfailure="no" />
            <test name="com.l7tech.common.security.saml.Saml2ValidationTest" haltonfailure="no" />

<!--
** add possibly-slow intensive nightly tests here **
-->
        </junit>
    </target>

    <target name="test.all" description="Run testpackage and test.intensive" depends="test.work, test.intensive.work, testpackage.work, test.report, testpackage.report, checkfail"/>

    <target name="test.report" depends="test.report.error, test.report.failure"/>
    <target name="test.report.error" if="test.error">
        <echo level="warning">One or more JUnit tests exited due to error.</echo>
        <property name="fail" value="true"/>
    </target>
    <target name="test.report.failure" if="test.failure">
        <echo level="warning">One or more JUnit tests failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <!--
      Clean data from running tests.
    -->
    <target name="clean.test" depends="init-dev">
        <delete>
            <fileset dir="${src.root}/">
                <include name="TEST*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="WspWriter*"/>
                <include name="stubdata*"/>
            </fileset>
        </delete>
        <!-- Not really feasible to delete all the test classes (leaving other classes)
        <delete>
            <fileset dir="${src.root}">
                <include name="build/classes/**/*Test.class"/>
            </fileset>
        </delete>
        -->
    </target>

    <!--
      ** Clean the directory structure.
      ** This is used only by developer's build.
      -->
    <target name="clean" depends="init-dev,clean.ca,clean.test" description="Delete all build output.">
        <delete dir="${build.classes}"/>
        <delete dir="${build.test.classes}"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.lib}"/>
        <delete dir="${build.dir}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*"/>
                <include name="Bridge-*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*/*"/>
                <include name="Bridge-*/*"/>
                <include name="Manager-*"/>
                <include name="Bridge-*"/>
            </fileset>
        </delete>
        <delete dir="${javadoc.home}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="stubdata*"/>
            </fileset>
        </delete>
        <delete file="${src.root}/src/com/l7tech/util/Version.java"/>
        <delete file="${src.root}/tools/com/l7tech/tools/JarChecker.class"/>
        <property name="buildinfo.update" value="true"/>
    </target>

    <target name="clean.ca" depends="ca.availablecheck" if="customassertion.available">
        <!-- clean up the custom assertions subtree as well-->
        <exec executable="sh" dir="${customassertions.src.dir}">
            <arg line="./build.sh clean"/>
        </exec>
    </target>

    <!-- javadoc target -->
    <target name="javadoc" depends="init-dev,prepare" description="Generates Javadoc.">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${javadoc.home}" includes="**/*"/>
        </delete>
        <mkdir dir="${javadoc.home}"/>
        <javadoc sourcepath="src"
                 classpathref="project.classpath"
                 destdir="${javadoc.home}"
                 packagenames="com.*"
                 windowtitle="Layer 7 Technologies API Specification"
                 doctitle="Layer 7 Technologies API Specification"
                 defaultexcludes="yes"
                 version="true"
                 use="true"
                 splitindex="true"
                 maxmemory="128m">
                <!-- other possible options:
                 author="true"
                 private="true"
                 additionalparam="-linksource"
                -->
            <header><![CDATA[<b>Layer 7 Technologies Inc.<b><br><font size='-1'>UneasyRooster</font>]]></header>
            <bottom><![CDATA[<i>Copyright &#169; 2005 Layer 7 Technologies Inc. All Rights Reserved.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api"/>
            <link href="http://static.springframework.org/spring/docs/1.1.5/api"/>
            <link href="http://jakarta.apache.org/commons/httpclient/2.0/apidocs"/>
            <link href="http://www.bouncycastle.org/docs/docs1.5"/>
            <link href="http://jaxen.codehaus.org/apidocs"/>
            <link href="http://www.dom4j.org/apidocs"/>
            <link href="http://jetty.mortbay.org/javadoc"/>
            <link href="http://tomcat.apache.org/tomcat-5.5-doc/catalina/docs/api"/>
            <link href="http://www.jfree.org/jfreechart/api/javadoc"/>
        </javadoc>
    </target>

    <target name="compile.main" depends="init-dev, prepare, configure_properties.dev, compile13, compile14">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.5" source="1.5">
            <compilerarg value="-Xlint" compiler="modern"/>
            <compilerarg value="-Xlint:-serial" compiler="modern"/>
            <compilerarg value="-Xlint:-path" compiler="modern"/>
            <compilerarg value="-Xlint:-unchecked" compiler="modern"/>
            <compilerarg value="-Xlint:-dep-ann" compiler="modern"/>
            <classpath refid="project.classpath"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc">
                <include name="serverconfig.properties"/>
                <include name="ehcache.xml"/>
            </fileset>
            <fileset dir="${src.root}/src">
                <include name="**/XMLSchema.xsd"/>
                <include name="**/xml.xsd"/>
                <include name="**/datatypes.dtd"/>
                <include name="**/XMLSchema.dtd"/>
            </fileset>
        </copy>
    </target>

    <!--
      ** main compile target
      -->
    <target name="compile"
            description="Compile the Java code and UI forms."
            depends="compile.forms"
            unless="compile.pattern">
    </target>

    <!--
      ** 'package' target.
      ** package the application ( both client and server) in their
      ** respective archives (war, jar).
      ** This target is invoked by other targets such as deploy and dist.
      -->
    <target name="package"
            description="Create the SSG WAR file and SSB/SSM installers."
            depends="package.gateway, package.bridge, package.manager, package.installclients, package.api, package.bcluna-jce, package.configwiz, package.systemconfigwiz"/>

    <target name="bridge" description="Build and package the SSB" depends="package.installbridge"/>
    <target name="manager" description="Build and package the SSM" depends="package.installmanager"/>
    <target name="gateway" description="Build and package the SSG" depends="package.gateway"/>

<!--
      ** Non 'build' targets from this point; just various helper targets.
      ** Please do not invoke below targets as main targets.
    -->

    <target name="package.gateway" depends="compile">
        <!-- the ssg war -->
        <war warfile="${build.dir}/${war}" webxml="${build.etc}/web.xml">
            <lib dir="${build.dir}/lib">
                <include name="bcprov-jdk15-127.jar"/>
                <include name="jgroups.jar"/>
                <include name="jboss-*.jar"/>
                <include name="commons-logging-1.0.4.jar"/>

                <include name="tarari_xcx.jar"/>
                <include name="tarari_xpath.jar"/>
                <include name="tarari_raxj.jar"/>
                <include name="activation.jar"/>
                <include name="mailapi-1.3.2.jar"/>
                <include name="smtp-1.3.2.jar"/>
                <include name="whirlycache-0.7.1.jar"/>
                <include name="policy-1.0.jar"/>
                <include name="commons-collections-2.1.1.jar"/>
                <include name="commons-dbcp-1.2.1.jar"/>
                <include name="commons-discovery.jar"/>
                <include name="commons-httpclient-2.0.2.jar"/>
                <include name="commons-lang-1.0.1.jar"/>
                <include name="commons-pool-1.2.jar"/>

                <include name="hibernate3.jar"/>
                <include name="antlr-2.7.6rc1.jar"/>
                <include name="asm.jar"/>
                <include name="asm-attrs.jar"/>
                <include name="c3p0-0.9.0.jar"/>
                <include name="dom4j-1.6.1.jar"/>
                <include name="cglib-2.1.3.jar"/>
                <include name="ehcache-1.1.jar"/>

                <include name="spring-aop.jar"/>
                <include name="spring-beans.jar"/>
                <include name="spring-context.jar"/>
                <include name="spring-core.jar"/>
                <include name="spring-dao.jar"/>
                <include name="spring-hibernate.jar"/>
                <include name="spring-jdbc.jar"/>
                <include name="spring-orm.jar"/>
                <include name="spring-remoting.jar"/>
                <include name="spring-support.jar"/>
                <include name="spring-web.jar"/>
                <include name="aopalliance.jar"/>
                <include name="nekohtml.jar"/>

                <!-- AdminWS Stuff -->
                <!--
                  This is the same as the jsr173_api.jar
                  <include name="stax-api-1.0.jar"/>
                -->
                <include name="jdom.jar"/>
                <include name="wstx-asl-2.9.jar"/>
                <include name="xfire-aegis-1.0.jar"/>
                <include name="xfire-core-1.0.jar"/>
                <include name="xfire-spring-1.0.jar"/>
                <include name="spring-webmvc.jar"/>
                <include name="0500-wsdl4j.jar"/>

                <include name="velocity-1.4.jar"/>
                <include name="jaxen-1.1-beta-2-l7.jar"/>
                <include name="jms-1.1.jar"/>
                <include name="jnlp.jar"/>
                <include name="jnlp-servlet.jar"/>
                <include name="jta.jar"/>
                <include name="odmg.jar"/>
                <include name="oswego-concurrent.jar"/>
                <include name="qname.jar"/>
                <include name="snmp4j.jar"/>
                <include name="log4j.jar"/> <!-- todo find a way to use snmp4j without log4j -->

                <include name="systinet-*.jar" if="include.systinet"/>
                <include name="jaxrpc.jar" unless="include.systinet"/>
                <include name="saaj.jar" unless="include.systinet"/>

                <include name="saxpath.jar"/>
                <include name="xalan-2.5.2.jar"/>
                <include name="jsr173_1.0_api.jar"/> <!-- StAX -->
                <include name="xbean.jar"/>
                <include name="xbean-xenc-xmldsig.jar"/>
                <include name="xbean-saml1_1.jar"/>
                <include name="xbean-saml2_0.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xml-apis.jar"/>
                <include name="xss4j.jar"/>


                <include name="xstream-1.1.2.jar"/>

                <!-- Include OpenJMS on dev builds -->
                <include name="openjms-client-0.7.6.jar" if="include.jms.openjms"/>
                <include name="exolabcore-0.3.7.jar" if="include.jms.openjms"/>

                <!-- Include MQSeries on dev builds -->
                <include name="com.ibm.mqbind.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mq.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mqjms.jar" if="include.jms.mqseries"/>
                <include name="connector.jar" if="include.jms.mqseries"/>

                <!-- Include Tibco on dev builds -->
                <include name="tibcrypt.jar" if="include.jms.tibco"/>
                <include name="tibjms.jar" if="include.jms.tibco"/>
                <include name="tibjmsadmin.jar" if="include.jms.tibco"/>
                <include name="tibjmsapps.jar" if="include.jms.tibco"/>
                <include name="tibrvjms.jar" if="include.jms.tibco"/>

                <include name="ojdbc14.jar" if="db.oracle8"/>
                <include name="ojdbc14.jar" if="db.oracle9"/>
                <include name="ojdbc14.jar" if="db.oracle10"/>

                <include name="mysql-connector-java-3.0.14-stable-bin.jar" if="db.mysql"/>
                <include name="postgresql.jar" if="db.postgres"/>
            </lib>

            <classes dir="${build.classes}">
                <!-- Tool, Manager, Bridge, Config Wizard and Test classes -->
                <exclude name="com/l7tech/internal/**/*"/>
                <exclude name="com/l7tech/console/**/*"/>
                <exclude name="com/l7tech/test/**/*"/>
                <exclude name="com/l7tech/server/jms/**/*" unless="include.jms"/>
                <exclude name="com/l7tech/proxy/gui/**"/>
                <exclude name="com/l7tech/server/config/**"/>

                <!-- Tomcat classes -->
                <exclude name="com/l7tech/server/tomcat/**"/>

                <!-- UDDI implementations (these should be packaged as modules) -->
                <exclude name="com/l7tech/server/service/uddi/impl/**"/>

                <!-- Classes that make up the Layer 7 API -->
                <exclude name="com/l7tech/policy/assertion/Assertion.class"/>
                <exclude name="com/l7tech/policy/assertion/PolicyAssertionException.class"/>
                <exclude name="com/l7tech/policy/assertion/composite/**"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/Category.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionUI.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/EditListener.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/SecurityContext.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceRequest.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceResponse.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceInvocation.class"/>
            </classes>

            <zipfileset dir="${src.root}/web" includes="*" prefix="ssg"/>
            <zipfileset dir="${src.root}/web" includes="*"/>
            <zipfileset dir="${src.root}/src/com/l7tech/common/resources" includes="wsil2xhtml.xml" prefix="ssg"/>
            <!-- Spring config -->
            <zipfileset dir="${src.root}/etc" includes="webApplicationContext.xml" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/etc" includes="dataAccessContext.xml" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/etc" includes="adminContext.xml" prefix="WEB-INF"/>

            <!-- AdminWS stuff -->
            <zipfileset dir="${src.root}/etc/admin/ws/xfire" prefix="WEB-INF">
                <include name="xfire-servlet.xml"/>
            </zipfileset>

            <!-- Web SecureSpan Manager stuff -->
            <zipfileset dir="${src.root}/etc/admin/" prefix="WEB-INF">
                <include name="admin-servlet.xml"/>
            </zipfileset>

            <zipfileset dir="${src.root}/src" includes="**/*.aegis.xml" prefix="WEB-INF/classes"/>
        </war>

        <jar jarfile="${build.dir}/l7valve.jar">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/server/tomcat/*.class"/>
                <exclude name="com/l7tech/server/tomcat/ClientTrusting*.class"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/l7provider.jar">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/server/tomcat/ClientTrusting*.class"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/ssg-uddi-module-systinetv3.jar">
            <zipfileset dir="${src.root}/lib/gateway/uddi/systinet" includes="*.jar" prefix="lib"/>
            <zipfileset dir="${src.root}/lib" prefix="lib">
                <include name="activation.jar"/>
            </zipfileset>
            <zipfileset dir="${src.root}/etc/services/uddi-systinet" prefix="META-INF/services"/>
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/server/service/uddi/impl/systinet/**"/>
            </fileset>
        </jar>
    </target>

    <target name="package.bridge" unless="ssg.only" depends="compile">
        <!-- the client proxy jar -->
        <jar jarfile="${build.dir}/Bridge.jar" manifest="${src.root}/etc/Bridge.mf">
            <fileset dir="${build.dir}/classes">
                <exclude name="**/*.form"/>
                <exclude name="com/l7tech/internal/**/*"/>

                <!-- Omit the third-party crypto drivers unless we need to ship with one or more of them.  Including it causes testpackage to fail -->
                <exclude name="com/l7tech/common/security/prov/rsa/**/*"/>
                <exclude name="com/l7tech/common/security/prov/ncipher/**/*"/>
                <exclude name="com/l7tech/common/security/prov/entrust/**/*"/>
                <exclude name="com/l7tech/common/security/prov/tarari/**/*"/>
                <exclude name="com/l7tech/common/security/prov/luna/**/*"/>
                <!-- goes in lib/ext -->
                <exclude name="com/l7tech/common/security/TrustedCert**"/>
                <exclude name="com/l7tech/common/security/CertEntity**"/>
                <exclude name="com/l7tech/common/security/X509Entity**"/>

                <!-- Tarari drivers not available in standalone Agent -->
                <exclude name="com/l7tech/common/xml/tarari/TarariUtil*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariFactories*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariMessageContextImpl*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/GlobalTarariContextImpl*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariElementCursor*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariCompiledXpath*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariCompiledStylesheetImpl*.class" />
                <exclude name="com/l7tech/common/xml/tarari/TarariSchemaSource*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariSchemaHandler*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/util/**/*"/>

                <!-- SchemaEntry relies on NamedEntityImp -->
                <exclude name="com/l7tech/common/xml/schema/SchemaEntry*.class/"/>

                <!-- Exclude unless Log4j is used -->
                <exclude name="com/l7tech/common/util/Log4jJdkLogAppender.class"/>

                <exclude name="com/l7tech/common/audit/**/*"/>
                <exclude name="com/l7tech/common/alert/**/*"/>

                <exclude name="com/l7tech/policy/server/**/*"/>
                <exclude name="com/l7tech/policy/exporter/**/*"/>
                <exclude name="com/l7tech/policy/validator/RequestXpathAssertionValidator.class"/>
                <exclude name="com/l7tech/policy/validator/ValidatorFactory.class"/>

                <include name="com/l7tech/proxy/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/logging/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <exclude name="com/l7tech/policy/assertion/ext/**/*"/>
            </fileset>
            <fileset dir="${src.root}/etc">
                <include name="login.config"/>
            </fileset>
        </jar>
    </target>

    <target name="ca.availablecheck">
	<available file="${customassertions.src.dir}" property="customassertion.available"/>
    </target>

    <!--
      Target to create an empty CA jar if we're not building CA (keeps packager happy)
    -->
    <target name="ca.createemptyjar" unless="customassertion.available">
        <jar jarfile="${build.lib}/${customassertions.jar.name}"/>
    </target>

    <target name="package.manager.ca" depends="ca.availablecheck, ca.createemptyjar" if="customassertion.available">
        <exec executable="sh" dir="${customassertions.src.dir}">
            <arg line="./build.sh build-deployment-jar"/>
        </exec>
        <copy todir="${build.lib}" file="${customassertions.jar.path}"/>
    </target>

    <target name="package.manager" unless="ssg.only" depends="compile, package.manager.ca">
        <jar jarfile="${build.dir}/Manager.jar" manifest="${src.root}/etc/Manager.mf">
            <fileset dir="${build.dir}/classes">
                <exclude name="**/*.form"/>
                <include name="**/*.xsd"/>
                <include name="**/*.dtd"/>
                <exclude name="com/l7tech/internal/**/*"/>

                <include name="com/l7tech/admin/Admin*.class"/>
                <exclude name="com/l7tech/logging/rmi/**/*"/>
                <exclude name="com/l7tech/policy/server/**/*"/>
                <include name="com/l7tech/identity/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <exclude name="com/l7tech/common/http/prov/apache/**/*"/>
                <exclude name="com/l7tech/common/security/prov/**/*"/>
                <exclude name="com/l7tech/common/security/saml/**/*Statement*"/>
                <exclude name="com/l7tech/common/security/saml/**/*Assertion*"/>
                <include name="com/l7tech/common/security/saml/SamlConstants.class"/>
                <exclude name="com/l7tech/common/message/**/*"/>
                <exclude name="com/l7tech/common/xml/saml/**/*"/>
                <exclude name="com/l7tech/common/xml/tarari/*.class"/>
                <include name="com/l7tech/common/xml/tarari/util/*.class" />
                <exclude name="com/l7tech/common/security/wstrust/**/*" />
                <include name="com/l7tech/common/security/TrustedCert*.class"/>
                <exclude name="com/l7tech/common/security/AesKey.class"/>
                <exclude name="com/l7tech/common/security/Cert*.class"/>
                <exclude name="com/l7tech/common/security/Jce*.class"/>
                <exclude name="com/l7tech/common/security/Rsa*.class"/>
                <exclude name="com/l7tech/common/util/Pkcs12*.class"/>
                <exclude name="com/l7tech/common/util/CertificateDownloader.class"/>
                <exclude name="com/l7tech/common/util/Log4jJdkLogAppender.class"/>
                <exclude name="com/l7tech/common/security/xml/processor/**/*"/>
                <exclude name="com/l7tech/common/security/xml/decorator/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/JmsReplyTypeMapper*.class"/>

                <include name="com/l7tech/cluster/ClusterNodeInfo.class"/>
                <include name="com/l7tech/cluster/ClusterStatusAdmin.class"/>
                <include name="com/l7tech/cluster/ServiceUsage.class"/>
                <include name="com/l7tech/cluster/GatewayStatus.class"/>
                <include name="com/l7tech/cluster/LogRequest.class"/>
                <include name="com/l7tech/cluster/ClusterProperty.class"/>
                <include name="com/l7tech/console/**/*"/>
                <include name="com/l7tech/logging/GenericLogAdmin.class"/>
                <include name="com/l7tech/logging/LogAdmin.class"/>
                <include name="com/l7tech/logging/SSGLogRecord.class"/>
                <include name="com/l7tech/logging/LogMessage.class"/>
                <include name="com/l7tech/logging/StatisticsRecord.class"/>
                <!-- <include name="com/l7tech/message/**/*"/> -->
                <include name="com/l7tech/message/Message.class"/>
                <include name="com/l7tech/message/Request.class"/>
                <include name="com/l7tech/message/Response.class"/>
                <include name="com/l7tech/objectmodel/*Exception.class"/>
                <include name="com/l7tech/objectmodel/Entity.class"/>
                <include name="com/l7tech/objectmodel/NamedEntity.class"/>
                <include name="com/l7tech/objectmodel/EntityHeader*.class"/>
                <include name="com/l7tech/objectmodel/EntityType.class"/>
                <include name="com/l7tech/objectmodel/EntityManager.class"/>
                <include name="com/l7tech/objectmodel/ObjectPermission.class"/>
                <include name="com/l7tech/objectmodel/imp/*"/>
                <include name="com/l7tech/objectmodel/alert/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/objectmodel/ObjectIdentity.class"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionsRegistrar.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionDescriptor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Impl*"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertions.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Service*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Security*"/>
                <include name="com/l7tech/service/ServiceAdmin.class"/>
                <include name="com/l7tech/service/ServiceAdminPublic.class"/>
                <include name="com/l7tech/service/PublishedService*.class"/>
                <include name="com/l7tech/service/SampleMessage.class"/>
                <include name="com/l7tech/service/ServiceStatistics.class"/>
                <include name="com/l7tech/service/MetricsBin.class"/>
                <include name="com/l7tech/service/ResolutionParameterTooLongException.class"/>
                <include name="com/l7tech/spring/remoting/rmi/**/*"/>
                <include name="com/l7tech/spring/remoting/http/**/*"/>
                <exclude name="com/l7tech/spring/remoting/http/SecureHttpFilter*.class"/>
                <exclude name="com/l7tech/spring/remoting/http/SecureRemoteInvocationExecutor*.class"/>
            </fileset>
        </jar>
    </target>

    <!-- Build LicenseGenerator package.  Always invoked by hand. -->
    <target name="package.licensegenerator" unless="ssg.only"
            depends="init-dev, compile">
        <jar jarfile="${build.dir}/LicenseGenerator.jar" manifest="${src.root}/etc/LicenseGenerator.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/internal/**/*"/>
                <include name="com/l7tech/common/*License*"/>
                <include name="com/l7tech/common/util/**/*"/>
                <include name="com/l7tech/common/BuildInfo.class"/>
                <include name="com/l7tech/common/gui/**/*"/>
                <include name="com/l7tech/common/security/xml/DsigUtil*"/>
                <include name="com/l7tech/common/security/xml/CertificateResolver.class"/>
                <include name="com/l7tech/common/security/xml/KeyInfoElement*"/>
                <include name="com/l7tech/common/security/token/ParsedElement*"/>
                <include name="com/l7tech/common/xml/*Exception.class"/>
                <include name="com/l7tech/common/security/xml/*Exception.class"/>
                <include name="com/l7tech/common/security/xml/SimpleCertificateResolver*"/>

                <exclude name="com/l7tech/common/xml/saml/**/*"/>
                <exclude name="com/l7tech/common/xml/*SoapMessage*"/>
                <exclude name="com/l7tech/common/xml/tarari/**/*"/>
                <exclude name="com/l7tech/common/xml/*Wsdl*"/>
                <exclude name="com/l7tech/common/xml/*Xpath*"/>
                <exclude name="com/l7tech/common/util/*CheckInfo*"/>
                <exclude name="com/l7tech/common/util/*SoapFaultUtil*"/>
            </fileset>
        </jar>

        <exec executable="perl" failonerror="true" dir="installer">
            <env key="JAVA_HOME" value="$(java.home}"/>
            <arg line="make_zip.pl"/>
            <arg line="LicenseGenerator"/>
        </exec>
    </target>

    <target name="package.installclients" unless="ssg.only" depends="compile">
        <exec executable="perl" failonerror="true" dir="installer">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="make_installers.pl"/>
            <arg line="-N"/>
        </exec>
        <!-- invoke the dssm webstart target (conditional) -->
    </target>

    <target name="package.installbridge" depends="package.bridge">
        <exec executable="perl" failonerror="true" dir="installer">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="make_installers.pl"/>
            <arg line="-N"/>
            <arg line="Bridge"/>
        </exec>
    </target>

    <target name="package.installmanager" depends="package.manager">
        <exec executable="perl" failonerror="true" dir="installer">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="make_installers.pl"/>
            <arg line="-N"/>
            <arg line="Manager"/>
        </exec>
    </target>

    <target name="package.bcluna-jce" depends="compile">
        <jar jarfile="${build.dir}/bcluna-jce.jar" manifest="${src.root}/etc/bcluna-jce.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/common/security/prov/luna/BouncyCastleToLunaProvider.class"/>
            </fileset>
        </jar>
    </target>

    <target name="package.configwiz" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/configwizard"/>
        <mkdir dir="${build.dir}/configwizard/lib"/>

        <copy todir="${build.dir}/configwizard/lib">
            <fileset dir="${build.dir}/lib">
                <include name="commons-lang-1.0.1.jar"/>
                <include name="forms_rt.jar"/>
                <include name="mysql-connector-java-3.0.14-stable-bin.jar"/>
                <include name="xss4j.jar"/>
                <include name="bcprov-jdk15-127.jar"/>
                <include name="kunststoff.jar"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/configwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssgconfig.cmd"/>
                <include name="ssgconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <jar jarfile="${build.dir}/configwizard/ConfigWizard.jar" manifest="${src.root}/etc/ConfigWizard.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/identity/CannotDeleteAdminAccountException.class"/>

                <include name="com/l7tech/common/BuildInfo.class"/>

                <include name="com/l7tech/common/util/FileUtils.class"/>
                <include name="com/l7tech/common/util/ResourceUtils.class"/>
                <include name="com/l7tech/common/util/XmlUtil*.class"/>
                <include name="com/l7tech/common/util/HexUtils*.class"/>
                <include name="com/l7tech/common/util/EnumTranslator*.class"/>
                <include name="com/l7tech/common/io/BufferPoolByteArrayOutputStream.class"/>

                <include name="com/l7tech/common/util/CertUtils*.class"/>
                <include name="com/l7tech/common/util/WhirlycacheFactory*.class"/>
                <include name="com/l7tech/common/util/ExceptionUtils.class"/>
                <include name="com/l7tech/common/gui/util/Utilities*.class"/>
                <include name="com/l7tech/common/gui/util/ImageCache.class"/>
                <include name="com/l7tech/common/gui/widgets/PleaseWaitDialog.class"/>
                <include name="com/l7tech/common/util/JdkLoggerConfigurator*.class"/>
                <include name="com/l7tech/common/xml/*.class"/>

                <include name="com/l7tech/console/panels/Wizard*.class"/>
                <include name="com/l7tech/console/event/Wizard*.class"/>
                <include name="com/l7tech/console/event/WeakEventListenerList.class"/>
                <include name="com/l7tech/console/resources/layer7_logo_small_32x32.png"/>

                <include name="com/l7tech/objectmodel/DeleteException.class"/>
                <include name="com/l7tech/objectmodel/ObjectModelException.class"/>
                <include name="com/l7tech/objectmodel/Entity.class"/>
                <include name="com/l7tech/objectmodel/NamedEntity.class"/>
                <include name="com/l7tech/objectmodel/imp/EntityImp.class"/>
                <include name="com/l7tech/objectmodel/imp/NamedEntityImp.class"/>

                <include name="com/l7tech/server/config/**/*"/>
                <include name="com/l7tech/server/util/MakeLunaCerts*.class"/>
                <include name="com/l7tech/server/util/SetKeys*.class"/>

                <include name="com/l7tech/common/security/*.class"/>
                <include name="com/l7tech/common/security/prov/luna/*.class"/>
                <include name="com/l7tech/common/security/prov/bc/*.class"/>

                <exclude name="com/l7tech/common/xml/SoapMessageGenerator*.class"/>
                <exclude name="com/l7tech/common/xml/Wsdl*.class"/>
                <exclude name="com/l7tech/common/xml/DOMResultXMLStreamWriter.class"/>
                <exclude name="com/l7tech/common/xml/XpathEvaluator.class"/>
                <exclude name="com/l7tech/common/xml/XpathExpression.class"/>
            </fileset>
        </jar>
    </target>

    <target name="package.systemconfigwiz" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/sysconfigwizard"/>
        <mkdir dir="${build.dir}/sysconfigwizard/lib"/>

        <copy todir="${build.dir}/sysconfigwizard/lib">
            <fileset dir="${build.dir}/lib">
                <include name="commons-lang-1.0.1.jar"/>
                <include name="commons-logging-1.0.4.jar"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssg_sys_config.pl"/>
                <include name="systemconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <jar jarfile="${build.dir}/sysconfigwizard/SystemConfigWizard.jar" manifest="${src.root}/etc/SystemConfigWizard.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/common/util/JdkLoggerConfigurator*.class"/>
                <include name="com/l7tech/server/config/ui/console/ConfigurationWizard.class"/>
                <include name="com/l7tech/server/config/ui/console/ConfigWizardConsoleStep.class"/>
                <include name="com/l7tech/server/config/ui/console/BaseConsoleStep.class"/>
                <include name="com/l7tech/server/config/ui/console/ConsoleWizardUtils.class"/>
                <include name="com/l7tech/server/config/ui/console/ConfigWizardConsoleSummaryStep.class"/>
                <include name="com/l7tech/server/config/ui/console/ConfigWizardConsoleResultsStep.class"/>
                <include name="com/l7tech/server/config/commands/ConfigurationCommand.class"/>
                <include name="com/l7tech/server/config/commands/BaseConfigurationCommand.class"/>
                <include name="com/l7tech/server/config/beans/ConfigurationBean.class"/>
                <include name="com/l7tech/server/config/beans/BaseConfigurationBean.class"/>
                <include name="com/l7tech/server/config/exceptions/*.class"/>
                <include name="com/l7tech/server/config/systemconfig**/*"/>
                <include name="com/l7tech/server/config/*.class"/>
            </fileset>
        </jar>
    </target>

    <target name="package.api" depends="compile">
<!--
           ** Layer7 API jar, pack and sign
         -->
        <jar jarfile="${build.dir}/layer7-api.jar" manifest="${src.root}/etc/layer7-api.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/policy/assertion/Assertion*.class"/>
                <include name="com/l7tech/policy/assertion/PolicyAssertionException.class"/>
                <include name="com/l7tech/policy/assertion/composite/**"/>
                <include name="com/l7tech/policy/assertion/ext/AssertionEditor.class"/>
                <include name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.class"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionUI.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
                <include name="com/l7tech/policy/assertion/ext/EditListener.class"/>
                <include name="com/l7tech/policy/assertion/ext/SecurityContext.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceRequest.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceResponse.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.class"/>
            </fileset>
        </jar>

        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}" includes="layer7-api.jar"/>
        </signjar>

        <mkdir dir="${build.dir}/docs">

        </mkdir>

        <!--produce accompanying javadoc for layer7-api-->
        <javadoc
                destdir="${build.dir}/docs/layer7-api"
                version="true"
                author="false"
                use="true"
                windowtitle="Layer 7 External API">

            <fileset dir="${src.root}/src/" defaultexcludes="yes">
                <!-- Leave some classes undocumented; they appear in the api jar, but aren't supposed to be used by 3rd party devlopers-->
                <!--<include name="com/l7tech/policy/assertion/Assertion.java"/> -->
                <!--<include name="com/l7tech/policy/assertion/PolicyAssertionException.java"/>-->
                <!--<include name="com/l7tech/policy/assertion/composite/CompositeAssertion.java"/>-->
                <include name="com/l7tech/policy/assertion/ext/AssertionEditor.java"/>
                <include name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.java"/>
                <include name="com/l7tech/policy/assertion/ext/Category.java"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.java"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionUI.java"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
                <include name="com/l7tech/policy/assertion/ext/EditListener.java"/>
                <include name="com/l7tech/policy/assertion/ext/SecurityContext.java"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceRequest.java"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceResponse.java"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.java"/>
            </fileset>
        </javadoc>
    </target>

    <!--
      ** Ensure that all classes in the Bridge and Manager jar files are loadable when the classpath
      ** contains only the jars and their declared dependency jars.
      -->
    <target name="testpackage" description="Test classpaths for packages." depends="testpackage.work, testpackage.report, checkfail"/>
    <target name="testpackage.report" depends="testpackage.report.bridge, testpackage.report.manager, testpackage.report.configwizard"/>
    <target name="testpackage.report.bridge" if="testpackage.bridge.fail">
        <echo level="warning">Bridge package test failed.</echo>
        <property name="fail" value="true"/>
    </target>
    <target name="testpackage.report.manager" if="testpackage.manager.fail">
        <echo level="warning">Manager package test failed.</echo>
        <property name="fail" value="true"/>
    </target>
    <target name="testpackage.report.configwizard" if="testpackage.configwizard.fail">
        <echo level="warning">ConfigWizard package test failed.</echo>
        <property name="fail" value="true"/>
    </target>
    <target name="testpackage.work" depends="package">
        <javac srcdir="tools" destdir="tools" debug="on" optimize="off"
               deprecation="on" verbose="no"/>
        <exec executable="perl" failonerror="false" resultproperty="testpackage.manager.result">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/Manager.jar"/>
            <arg line="etc/Manager.mf"/>
        </exec>
        <condition property="testpackage.manager.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.manager.result}"/>
            </not>
        </condition>
        <exec executable="perl" failonerror="false" resultproperty="testpackage.bridge.result">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/Bridge.jar"/>
            <arg line="etc/Bridge.mf"/>
        </exec>
        <condition property="testpackage.bridge.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.bridge.result}"/>
            </not>
        </condition>
        <exec executable="perl" failonerror="false" resultproperty="testpackage.configwizard.result">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/configwizard/ConfigWizard.jar"/>
            <arg line="etc/ConfigWizard.mf"/>
            <arg line="com.l7tech.common.security.prov.luna.BouncyCastleToLunaProvider com.l7tech.common.security.prov.luna.LunaJceProviderEngine"/>
        </exec>
        <condition property="testpackage.configwizard.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.configwizard.result}"/>
            </not>
        </condition>
    </target>

    <!-- Test LicenseGenerator package.  Always invoked by hand. -->
    <target name="testpackage.licensegenerator" depends="package.licensegenerator">
        <javac srcdir="tools" destdir="tools" debug="on" optimize="off"
               deprecation="on" verbose="no"/>
        <exec executable="perl" failonerror="true">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/LicenseGenerator.jar"/>
            <arg line="etc/LicenseGenerator.mf"/>
        </exec>
    </target>

    <target name="checkfail">
        <fail if="fail">Exiting due to build failures.</fail>
    </target>

    <target name="properties.check" depends="properties.check.tomcathome">
    </target>

    <target name="properties.check.tomcathome" unless="tomcat.home">
        <echo level="warning">Property is not defined: 'tomcat.home'</echo>
    </target>

<!--
      ** The SSM Webstart target. Signs the SSM components, and adds the bundle into the applicaiton (war)
      ** The target is conditional, set the ssm.webstart property to enable it.
      -->
    <target name="ssm-webstart" if="ssm.webstart">
        <!-- sign the ssm jar  -->
        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}/lib" includes="jh.jar,kunststoff.jar,
                                                       looks-1.1.3.jar,odmg.jar,hibernate3.jar,oswego-concurrent.jar,0500-wsdl4j.jar,qname.jar, xercesImpl.jar,xml-apis.jar,
                                                       commons-httpclient-2.0.2.jar,commons-lang-1.0.1.jar,commons-collections-2.1.1.jar, commons-logging-1.0.4.jar, forms_rt.jar,jedit-syntax.jar,
                                                       jaxen-1.1-beta-2-l7.jar,saxpath.jar,jaxrpc.jar,saaj.jar, dom4j-1.6.1.jar, commons-discovery.jar, lib/jcommon-1.0.0.jar, lib/jfreechart-1.0.1.jar"/>
        </signjar>
        <signjar jar="${build.dir}/Manager.jar" keystore="${src.root}/etc/ssgKeyStore" alias="signer"
                 storepass="password"/>

        <war warfile="${build.dir}/${war}" update="true">
            <!-- SSM webstart -->
            <zipfileset dir="${src.root}/etc/jnlp" includes="ssm.jnlp" prefix="ssm"/>
            <zipfileset dir="${src.root}/src/com/l7tech/console/resources" includes="layer7_logo_small_64x64.gif"
                        prefix="ssm/images"/>
            <zipfileset dir="${build.dir}/lib" includes="jh.jar,kunststoff.jar,
                                                         looks-1.1.3.jar,odmg.jar,hibernate3.jar,oswego-concurrent.jar,0500-wsdl4j.jar,qname.jar, xercesImpl.jar,xml-apis.jar,
                                                         commons-httpclient-2.0.2.jar,commons-lang-1.0.1.jar,commons-collections-2.1.1.jar, commons-logging-1.0.4.jar, forms_rt.jar,jedit-syntax.jar,
                                                         jaxen-1.1-beta-2-l7.jar,saxpath.jar,jaxrpc.jar,saaj.jar, dom4j-1.6.1.jar,commons-discovery.jar, lib/jcommon-1.0.0.jar, lib/jfreechart-1.0.1.jar"
                        prefix="ssm/lib"/>
            <zipfileset dir="${build.dir}" includes="Manager.jar" prefix="ssm"/>
        </war>
    </target>


    <target name="prepare.jms" if="dev.build" depends="prepare.jms.openjms, prepare.jms.mqseries, prepare.jms.tibco"/>

    <target name="prepare.db" depends="
        prepare.db.oracle8,
        prepare.db.oracle9,
        prepare.db.oracle10,
        prepare.db.mysql,
        prepare.db.postgres
    "/>

    <target name="prepare.jms.openjms" if="include.jms.openjms">
        <echo>Copying OpenJMS jars from ${src.root}/lib/gateway/jms/openjms to ${build.lib}...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jms/openjms">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.jms.mqseries" if="include.jms.mqseries">
        <echo>Copying MQSeries jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jms/mqseries">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.jms.tibco" if="include.jms.tibco">
        <echo>Copying Tibco EMS jars from ${src.root}/lib/gateway/jms/tibco to ${build.lib}...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jms/tibco">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.mysql" if="db.mysql">
        <echo>Copying MySQL jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/mysql">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.postgres" if="db.postgres">
        <echo>Copying PostgreSQL jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/postgres">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle8" if="db.oracle8">
        <echo>Copying Oracle 8 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle8">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle9" if="db.oracle9">
        <echo>Copying Oracle 9 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle9">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle10" if="db.oracle10">
        <echo>Copying Oracle 10 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle10">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>


    <!--
    <target name="prepare.systinet" if="include.systinet">
    this is causing problems with including these jars through Manager.mf
    and is redundant anyway since the package.gateway will test
    include.systinet before including in war anyway.
    -->
    <target name="prepare.systinet">
        <echo>Copying Systinet jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/uddi/systinet">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.base">
        <!-- time stamp -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.test.classes}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <mkdir dir="${javadoc.home}"/>

        <!-- lib -->
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib">
                <include name="*.jar"/>
                <include name="*.zip"/>
                <exclude name="**/CVS/*"/>
                <exclude name="**/ant.jar"/>
                <exclude name="**/ant-contrib.jar"/>
                <exclude name="**/optional.jar"/>
                <exclude name="**/*junit.jar"/>
            </fileset>

            <!-- the default crypto provider -->
            <fileset dir="${src.root}/lib/crypto/bc">
                <include name="bcprov*.jar"/>
            </fileset>

            <fileset dir="${src.root}/lib/gateway/cluster">
                <include name="*.jar"/>
            </fileset>

            <fileset dir="${src.root}/lib/gateway/tarari">
                <include name="*.jar"/>
            </fileset>

            <fileset dir="${src.root}/lib/gateway/snmp">
                <include name="*.jar"/>
            </fileset>

            <fileset dir="${src.root}/lib/gateway/adminws">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <!-- the web.xml -->
        <copy todir="${build.etc}">
            <fileset dir="${src.root}/etc">
                <include name="web.xml"/>
            </fileset>
        </copy>

        <!-- Resources -->
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <!-- <include name="hibernate.cfg.xml"/> -->
                <include name="hibernate.properties" if="dev.build"/>
            </fileset>

            <fileset dir="${src.root}/etc/db">
                <include name="SSG.hbm.xml"/>
                <include name="audit.hbm.xml"/>
                <include name="identityMapping.hbm.xml"/>
                <include name="c3p0.properties"/>
            </fileset>

            <fileset dir="${src.root}/etc">
                <include name="keystore.properties" if="dev.build"/>
                <include name="uddi.properties"/>
                <include name="spring.xml"/>
                <include name="treecache-service.xml"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="**/resources/*"/>
                <include name="**/resources/**/*"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/server/**/*.properties"/>
                <include name="com/l7tech/console/**/*.properties"/>
                <include name="com/l7tech/console/resources/helpset/**/*"/>
            </fileset>

            <fileset dir="${src.root}/tests">
                <include name="com/l7tech/**/*.properties" if="dev.build"/>
                <include name="com/l7tech/common/security/xml/test_*" if="dev.build"/>
                <include name="com/l7tech/**/*.xml" if="dev.build"/>
                <include name="com/l7tech/**/*.pfx" if="dev.build"/>
                <include name="com/l7tech/**/*.crt" if="dev.build"/>
                <include name="com/l7tech/**/*.xsd" if="dev.build"/>
                <include name="com/l7tech/**/*.wsdl" if="dev.build"/>
                <include name="**/resources/*" if="dev.build"/>
                <include name="**/resources/**/*" if="dev.build"/>
            </fileset>


            <fileset dir="${src.root}/src">
                <include name="com/l7tech/proxy/resources/**"/>
            </fileset>
        </copy>

        <!-- set up build number -->
        <property file="build.number"/>
    </target>

    <!--
      ** Create the directory structure, copy the resources, libs and
      ** update version tokens
      -->
    <target name="prepare"
            depends="prepare.base, prepare.jms, prepare.db, prepare.systinet, keystore.properties, INTERNAL-buildinfo">

        <!-- set up build number if it isn't already set -->
        <property file="build.number"/>

        <!-- html and other static web files -->
        <copy todir="${doc.root}">
            <fileset dir="${src.root}/web" includes="**/*"
                     excludes="**/CVS/*"/>
        </copy>
    </target>

    <target name="keystore.properties" if="dev.build">
        <echo>Keystore directory is ${keystoredir}</echo>
        <propertyfile file="${build.classes}/keystore.properties">
            <entry key="keystoredir" value="${keystoredir}"/>
            <entry key="rootcakspasswd" value="${ca.keystore.password}"/>
            <entry key="sslkspasswd" value="${ssl.keystore.password}"/>
        </propertyfile>
    </target>

    <!--
     ** 1.3 compile target - the files that require 1.3 source/target flags
     ** This is required by custom assertion library to support integration with components
     ** such as Tivoli that require 1.3 VM
    -->
    <target name="compile13" depends="prepare, configure_properties.dev" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.3" source="1.3">
            <!--
                This has to bee in sinch with layer7-api jar package.
                todo: find some better way to manage this centrally (ant 'references' or similar)
            -->
            <include name="com/l7tech/policy/assertion/Assertion.java"/>
            <include name="com/l7tech/policy/assertion/PolicyAssertionException.java"/>
            <include name="com/l7tech/policy/assertion/composite/**"/>
            <include name="com/l7tech/policy/assertion/ext/AssertionEditor.java"/>
            <include name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.java"/>
            <include name="com/l7tech/policy/assertion/ext/Category.java"/>
            <include name="com/l7tech/policy/assertion/ext/CustomAssertion.java"/>
            <include name="com/l7tech/policy/assertion/ext/CustomAssertionUI.java"/>
            <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
            <include name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
            <include name="com/l7tech/policy/assertion/ext/EditListener.java"/>
            <include name="com/l7tech/policy/assertion/ext/SecurityContext.java"/>
            <include name="com/l7tech/policy/assertion/ext/ServiceRequest.java"/>
            <include name="com/l7tech/policy/assertion/ext/ServiceResponse.java"/>
            <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.java"/>

            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <!--
     ** 1.4 compile target - the files that require 1.4 source/target flags
    -->
    <target name="compile14" depends="prepare, configure_properties.dev" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" verbose="off" target="1.4" source="1.4">
            <classpath refid="project.classpath"/>

            <!-- All these includes should be maintained at 1.4 compatibility -->
            <include name="com/l7tech/common/**/*.java"/>
            <include name="com/l7tech/policy/**/*.java"/>
            <include name="com/l7tech/proxy/**/*.java"/>
            <include name="com/l7tech/objectmodel/EntityHeader.java"/>
            <include name="com/l7tech/objectmodel/EntityType.java"/>
            <include name="com/l7tech/policy/variable/BuiltinVariables.java"/> <!-- Used by assertion beans -->
            <include name="com/l7tech/policy/variable/ExpandVariables.java"/> <!-- Used by assertion beans -->

            <!-- The following, as well as anything not included above, can go to 1.5 -->
            <exclude name="com/l7tech/policy/variable/**/*.java"/>
            <exclude name="com/l7tech/common/Authorizer.java"/>
            <exclude name="com/l7tech/common/http/cache/**/*.java"/>
            <exclude name="com/l7tech/common/security/prov/luna/**/*.java"/>
            <exclude name="com/l7tech/common/security/prov/ncipher/**/*.java"/>
            <exclude name="com/l7tech/common/security/prov/rsa/**/*.java"/>
            <exclude name="com/l7tech/common/alert/**/*.java"/>
            <exclude name="com/l7tech/common/audit/**/*.java"/>
            <exclude name="com/l7tech/common/transport/jms/**/*.java"/>
            <exclude name="com/l7tech/common/security/TrustedCert.java"/>
            <exclude name="com/l7tech/common/security/TrustedCertAdmin.java"/>
            <exclude name="com/l7tech/common/security/X509Entity.java"/>
            <exclude name="com/l7tech/common/xml/SoapMessageGenerator.java"/>
            <exclude name="com/l7tech/common/xml/schema/**/*.java"/>
            <exclude name="com/l7tech/common/xml/tarari/**/*.java"/>
            <exclude name="com/l7tech/policy/assertion/ext/**/*.java"/>
        </javac>
    </target>

    <target name="compile.forms" depends="compile.main">
        <javac2 srcdir="src" destdir="${build.classes}" debug="on" target="1.4" optimize="on" source="1.4"
                classpathref="project.classpath">
            <include name="**/*.form"/>
        </javac2>
    </target>

    <target name="db.properties"
            depends="db.properties.mysql, db.properties.postgres, db.properties.oracle8, db.properties.oracle9, db.properties.oracle10"/>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <property name="database.driver" value="${my.database.driver}"/>
        <property name="database.url" value="${my.database.url}"/>
        <property name="database.user" value="${my.database.user}"/>
        <property name="database.password" value="${my.database.password}"/>
        <property name="database.pingstmt" value="${my.database.pingstmt}"/>
    </target>

    <target name="db.properties.postgres" if="db.postgres">
        <echo>Setting database properties for PostgreSQL...</echo>
        <property name="database.driver" value="${pg.database.driver}"/>
        <property name="database.url" value="${pg.database.url}"/>
        <property name="database.user" value="${pg.database.user}"/>
        <property name="database.password" value="${pg.database.password}"/>
        <property name="database.pingstmt" value="${pg.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle8" if="db.oracle8">
        <echo>Setting database properties for Oracle 8...</echo>
        <property name="database.driver" value="${oracle8.database.driver}"/>
        <property name="database.url" value="${oracle8.database.url}"/>
        <property name="database.user" value="${oracle8.database.user}"/>
        <property name="database.password" value="${oracle8.database.password}"/>
        <property name="database.pingstmt" value="${oracle8.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle9" if="db.oracle9">
        <echo>Setting database properties for Oracle 9...</echo>
        <property name="database.driver" value="${oracle9.database.driver}"/>
        <property name="database.url" value="${oracle9.database.url}"/>
        <property name="database.user" value="${oracle9.database.user}"/>
        <property name="database.password" value="${oracle9.database.password}"/>
        <property name="database.pingstmt" value="${oracle9.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle10" if="db.oracle10">
        <echo>Setting database properties for Oracle 10...</echo>
        <property name="database.driver" value="${oracle10.database.driver}"/>
        <property name="database.url" value="${oracle10.database.url}"/>
        <property name="database.user" value="${oracle10.database.user}"/>
        <property name="database.password" value="${oracle10.database.password}"/>
        <property name="database.pingstmt" value="${oracle10.database.pingstmt}"/>
    </target>

<!--
     ** token replacement target.
     ** This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties.dev" depends="db.properties" if="dev.build">

        <echo message="database.driver   = '${database.driver}'"/>
        <echo message="database.url      = '${database.url}'"/>
        <echo message="database.user     = '${database.user}'"/>
        <echo message="database.pingstmt = '${database.pingstmt}'"/>

        <replace file="${build.classes}/hibernate.properties"
                 token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_URL" value="${database.url}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_USER" value="${database.user}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_PASSWORD" value="${database.password}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_PINGSTMT" value="${database.pingstmt}"/>
        <!--
        <replace file="${build.etc}/web.xml"
                 token="TOMCAT_HOME" value="${tomcat.home}"/>
        -->
    </target>

<!--
     ** token replacement target.
     ** This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties.install" unless="dev.build">
    </target>

    <!-- ** tests compilation target -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="tests" destdir="${build.test.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no">
            <classpath refid="project.test.classpath"/>
        </javac>
        <copy todir="${build.test.classes}">
            <fileset dir="tests">
                <include name="**/resources/*"/>
            </fileset>
        </copy>
    </target>

    <target name="test-ssg">
        <parallel>
            <antcall target="start-tomcat"/>
            <sequential>
                <waitfor maxwait="20" maxwaitunit="second" checkevery="500">
                    <http url="http://localhost:8080/"/>
                </waitfor>

                <!-- Do some tests -->

                <antcall target="stop-tomcat"/>
            </sequential>
        </parallel>
    </target>

    <target name="start-tomcat" if="tomcat.home" depends="properties.check">
        <!-- depends="deploy" -->
        <exec executable="${java.home}/bin/java" dir="${tomcat.home}">
            <arg line="-Dcatalina.home=${tomcat.home}"/>
            <arg line="-jar ${tomcat.home}/bin/bootstrap.jar"/>
            <arg line="start"/>
        </exec>
    </target>

    <target name="stop-tomcat" if="tomcat.home" depends="properties.check">
        <exec executable="${java.home}/bin/java" dir="${tomcat.home}">
            <arg line="-Dcatalina.home=${tomcat.home}"/>
            <arg line="-jar ${tomcat.home}/bin/bootstrap.jar"/>
            <arg line="stop"/>
        </exec>
    </target>

    <target name="make-install-image">
        <echo>Please use ssg-install-full or ssg-install-upgrade instead!</echo>
    </target>

    <target name="ssg-install-full">
        <antcall target="INTERNAL-ssg-install">
            <param name="install.full" value="true"/>
        </antcall>
    </target>

    <target name="ssg-install-upgrade" depends="INTERNAL-ssg-install"/>

    <target name="INTERNAL-ssg-install-optional-1" depends="INTERNAL-ssg-install-properties-full"/>
    <target name="INTERNAL-ssg-install-optional-2"
            depends="INTERNAL-ssg-install-war, INTERNAL-ssg-install-keystores, INTERNAL-ssg-install-properties-upgrade"/>

    <target name="INTERNAL-ssg-install-war">
        <!-- Expand ROOT-bxxxx.war into tomcat/webapps -->
        <echo>Expanding ${install.src.war}...</echo>
        <unwar src="${install.src.war}" dest="${install.src.tomcat}/webapps/ROOT"/>
    </target>

    <target name="INTERNAL-ssg-install-properties-full" if="install.full" depends="db.properties">
        <!-- Copy hibernate.properties -->
        <property name="install.src.hibernate.properties" value="${install.src.conf}/hibernate.properties"/>
<!--
                <property name="database.driver" value="${my.database.driver}"/>
                <property name="database.url" value="${my.database.url}"/>
        -->

        <copy file="${src.root}/etc/db/${database.type}/hibernate.properties"
              tofile="${install.src.hibernate.properties}"/>

        <replace file="${install.src.hibernate.properties}" token="DB_URL" value="${database.url}"/>
        <replace file="${install.src.hibernate.properties}" token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${install.src.hibernate.properties}" token="DB_PINGSTMT" value="${database.pingstmt}"/>

        <copy file="${src.root}/etc/system.properties" todir="${install.src.conf}"/>
        <copy file="${src.root}/etc/krb5.conf" todir="${install.src.conf}"/>
        <copy file="${src.root}/etc/login.config" todir="${install.src.conf}"/>

        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}"/>
        <echo>Patching ${install.src.keystore.properties}...</echo>

        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>

        <copy file="${src.root}/etc/ssglog.properties" tofile="${install.src.ssglog.properties}"/>
        <copy file="${src.root}/etc/uddi.properties" tofile="${install.src.uddi.properties}"/>

        <echo>Patching ${install.src.ssglog.properties}...</echo>
        <replaceregexp file="${install.src.ssglog.properties}">
            <regexp pattern="java.util.logging.FileHandler.pattern=.*"/>
            <substitution expression="java.util.logging.FileHandler.pattern=${install.target.logs}/ssg_%g_%u.log"/>
        </replaceregexp>

        <!-- Copy cluster_hostname -->
        <copy file="${src.root}/etc/cluster_hostname" tofile="${install.src.cluster_hostname}-dist"/>
    </target>

    <target name="INTERNAL-ssg-install-properties-upgrade" unless="install.full">
        <!-- Delete stock server.xml, hibernate.properties so as not to replace in-place ones -->
        <delete file="${install.src.tomcat}/conf/server.xml"/>
        <delete file="${install.src.conf}/hibernate.properties"/>

        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${install.src.tomcat}/conf/server.xml-dist"/>

        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}-dist"/>
        <replaceregexp file="${install.src.keystore.properties}-dist">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>

        <copy file="${src.root}/etc/ssglog.properties" tofile="${install.src.ssglog.properties}-dist"/>
        <copy file="${src.root}/etc/uddi.properties" tofile="${install.src.uddi.properties}-dist"/>
        <echo>Patching ${install.src.ssglog.properties}-dist...</echo>
        <replaceregexp file="${install.src.ssglog.properties}-dist">
            <regexp pattern="java.util.logging.FileHandler.pattern=.*"/>
            <substitution expression="java.util.logging.FileHandler.pattern=${install.target.logs}//ssg_%g_%u.log"/>
        </replaceregexp>

        <!-- Copy hibernate.properties -->
        <property name="install.src.hibernate.properties.dist" value="${install.src.conf}/hibernate.properties-dist"/>
        <copy file="${src.root}/etc/db/${database.type}/hibernate.properties"
              tofile="${install.src.hibernate.properties.dist}"/>

        <!-- Copy cluster_hostname -->
        <copy file="${src.root}/etc/cluster_hostname" tofile="${install.src.cluster_hostname}-dist"/>
    </target>

    <target name="INTERNAL-ssg-install-keystores" if="install.full">
        <!-- Copy server configuration -->
        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${install.src.tomcat}/conf/server.xml"/>
        <copy file="${src.root}/etc/tomcat/truststore.ks" tofile="${install.src.tomcat}/conf/truststore.ks"/>
        <copy file="${src.root}/etc/tomcat/SsgSSLImplementation.properties" 
              tofile="${install.src.tomcat}/conf/SsgSSLImplementation.properties"/>
    </target>

    <target name="INTERNAL-ssg-install" depends="init-dev">
        <fail unless="install.build.number"
              message="Set the install.build.number property before running this target!"/>
        <property file="etc/install.properties"/>

        <fail unless="install.tomcat.tar.gz"
              message="Set the install.tomcat.tar.gz property or create install.properties!"/>
        <fail unless="install.jdk.tar.gz" message="Set the install.jdk.tar.gz property or create install.properties!"/>

        <condition property="tomcat.exists">
            <available file="${install.tomcat.tar.gz}"/>
        </condition>

        <condition property="jdk.exists">
            <available file="${install.jdk.tar.gz}"/>
        </condition>

        <fail unless="tomcat.exists"
              message="Couldn't find ${install.tomcat.tar.gz}! Check your install.properties file!"/>
        <fail unless="jdk.exists" message="Couldn't find ${install.jdk.tar.gz}! Check your install.properties file!"/>

        <!-- Relative pathnames -->
        <property name="install.rel.dist" value="dist"/>
        <property name="install.rel.doc" value="doc"/>
        <property name="install.rel.etc" value="etc"/>
        <property name="install.rel.bin" value="bin"/>
        <property name="install.rel.logs" value="logs"/>
        <property name="install.rel.ldap" value="${install.rel.etc}/ldapTemplates"/>
        <property name="install.rel.conf" value="${install.rel.etc}/conf"/>
        <property name="install.rel.keys" value="${install.rel.etc}/keys"/>
        <property name="install.rel.sql" value="${install.rel.etc}/sql"/>

        <!-- Absolute source paths -->
        <property name="install.src.base" value="${build.dir}/install/ssg"/>
        <property name="install.src.bin" value="${install.src.base}/${install.rel.bin}"/>
        <property name="install.src.lib" value="${install.src.base}/lib"/>
        <property name="install.src.mods" value="${install.src.base}/modules/lib"/>
        <property name="install.src.dist" value="${install.src.base}/${install.rel.dist}"/>
        <property name="install.src.doc" value="${install.src.base}/${install.rel.doc}"/>
        <property name="install.src.jdk" value="${install.src.base}/${install.rel.jdk}"/>
        <property name="install.src.tomcat" value="${install.src.base}/${install.rel.tomcat}"/>

        <property name="install.src.etc" value="${install.src.base}/${install.rel.etc}"/>
        <property name="install.src.keys" value="${install.src.base}/${install.rel.keys}"/>
        <property name="install.src.sql" value="${install.src.base}/${install.rel.sql}"/>

        <property name="install.src.conf" value="${install.src.base}/${install.rel.conf}"/>
        <property name="install.src.passwords.txt" value="${install.src.base}/passwords.txt"/>
        <property name="install.src.keystore.properties" value="${install.src.conf}/keystore.properties"/>
        <property name="install.src.cluster_hostname" value="${install.src.conf}/cluster_hostname"/>
        <property name="install.src.ssglog.properties" value="${install.src.conf}/ssglog.properties"/>
        <property name="install.src.uddi.properties" value="${install.src.conf}/uddi.properties"/>
        <property name="install.src.server.xml" value="${install.src.tomcat}/conf/server.xml"/>
        <property name="install.src.logs" value="${install.src.base}/${install.rel.logs}"/>
        <property name="install.src.web-inf" value="${install.src.tomcat}/webapps/ROOT/WEB-INF"/>
        <property name="install.src.ldap" value="${install.src.base}/${install.rel.ldap}"/>
        <property name="install.src.var" value="${install.src.base}/var"/>
        <property name="install.src.var.attachments" value="${install.src.var}/attachments"/>

        <property name="install.rel.jdk" value="${install.jdk.dir}"/>
        <property name="install.rel.tomcat" value="${install.tomcat.dir}"/>
        <!-- Absolute target paths -->
        <property name="install.target.base" value="/ssg"/>
        <property name="install.target.keys" value="${install.target.base}/${install.rel.keys}"/>
        <property name="install.target.ldap" value="${install.target.base}/${install.rel.ldap}"/>
        <property name="install.target.tomcat" value="${install.target.base}/${install.rel.tomcat}"/>
        <property name="install.target.jdk" value="${install.target.base}/${install.rel.jdk}"/>
        <property name="install.target.logs" value="${install.target.base}/${install.rel.logs}"/>

        <property name="install.src.war" value="${install.src.dist}/ROOT-b${install.build.number}.war"/>
        <property name="install.src.configwizard" value="${install.src.base}/configwizard"/>

        <echo>Making directories...</echo>
        <mkdir dir="${install.src.base}"/>
        <mkdir dir="${install.src.lib}"/>
        <mkdir dir="${install.src.mods}"/>
        <mkdir dir="${install.src.dist}"/>
        <mkdir dir="${install.src.doc}"/>
        <mkdir dir="${install.src.etc}"/>
        <mkdir dir="${install.src.sql}"/>
        <mkdir dir="${install.src.ldap}"/>
        <mkdir dir="${install.src.bin}"/>
        <mkdir dir="${install.src.keys}"/>
        <mkdir dir="${install.src.conf}"/>
        <mkdir dir="${install.src.logs}"/>
        <mkdir dir="${install.src.var}"/>
        <mkdir dir="${install.src.var.attachments}"/>
        <mkdir dir="${install.src.configwizard}"/>

        <antcall target="INTERNAL-ssg-install-optional-1"/>

        <!-- Extract Tomcat & JDK tarballs -->
        <untar src="${install.tomcat.tar.gz}" dest="${install.src.base}" compression="gzip"/>
        <untar src="${install.jdk.tar.gz}" dest="${install.src.base}" compression="gzip"/>

        <!--
        i'm not sure whether those special jars exist here
        it depends of the order in which the targets get called
        clara, you may want to verify this
        -->
        <copy todir="${install.src.base}/tomcat/common/endorsed">
            <fileset dir="${build.dir}">
                <include name="l7provider.jar"/>
            </fileset>
        </copy>
        <copy todir="${install.src.base}/tomcat/server/lib">
            <fileset dir="${build.dir}">
                <include name="l7valve.jar"/>
            </fileset>
        </copy>
        <copy todir="${install.src.base}/tomcat/shared/lib">
            <fileset dir="${build.dir}">
                <include name="layer7-api.jar"/>
            </fileset>
        </copy>

	<!--copy the config wizard -->
	<copy todir="${install.src.configwizard}">
		<fileset dir="${build.dir}/configwizard">
			<include name="**/*"/>
		</fileset>
	</copy>

        <!-- Copy WAR file into position -->
        <copy file="${build.dir}/${war}" tofile="${install.src.war}"/>

        <!-- Copy modules -->
        <copy file="${build.dir}/ssg-uddi-module-systinetv3.jar" todir="${install.src.mods}"/>

        <!-- Copy LDAP templates -->
        <copy todir="${install.src.ldap}">
            <fileset dir="${src.root}/etc/ldapTemplates" includes="**/*.xml"/>
        </copy>

        <antcall target="INTERNAL-ssg-install-optional-2"/>

        <!-- Copy misc. stuff -->
        <copy todir="${install.src.sql}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <include name="ssg.sql"/>
                <include name="upgrade*.sql"/>
            </fileset>
        </copy>
        <copy todir="${install.src.bin}">
            <fileset dir="${src.root}/etc">
                <include name="setkeys.sh"/>
                <include name="md5passwd.pl"/>
                <include name="rpass.pl"/>
                <include name="install.pl"/>
                <include name="upgrade.sh"/>
                <include name="buildVersion.txt"/>
                <include name="passServiceUsage.sh"/>
                <include name="ssgruntimedefs.sh"/>
                <include name="ssg_appliance_startup_config.sh"/>
                <include name="tarari.sh"/>
                <include name="iptables"/>
                <include name="iptables-singlenet"/>
                <include name="tarari-initd"/>
                <include name="rotate-binlogs.pl"/>
                <include name="ssg-initd"/>
                <include name="tcp_tune.sh"/>
                <include name="snmpd.conf"/>
            </fileset>
            <fileset dir="${src.root}/etc/db/mysql">
                <include name="my.cnf"/>
		<include name="my.ini"/>
            </fileset>
        </copy>

        <!-- Make scripts executable -->
        <echo>Setting execute permissions on scripts...</echo>
        <chmod perm="0755">
            <fileset dir="${install.src.bin}">
                <include name="*.sh"/>
                <include name="*.pl"/>
                <include name="ssg-initd"/>
            </fileset>
            <fileset dir="${install.src.jdk}">
                <include name="bin/*"/>
                <include name="jre/bin/*"/>
            </fileset>
            <fileset dir="${install.src.tomcat}/bin">
                <include name="*.sh"/>
            </fileset>
        </chmod>

        <!-- Create tarball -->
        <property name="tarball" value="${build.dir}/ssg-b${install.build.number}.tar.gz"/>
        <echo>Creating ${tarball}...</echo>
        <exec executable="tar" dir="${build.dir}/install">
            <arg line="-czf ${tarball}"/>
            <arg line="."/>
        </exec>
        <echo>BUILD COMPLETE - Produced ${tarball}!</echo>
    </target>

    <target name="OFFICIAL-build.init" depends="init-dev">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>

        <input message="This will increment the OFFICIAL build count in CVS.  Are you sure you want to do this?"
               validargs="Y,y,N,n" addproperty="sure"/>

        <condition property="die">
            <not>
                <or>
                    <equals arg1="${sure}" arg2="y"/>
                    <equals arg1="${sure}" arg2="Y"/>
                </or>
            </not>
        </condition>
        <fail if="die" message="Aborted at user request."/>

        <input message="Enter a version number" addproperty="build.version"/>

        <echo>Running cvs update -A -C build.number</echo>
        <cvs command="update -A -C build.number"/>

        <buildnumber/>

        <property name="buildinfo.update" value="true"/>
    </target>

    <target name="OFFICIAL-build" depends="OFFICIAL-build.init, clean, testpackage">
        <echo>commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number</echo>
        <cvs command="commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number"/>
    </target>

    <!--
      Target that only runs if build.version if being re-defined
    -->
    <target name="INTERNAL-buildinfo-version" if="build.version">
        <echo>Setting version in Nullsoft Installer source files to ${build.version}</echo>
        <replaceregexp match='define MUI_VERSION ".*"' replace='define MUI_VERSION "${build.version}"'>
            <fileset dir="${src.root}">
                <include name="installer/proxy/win32/Bridge.nsi"/>
                <include name="installer/console/win32/Manager.nsi"/>
                <include name="installer/server/win32/SSG.nsi"/>
            </fileset>
        </replaceregexp>

        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_VERSION"/>
            <param name="param_value" value="${build.version}"/>
        </antcall>
    </target>

    <target name="INTERNAL-buildinfo" depends="INTERNAL-buildinfo-version, INTERNAL-buildinfo-uptodate">
        <property name="hostname" value="buildmachine.l7tech.com"/>

        <tstamp>
            <format property="build.date" pattern="yyyyMMdd"/>
            <format property="build.time" pattern="HHmmss"/>
        </tstamp>

        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_NUMBER"/>
            <param name="param_value" value="${build.number}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_VERSION_MAJOR"/>
            <param name="param_value" value="${build.version.major}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_VERSION_MINOR"/>
            <param name="param_value" value="${build.version.minor}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_NAME"/>
            <param name="param_value" value="${app.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_DATE"/>
            <param name="param_value" value="${build.date}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_TIME"/>
            <param name="param_value" value="${build.time}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_USER"/>
            <param name="param_value" value="${user.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_MACHINE"/>
            <param name="param_value" value="${hostname}"/>
        </antcall>
    </target>

    <target name="INTERNAL-buildinfo-uptodate" unless="buildinfo.update">
        <uptodate property="buildinfo.uptodate" targetfile="${src.root}/src/com/l7tech/common/BuildInfo.java" >
            <srcfiles dir="${src.root}" includes="src/**/*, build.version, build.number" excludes="src/com/l7tech/common/BuildInfo.java"/>
        </uptodate>
    </target>

    <target name="INTERNAL-buildinfo-replace" unless="buildinfo.uptodate">
        <echo>Replacing ${param_name} with ${param_value}</echo>
        <replaceregexp match='${param_name} = ".*"' replace='${param_name} = "${param_value}"'>
            <fileset dir="${src.root}/src">
                <include name="com/l7tech/common/BuildInfo.java"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- invoked by obfuscate -->
    <target name="obfuscate.bridge" depends="obfuscate.init">
        <echo>Obfuscating Bridge.jar</echo>
        <Zelix scriptFileName="etc/obfuscation/bridge_new.zkm"
               logFileName="build/obfuscation/bridgeobfuscation.log"
               trimLogFileName="build/obfuscation/bridgeobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating Bridge.jar</echo>
        <copy tofile="build/Bridge.jar" file="build/obfuscation/Bridge.jar" overwrite="true"/>
    </target>

    <!-- invoked by obfuscate -->
    <target name="obfuscate.manager" depends="obfuscate.init">
        <echo>Obfuscating Manager.jar</echo>
        <Zelix scriptFileName="etc/obfuscation/manager_new.zkm"
               logFileName="build/obfuscation/managerobfuscation.log"
               trimLogFileName="build/obfuscation/managerobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating Manager.jar</echo>
        <copy tofile="build/Manager.jar" file="build/obfuscation/Manager.jar" overwrite="true"/>
    </target>

    <!-- invoked by obfuscate -->
    <target name="obfuscate.gateway" depends="obfuscate.init">
        <echo>Obfuscating war classes</echo>
        <Zelix scriptFileName="etc/obfuscation/ssg_new.zkm"
               logFileName="build/obfuscation/ssgobfuscation.log"
               trimLogFileName="build/obfuscation/ssgobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Copying obfuscated classes in exploded war</echo>
        <copy todir="build/ROOT_exploded/WEB-INF/classes/com" overwrite="true">
            <fileset dir="./build/obfuscation/gatewayclasses/com">
                <include name="**/*.class"/>
            </fileset>
        </copy>
        <echo>Repackage new ROOT.war (obfuscated version)</echo>
        <zip destfile="build/obfuscation/ROOT.war" basedir="build/ROOT_exploded"/>
        <echo>Cleaning up...</echo>
        <delete dir="build/ROOT_exploded"/>
        <delete dir="build/obfuscation/gatewayclasses"/>
        <copy tofile="build/ROOT.war" file="build/obfuscation/ROOT.war" overwrite="true"/>
    </target>

    <target name="obfuscate.init">
        <echo>Extracting classes from ROOT.war</echo>
        <unzip src="build/ROOT.war" dest="build/ROOT_exploded"/>
        <echo>Setting classpaths in zkm scripts</echo>
        <exec executable="perl" failonerror="true" dir=".">
            <arg line="etc/obfuscation/substjars.pl"/>
            <arg line="-N"/>
        </exec>
    </target>

    <!--
    meant to be used as part of official build
    this will create an obfuscated version of the following files:
    . build/Bridge.jar
    . build/Manager.jar
    . build/ROOT.war
    . installer/Bridge-VERSION.tar.gz
    . installer/Manager-VERSION.tar.gz

    when followed by ssg-install-full, the resulting build/ssg-bBUILDNUMBER.tar.gz will
    also be obfuscated
    when followed by a call to ./make_installers.pl -b, the resulting windows installers
    for bridge, manager and ssg will also be obfuscated
    -->
    <target name="obfuscate"
            depends="package, obfuscate.bridge, obfuscate.manager, obfuscate.gateway">
        <exec executable="find" outputproperty="bridge.tar.filename">
            <arg line="."/>
            <arg line="-name"/>
            <arg line="Bridge*.tar.gz"/>
        </exec>
        <propertyregex property="build.number.regexed"
              input="${bridge.tar.filename}"
              regexp="\./installer/Bridge-(.*)\.tar\.gz"
              select="\1"
              casesensitive="false" />
        <untar src="installer/Bridge-${build.number.regexed}.tar.gz" dest="build/obfuscation/" compression="gzip"/>
        <untar src="installer/Manager-${build.number.regexed}.tar.gz" dest="build/obfuscation/" compression="gzip"/>
        <copy file="build/obfuscation/Bridge.jar" tofile="build/obfuscation/Bridge-${build.number.regexed}/Bridge.jar" overwrite="true"/>
        <copy file="build/obfuscation/Manager.jar" tofile="build/obfuscation/Manager-${build.number.regexed}/Manager.jar" overwrite="true"/>

        <tar destfile="build/obfuscation/Bridge-${build.number.regexed}_obfuscated.tar.gz" compression="gzip">
            <tarfileset dir="build/obfuscation/Bridge-${build.number.regexed}" prefix="Bridge-${build.number.regexed}">
                <include name="**"/>
                <exclude name="*.sh"/>
            </tarfileset>
            <tarfileset dir="build/obfuscation/Bridge-${build.number.regexed}" prefix="Bridge-${build.number.regexed}" mode="755">
                <include name="*.sh"/>
            </tarfileset>
        </tar>

        <tar destfile="build/obfuscation/Manager-${build.number.regexed}_obfuscated.tar.gz" compression="gzip">
            <tarfileset dir="build/obfuscation/Manager-${build.number.regexed}" prefix="Manager-${build.number.regexed}">
                <include name="**"/>
                <exclude name="*.sh"/>
            </tarfileset>
            <tarfileset dir="build/obfuscation/Manager-${build.number.regexed}" prefix="Manager-${build.number.regexed}" mode="755">
                <include name="*.sh"/>
            </tarfileset>
        </tar>

        <delete dir="build/obfuscation/Bridge-${build.number.regexed}"/>
        <delete dir="build/obfuscation/Manager-${build.number.regexed}"/>

        <copy file="build/obfuscation/Bridge-${build.number.regexed}_obfuscated.tar.gz"
              tofile="installer/Bridge-${build.number.regexed}.tar.gz"
              overwrite="true"/>

        <copy file="build/obfuscation/Manager-${build.number.regexed}_obfuscated.tar.gz"
              tofile="installer/Manager-${build.number.regexed}.tar.gz"
              overwrite="true"/>
    </target>
</project>
