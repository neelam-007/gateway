<?xml version="1.0" encoding="UTF-8"?>
<project name="UneasyRooster" default="dev" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:sonar="antlib:org.sonar.ant">
    <description>
        Ant build file for UneasyRooster
    </description>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!-- set environment properties -->
    <property environment="env"/>
    <property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/>
    <property name="hostname" value="${env.HOSTNAME}"/>

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" location="${basedir}"/>
	
	<!-- get the build number api URL, username and password -->
	<property name="build.number.api.baseUrl" value="${env.build.number.api.baseUrl}"/>
	<property name="build.number.api.username" value="${env.build.number.api.username}"/>
	<property name="build.number.api.password" value="${env.build.number.api.password}"/>
	<property name="build.artifact.name" value="${env.build.artifact.name}"/>
	<property name="build.number.api.parameters" value="${env.build.number.api.parameters}"/>
	<condition property="build.number.api.parameters.suffix" value="${env.build.number.api.parameters.suffix}" else="">
        	<isset property="env.build.number.api.parameters.suffix"/>
	</condition>
	<echo level="info">
		build.number.api.parameters.suffix=${build.number.api.parameters.suffix}
	</echo>
	
    <!-- get the version -->
    <property file="${src.root}/build.version"/>
	
    <!--
      Set default build properties
      Properties that were not specified in user properties
      Mainly DB info, compiler settings, etc.
    -->
    <property file="etc/build/default_build.properties"/>
    <property file="etc/build/install.properties"/>

	<!-- Add Artifactory properties -->
	<property file="etc/build/artifactory.properties"/>

	<!-- Add SonarQube properties -->
	<property file="etc/build/sonarqube.properties"/>

    <!--
      Ivy initialization is global
    -->
    <ivy:settings file="etc/build/ivysettings.xml"/>    

    <!-- project classpath -->
    <path id="project.classpath">
        <fileset dir="lib/repository/bouncycastle">
            <include name="**/bcprov-*.jar"/>
        </fileset>
        <fileset dir="lib/repository"/>
    </path>

    <path id="project.classpath.fortest">
        <path refid="project.classpath"/>
    </path>

    <target name="task-init">
        <!--
          Adds ivy ant schema
        -->
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpath="lib/tools/ivy-2.2.0.jar">
        </taskdef>

        <!--
          Task definition for Pack 200
        -->
        <taskdef name="pack200"
                 classname="org.jdesktop.deployment.ant.pack200.Pack200Task"
                 classpath="lib/tools/deployment-ant-pack200-1.0beta.jar"/>

        <!--
          Task definition for JDepend
        -->
        <taskdef name="jdepend"
                 classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask"
                 classpath="lib/tools/ant-jdepend.jar:lib/tools/jdepend-2.9.jar"/>

        <!--
          Task definition for FindBugs
        -->
        <taskdef name="findbugs"
                 classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpath="lib/tools/findbugs-ant.jar"/>

        <!--
          Task definition for XmlBeans
        -->
        <taskdef name="xmlbeancompiler"
                 classname="org.apache.xmlbeans.impl.tool.XMLBean"
                 classpath="lib/xbean.jar:lib/jsr173_1.0_api.jar"/>

        <!--
          Classpath for obfuscation
        -->
        <path id="zelix.classpath">
            <fileset dir="lib/tools">
                <include name="ZKM.jar"/>
            </fileset>
        </path>

        <!--
          Task definition for class file obfuscation
        -->
        <taskdef name="Zelix" classname="ZKMTask" classpathref="zelix.classpath"/>

        <!--
          Classpath for svn
        -->
        <path id= "svnant.classpath"  >
            <fileset dir= "lib/tools" >
                <include name= "svn*.jar" />
            </fileset>
        </path>

        <!--
          Taskdef for svn
        -->
        <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svnant.classpath" />

        <!--
          Various bolt-on task definitions
        -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="lib/ant-contrib-1.0b3.jar"/>
            </classpath>
        </taskdef>

        <macrodef name="pack-mac">
            <attribute name="jarfile"/>
            <attribute name="packfile" default="@{jarfile}.pack.gz"/>
            <sequential>
                <condition property="pack-mac.fail">
                    <not>
                        <available file="@{jarfile}"/>
                    </not>
                </condition>
                <pack200 src="@{jarfile}" destfile="@{packfile}" segmentlimit="-1" gzipoutput="true"/>
            </sequential>
        </macrodef>

        <macrodef name="ivyinstall">
            <attribute name="file"/>
            <sequential>
                <ivy:resolve file="@{file}"/>

                <ivy:publish
                   artifactspattern=""
                   srcivypattern="[module]-ivy-[revision].xml"
                   resolver="localfile"
                   status="release"
                   haltonmissing="false"
                   overwrite="true"/>
            </sequential>
        </macrodef>

        <macrodef name="ivy-echo-build-plan">
            <attribute name="refid"/>
            <attribute name="pathid"/>
            <sequential>
                <pathconvert property="@{pathid}" pathsep="${line.separator}            " dirsep="/" refid="@{refid}">
                    <mapper type="regexp" from=".*[/\\](modules.*)/build.xml" to="\1"/>
                </pathconvert>
                <echo level="info">
            ===============================================================
              Ivy Modules (in dependency order)
            ===============================================================
                ${@{pathid}}
            ===============================================================
                </echo>
            </sequential>
        </macrodef>

        <macrodef name="xslt-update">
            <attribute name="style"/>
            <attribute name="file"/>
            <attribute name="data" default=""/>
            <sequential>
                <xslt in="@{file}"
                      out="@{file}.tmp"
                      style="@{style}"
                      force="true">
                    <param name="data" expression="@{data}"/>
                 </xslt>

                <move file="@{file}.tmp" tofile="@{file}" overwrite="true"/>
            </sequential>
        </macrodef>

        <!--
          Task to generate JAR file manifests with classpaths.
        -->
        <macrodef name="generate-manifest">
            <attribute name="propertyPrefix"/>
            <attribute name="filename"/>
            <attribute name="pathPrefix" default=""/>
            <element name="section" optional="yes"/>
            <sequential>
                <fileset id="@{propertyPrefix}.lib.fileset" dir="${src.root}/lib" casesensitive="yes">
                    <patternset refid="@{propertyPrefix}.libs"/>
                </fileset>
                <pathconvert property="@{propertyPrefix}.libs.path" pathsep=" " dirsep="/" refid="@{propertyPrefix}.lib.fileset">
                    <mapper type="regexp" from=".*[/\\](.*)\.jar" to="lib/\1.jar"/>
                </pathconvert>
                <copy todir="${build.etc}">
                    <fileset dir="${src.root}/etc" includes="@{filename}"/>
                </copy>
                <manifest file="${build.etc}/@{filename}" mode="update">
                    <attribute name="Implementation-Title" value="${app.name}"/>
                    <attribute name="Implementation-Version" value="${build.version.major}.${build.version.minor}.${build.version.subminor}"/>
                    <attribute name="Implementation-Vendor" value="${vendor.name}"/>
                    <attribute name="Class-Path" value="@{pathPrefix} ${@{propertyPrefix}.libs.path}"/>
                    <section/>
                </manifest>
            </sequential>
        </macrodef>

        <macrodef name="checkdeps">
            <attribute name="libfilesetref"/>
            <attribute name="jarfile"/>
            <attribute name="resultproperty"/>
            <attribute name="ignoreclasses" default=""/>
            <attribute name="failpackages" default=""/>
            <sequential>
                <java classname="com.l7tech.tools.JarChecker" fork="true" resultproperty="@{resultproperty}">
                    <classpath>
                        <pathelement path="tools"/>
                        <fileset refid="@{libfilesetref}"/>
                        <pathelement location="@{jarfile}"/>
                    </classpath>
                    <sysproperty key="java.awt.headless" value="true"/>
                    <sysproperty key="com.l7tech.tools.JarChecker.failpackages" value="@{failpackages}"/>
                    <arg value="@{jarfile}"/>
                    <arg line="@{ignoreclasses}"/>
                </java>
            </sequential>
        </macrodef>

        <!--
          Task to check if the build should be failed
        -->
        <macrodef name="checkfail">
            <sequential>
                <fail if="fail">Exiting due to build failures.</fail>
            </sequential>
        </macrodef>

        <macrodef name="set-db-properties">
            <attribute name="driver"/>
            <attribute name="url"/>
            <attribute name="user"/>
            <attribute name="password"/>
            <attribute name="pingstmt"/>
            <sequential>
                <property name="database.driver" value="@{driver}"/>
                <property name="database.url" value="@{url}"/>
                <property name="database.user" value="@{user}"/>
                <property name="database.password" value="@{password}"/>
                <property name="database.pingstmt" value="@{pingstmt}"/>
            </sequential>
        </macrodef>

        <!--
          Task to update ZKM files with classpaths, jars, etc.
        -->
        <macrodef name="build-zkm">
            <attribute name="name"/>
            <attribute name="zkmFilePath" default="${src.root}/etc/obfuscation/genjarobf.zkm"/>
            <attribute name="out" default="./build/obfuscation"/>
            <attribute name="jarFileset"/>
            <attribute name="libFileset"/>
            <sequential>
                <pathconvert property="obfuscate.@{name}.zkm.jars.path" pathsep="&quot;${line.separator}&quot;" dirsep="/" refid="@{jarFileset}"/>
                <pathconvert property="obfuscate.@{name}.zkm.libs.path" pathsep="&quot;${line.separator}&quot;" dirsep="/" refid="@{libFileset}"/>
                <copy file="@{zkmFilePath}" tofile="build/etc/@{name}.zkm" overwrite="true">
                    <filterset>
                        <filter token="CP" value="${obfuscate.@{name}.zkm.libs.path}"/>
                        <filter token="JAR" value="${obfuscate.@{name}.zkm.jars.path}"/>
                        <filter token="CHANGELOG" value="${build.dir}/obfuscation/@{name}_change.log"/>
                        <filter token="OUT" value="@{out}"/>
                    </filterset>
                </copy>
            </sequential>
        </macrodef>

        <!--
          Macro for using the wsimport JAX-WS utility
        -->
        <macrodef name="wsimport">
            <attribute name="wsdl"/>
            <sequential>
              <exec executable="wsimport">
                <arg value="-keep"/>
                <arg value="-s"/>
                <arg value="build/uddisources"/>
                <arg value="-d"/>
                <arg value="build/uddiclasses"/>
                <arg value="-p"/>
                <arg value="com.l7tech.common.uddi.guddiv3"/>
                <arg value="-wsdllocation"/>
                <arg value="resources/@{wsdl}"/>
                <arg value="etc/schema/uddiv3/@{wsdl}"/>
              </exec>
            </sequential>
        </macrodef>
    </target>

    <!--
      Patternset used for Bridge API javadoc
    -->
    <patternset id="bridgeapi.sources">
        <include name="com/l7tech/proxy/SecureSpanBridge.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeOptions.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeFactory.java"/>
    </patternset>

    <!--
      Patternset used for Manager API javadoc
    -->
    <patternset id="managerapi.sources">
        <include name="com/l7tech/console/SsmApplication*.java"/>
        <include name="com/l7tech/console/security/AuthenticationProvider.java"/>
        <include name="com/l7tech/console/security/InvalidHostCertificateException.java"/>
        <include name="com/l7tech/console/security/InvalidHostNameException.java"/>
        <include name="com/l7tech/console/security/LogonListener.java"/>
        <include name="com/l7tech/console/policy/exporter/*.java"/>
        <include name="com/l7tech/gateway/common/**/*.java"/>
        <include name="com/l7tech/identity/**/*.java"/>
        <include name="com/l7tech/objectmodel/**/*.java"/>
        <include name="com/l7tech/policy/**/*.java"/>
    </patternset>

    <!--
      License Generator library patternset (also ".")
    -->
    <patternset id="licensegenerator.libs">
        <include name="**/kunststoff.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/commons-lang-2.3.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/commons-collections-3.2.2.jar"/>
        <include name="**/commons-logging-1.1.1.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/qname.jar"/>
        <include name="**/forms_rt.jar"/>
        <include name="**/xmlpad.jar"/>
        <include name="**/xmlpad-res.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/log4j-1.2.17.jar"/>
        <include name="**/bcprov*.jar"/>
        <include name="**/xalan-2.7.2-l7p1.jar"/>
        <include name="**/xalan-serializer-2.7.2.jar"/>
    </patternset>

    <!--
      Initialize build properties
    -->
    <target name="init" depends="task-init,init-full"/>
    <target name="init-full" depends="package.readversion,init-core"/>
    <target name="init-core" depends="task-init">
        <echo level="info">
        java.specification.name=${java.specification.name}
        java.specification.vendor=${java.specification.vendor}
        java.specification.version=${java.specification.version}
        java.runtime.name=${java.runtime.name}
        java.runtime.version=${java.runtime.version}
        ant.version=${ant.version}
        </echo>

        <property name="build.dir" value="${src.root}/build"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <property name="build.reports" value="${build.dir}/reports"/>
        <property name="build.installer" value="${build.dir}/installer"/>
        <property name="build.rpm" value="${build.dir}/rpm"/>
        <property name="build.docker" value="${build.dir}/docker"/>

        <property name="src.installer" value="${src.root}/installer"/>
        <property name="dist.dir" value="${src.root}/dist"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>

        <!-- Migrating from SVN to Git: Empty directories don't exist in Git, so we need to ensure these exist before building. -->
        <mkdir dir="${basedir}/lib/prebuilt/modass"/>
        <mkdir dir="${basedir}/web"/>

        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>
        <property name="vendor.name" value="Layer 7 Technologies Inc."/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <property  name="project.module.includes" value="*/build.xml,*/*/build.xml,*/*/*/build.xml"/>

        <!-- modules excluded from a production build -->
        <property name="project.module.excludes" value="skunkworks/build.xml"/>

        <!-- paths with dynamic components -->
        <path id="project.test.classpath">
            <path refid="project.classpath.fortest"/>
        </path>

        <condition property="makensis.available" >
          <and>
            <available file="${build.install.compiler}"/>
            <available file="/usr/bin/wine"/>
          </and>
        </condition>

        <condition property="makensis.enabled">
            <and>
                <isset property="makensis.available"/>
                <isset property="makensis"/>
            </and>
        </condition>

        <fail message="makensis specified but nsis compiler or wine not available">
          <condition>
            <and>
                <isset property="makensis"/>
              <not>
                <isset property="makensis.available" />
              </not>
            </and>
          </condition>
        </fail>

        <condition property="makerpm.available">
            <or>
                <available file="rpmbuild" filepath="/bin:/usr/bin:/usr/local/bin"/>
                <available file="rpm" filepath="/bin:/usr/bin:/usr/local/bin"/>
            </or>
        </condition>
        <condition property="makerpm.enabled">
            <and>
                <isset property="makerpm.available"/>
                <isset property="makerpm"/>
            </and>
        </condition>

        <fail message="makerpm specified but no rpm builder available">
          <condition>
            <and>
           <isset property="makerpm" />
              <not>
                <isset property="makerpm.available" />
              </not>
            </and>
          </condition>
        </fail>

        <condition property="makedocker.available">
            <or>
                <available file="docker" filepath="/bin:/usr/bin:/usr/local/bin"/>
            </or>
        </condition>
        <condition property="makedocker.enabled">
            <and>
                <isset property="makedocker.available"/>
                <isset property="makedocker"/>
            </and>
        </condition>


        <!-- Performance test config -->
        <property name="test.perf.from" value="teamcity@tyan64.l7tech.com"/>
        <property name="test.perf.to" value=""/>

        <!-- Deprecated, but preserved in case used in anyones build.properties -->
        <property name="deploy.keys.password" value="blahblah"/>

        <!-- Defaults for development SSG deployments -->
        <property name="dev.deploy.dir" value="${build.dir}/deploy"/><!-- Deployment root -->
        <property name="deploy.cluster.password" value="${deploy.keys.password}"/>
        <property name="deploy.db.username" value="gateway"/>
        <property name="deploy.db.password" value="7layer"/>
        <property name="deploy.db.name" value="ssg"/>
        <property name="deploy.db.host" value="localhost"/>
        <property name="deploy.db.port" value="3306"/>
        <property name="deploy.node.id" value="48b5a4bc60fd4db191ddd5258eab0a35"/>
       
        <condition property="echo.makerpm.enabled">
            <isset property="makerpm.enabled"/>
        </condition>
        <condition property="echo.makedocker.enabled">
            <isset property="makedocker.enabled"/>
        </condition>
        <condition property="echo.makensis.enabled">
            <isset property="makensis.enabled"/>
        </condition>
        <property name="echo.makerpm.enabled" value="false" />
        <property name="echo.makedocker.enabled" value="false" />
        <property name="echo.makensis.enabled" value="false" />
        <echo level="info">
        RPM Build Enabled               = ${echo.makerpm.enabled}
        Docker Build Enabled               = ${echo.makedocker.enabled}
        Windows Installer Build Enabled = ${echo.makensis.enabled}
        </echo>

    </target>

    <!--
      Shortcut target for clean dev
    -->
    <target name="cleandev" depends="clean, dev"/>

    <!--
      Initialization for a dev build.
    -->
    <target name="init-dev">
        <property name="dev.build" value="true"/>
        <property file="build.number" prefix="install"/>
    </target>

    <!--
      Configure and invoke developer's build
      -->
    <target name="dev"
            description="Developer build (does not package)"
            depends="init-dev, skiptests, publish-all-modules"/>

    <target name="build-module-list" unless="build-path.text" depends="init-core">
        <ivy:buildlist reference="module-build-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="${project.module.includes}" excludes="${project.module.excludes}"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path" pathid="build-path.text"/>
    </target>

    <target name="build-module-list-idea-module" if="module" depends="init-core">
        <ivy:buildlist root="${module}" reference="module-build-all-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="${project.module.includes}"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-all-path" pathid="build-all-path.text"/>
    </target>

    <target name="build-module-list-idea" unless="module" depends="build-module-list-idea-module">
        <ivy:buildlist reference="module-build-all-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="${project.module.includes}"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-all-path" pathid="build-all-path.text"/>
    </target>

    <target name="build-module-list-all" unless="build-all-path.text" depends="init-core">
        <ivy:buildlist reference="module-build-all-path" onMissingDescriptor="skip">
            <fileset dir="modules" includes="${project.module.includes}"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-all-path" pathid="build-all-path.text"/>
    </target>

    <target name="repository-install" description="Install an artifact to the build repository." depends="prepare.base">
        <fail unless="art">art is a required property (the artifact to install)</fail>
        <fail unless="org">org is a required property (organization for the new library)</fail>
        <fail unless="rev">rev is a required property (the artifact revision)</fail>
        
        <available file="${art}" property="repository.artifact.available"/>
        <fail unless="repository.artifact.available">The repository artifact could not be found.</fail>        

        <!-- build module/artifact name without revision -->
        <basename property="repository.module.artname1" file="${art}" suffix=".jar"/>
        <basename property="repository.module.artname2" file="${art}" suffix="-${rev}.jar"/>
        <condition property="mod" value="${repository.module.artname2}">
            <equals arg1="${repository.module.artname1}" arg2="${repository.module.artname2}-${rev}"/>
        </condition>
        <property name="mod" value="${repository.module.artname1}"/>

        <!-- 
          install to temp repository, format is:
           build/ivy/temp.repository/[organisation]/[artifact]-[revision].[ext] 
        -->
        <property name="repository.artifact.directory" value="${build.dir}/ivy/temp.repository/${org}"/>
        <mkdir dir="${repository.artifact.directory}"/> <!-- Create temp source directory -->
        <copy file="${art}" tofile="${repository.artifact.directory}/${mod}-${rev}.jar"/>
        
        <echo level="info">Loading Ivy settings for remote repositories.</echo>
        <ivy:settings id="ivy.remote" file="etc/build/ivysettings_remote.xml"/>    

        <!-- install to our repository -->
        <ivy:install settingsRef="ivy.remote" organisation="${org}" module="${mod}" revision="${rev}" from="localfile" to="local.repository" transitive="false"/>
    </target>

    <target name="repository-install-remote" description="Install an artifact to the build repository from a remote repository." depends="prepare.base">
        <fail unless="mod">mod is a required property (the module to install)</fail>
        <fail unless="org">org is a required property (organization for the new library)</fail>
        <fail unless="rev">rev is a required property (the artifact revision)</fail>
        <property name="trans" value="true"/>        

        <echo level="info">Deleting installation cache.</echo>        
        <property name="build.repo" value="${build.dir}/ivy/temp.repository/"/>
        <delete dir="${build.repo}" verbose="true"/>
        <mkdir dir="${build.repo}"/>

        <echo level="info">Loading Ivy settings for remote repositories.</echo>
        <ivy:settings id="ivy.remote" file="etc/build/ivysettings_remote.xml"/>    

        <!-- install to our temp repository under "build" -->
        <echo level="info">Downloading artifacts to cache.</echo>
        <ivy:install settingsRef="ivy.remote" organisation="${org}" module="${mod}" revision="${rev}" type="jar" from="libraries" to="localfile" transitive="${trans}"/>

        <!-- copy to main repository -->
        <echo level="info">Moving artifacts to repository.</echo>
        <copy todir="lib/repository" verbose="true">
          <fileset dir="${build.repo}">
            <include name="**/*.jar"/>            
            <include name="**/*.xml"/>      
            <present present="srconly" targetdir="lib/repository"/>      
          </fileset>
        </copy>
    </target>

    <presetdef name="modules">
        <subant buildpathref="module-build-path" >
            <property name="module.version.default.target" value="${build.version}"/>
			<property name="module.skarsigner.sign.all" value="${skarsigner.sign.all}"/>
			
            <propertyset dynamic="false">
                <propertyref name="build.junit.xmlformat"/>
                <propertyref prefix="module.obfuscate"/>
                <propertyref name="module.compile.excludes"/>
                <propertyref name="module.sign"/>
                <propertyref name="module.pack200"/>
                <propertyref name="module.build.output"/>
                <propertyref name="src.root"/>
                <propertyref prefix="build.version"/>
                <propertyref prefix="build.api.version"/>
                <propertyref name="build.timestamp"/>
                <propertyref name="install.build.number"/>
                <propertyref name="build.host"/>
                <propertyref name="build.user" />
                <propertyref name="build.product"/>
                <propertyref name="build.vendor"/>
                <propertyref name="build.vendor.id"/>
                <propertyref name="ivy.settings.filepath"/>
                <propertyref name="module.official.build"/>
                <propertyref prefix="idea"/>
				<propertyref name="publish.jar.target"/>
				<propertyref name="publish.status"/>
				<propertyref name="module.skarsigner.sign.archive"/>
				<propertyref name="module.skarsigner.generate.restman.xml"/>
				<propertyref name="suffix.snapshot"/>
				<propertyref name="module.skip.tests"/>
                <propertyref name="module.skip.tools"/>
            </propertyset>
        </subant>
    </presetdef>

    <target name="retrieve" depends="prepare.base, build-module-list">
        <modules target="retrieve"/>
    </target>

    <target name="publish-main-modules" depends="prepare.base, build-module-list" unless="package.jars.notrequired">
		<modules target="publish"/>
    </target>
	
	<target name="publish-only-main-modules" depends="package.readversion, build-module-list" unless="package.jars.notrequired">
		<modules target="publish-only"/>
	</target>
	
    <target name="publish-all-modules" depends="prepare.base, build-module-list-all" unless="package.jars.notrequired">
        <modules target="publish" buildpathref="module-build-all-path"/>
    </target>
	
    <target name="clean-modules" depends="build-module-list-all">
        <modules target="clean" buildpathref="module-build-all-path"/>
    </target>

    <!--
      Publish the latest dependency / artifact information to the build repository
    -->
    <target name="idea-inspections" depends="build-module-list">
        <property name="ivy.settings.filepath" location="etc/build/ivysettings_idea.xml"/>
        <mkdir dir="${build.etc}"/>
        <!-- Clean cache -->
        <delete dir="${build.dir}/ivycache"/>
        <mkdir dir="${build.dir}/ivycache"/>
        <delete dir="${build.dir}/ivyidea"/>
        <mkdir dir="${build.dir}/ivyidea"/>

        <echo level="info">Building IDEA modules.</echo>
        <modules target="idea"/>

        <!-- Aggregate all dependencies -->
        <concat destfile="${build.etc}/dependency.xml">
            <string value="&lt;project-dependencies&gt;"/>
            <fileset dir="modules" includes="**/build/etc/dependency.xml"/>
            <string value="&lt;/project-dependencies&gt;"/>
        </concat>

        <!-- Regenerate IDEA module for inspections (All modules) -->
        <pathconvert property="module.paths.xml.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[\\/](modules[\\/].*)" to="&lt;path file=&quot;\1&quot;/&gt;"/>
            <path>
                <dirset dir="modules">
                    <include name="**/src/main/java"/>
                    <include name="**/src/test/java"/>
                    <exclude name="skunkworks/**"/>
                </dirset>
            </path>
        </pathconvert>
        <echo file="${build.etc}/module-paths.xml">&lt;module-paths&gt;
                ${module.paths.xml.text}
            &lt;/module-paths&gt;
        </echo>
        <delete file="Inspections.iml"/>
        <xslt in="${build.etc}/module-paths.xml" out="Inspections.iml" style="etc/build/idea_module_inspections.xsl">
            <param name="data" expression="${build.etc}/dependency.xml"/>
        </xslt>
    </target>

    <!--
      Generate IDEA project/modules
    -->
    <target name="idea" depends="package.readversion,build-module-list-idea" description="Generate IDEA project/modules">
        <property name="ivy.settings.filepath" location="etc/build/ivysettings_idea.xml"/>
        <echo level="info">Clear cache and configure repository settings. (${ivy.settings.filepath})</echo>
        <mkdir dir="${build.etc}"/>
        <!-- Clean cache -->
        <delete dir="${build.dir}/ivy"/>

        <echo level="info">Building IDEA modules.</echo>
        <modules target="idea" buildpathref="module-build-all-path"/>

        <!-- Module for root content -->
        <copy file="etc/build/idea_module.xml" tofile="UneasyRooster.iml" overwrite="false"/>

        <echo level="info">Building IDEA project.</echo>
        <!-- Generate XML descriptor for modules -->
        <pathconvert property="modules.xml.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[/\\](modules.*.iml)" to="&lt;module file=&quot;\1&quot;/&gt;"/>
            <path>
                <fileset dir="modules" includes="**/*.iml"/>
            </path>
        </pathconvert>
        <echo file="${build.etc}/modules.xml">&lt;modules&gt;
                &lt;module file="UneasyRooster.iml"/&gt;
                ${modules.xml.text}
            &lt;/modules&gt;
        </echo>
        <!-- Generate module library XML -->
        <concat destfile="${build.etc}/module-dependencies.xml">
            <resources><string value="&lt;modules&gt;${line.separator}"/></resources>
            <fileset dir="modules" includes="*/build/etc/dependency_gen.xml"/>
            <fileset dir="modules" includes="gateway/*/build/etc/dependency_gen.xml"/>
            <fileset dir="modules" includes="gateway/assertions/*/build/etc/dependency_gen.xml"/>
            <resources><string value="&lt;/modules&gt;"/></resources>
            <filterchain>
                <linecontains negate="true">
                  <contains value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;"/>
                </linecontains>
            </filterchain>
        </concat>
        <!-- Transform to a project file -->
        <copy file="etc/build/idea_project.xml" tofile="UneasyRooster.ipr" overwrite="false"/>
        <xslt in="UneasyRooster.ipr" out="UneasyRooster.ipr.tmp" style="etc/build/idea_project.xsl">
            <param name="data" expression="${build.etc}/modules.xml"/>
            <param name="datalibs" expression="${build.etc}/module-dependencies.xml"/>
            <param name="projectmeta" expression="${src.root}/etc/build/idea_meta.xml"/>
            <param name="idea.ant.integration" expression="${idea.ant.integration}" if="idea.ant.integration"/>
            <param name="idea.javac.out" expression="${idea.javac.out}" if="idea.javac.out"/>
            <param name="idea.jdk" expression="${idea.jdk}" if="idea.jdk"/>
        </xslt>
        <move file="UneasyRooster.ipr.tmp" tofile="UneasyRooster.ipr" overwrite="true"/>

        <echo level="info">Building IDEA workspace.</echo>
        <property name="idea.teamcity.user" value="${user.name}"/>
        <copy file="etc/build/idea_workspace.xml" tofile="UneasyRooster.iws" overwrite="false"/>
        <condition property="unix.entropy" value="-Djava.security.egd=file:/dev/./urandom">
            <os family="unix" />
        </condition>
        <property name="unix.entropy" value=""/> <!--Set to empty string if not set -->

        <xslt in="UneasyRooster.iws" out="UneasyRooster.iws.tmp" style="etc/build/idea_workspace.xsl">
            <param name="idea.teamcity.server" expression="${idea.teamcity.server}" if="idea.teamcity.server"/>
            <param name="idea.teamcity.user" expression="${idea.teamcity.user}"/>
            <param name="idea.teamcity.password" expression="${idea.teamcity.password}" if="idea.teamcity.password"/>
            <param name="idea.teamcity.remember" expression="${idea.teamcity.remember}" if="idea.teamcity.remember"/>
            <param name="idea.gateway.vmOptions" expression="-ea -Xmx880m -Djava.security.policy==etc/ssg.policy -Dcom.l7tech.util.buildVersion=${build.version} -Dcom.l7tech.server.home=&quot;${dev.deploy.dir}/Gateway/node/default&quot; -XX:+TieredCompilation -Dcom.l7tech.server.sm.noSecurityManager=true -Dcom.l7tech.server.log.console=true -Dcom.l7tech.server.log.console.extraCats=&quot;AUDIT,LOG&quot; -Dcom.l7tech.logging.debug=false -Djava.net.preferIPv4Stack=true -Dcom.l7tech.server.dbScriptsDirectory=etc/db/liquibase ${unix.entropy}"/>
            <param name="idea.controller.vmOptions" expression="-ea -Dcom.l7tech.util.buildVersion=${build.version} -Dcom.l7tech.server.log.console=true -Dcom.l7tech.gateway.home=../../Gateway"/>
            <param name="idea.configwiz.vmOptions" expression="-ea -Dcom.l7tech.util.buildVersion=${build.version}"/>
            <param name="idea.pcconfig.vmOptions" expression="-ea -Dcom.l7tech.util.buildVersion=${build.version} -Dcom.l7tech.server.controller.home=&quot;${dev.deploy.dir}/Controller&quot;"/>
            <param name="idea.client.vmOptions" expression="-ea -Dcom.l7tech.util.buildVersion=${build.version}"/>
            <param name="idea.manager.vmOptions" expression="-ea -Dcom.l7tech.util.buildVersion=${build.version} -Dcom.l7tech.console.remoteInvocationTracing=true"/>
            <param name="idea.controller.home" expression="${dev.deploy.dir}/Controller"/>
        </xslt>
        <move file="UneasyRooster.iws.tmp" tofile="UneasyRooster.iws" overwrite="true"/>
        <echo level="info">Generation complete.</echo>
    </target>

    <!--
      Delete IDEA modules
    -->
    <target name="idea-clean-modules" depends="prepare.base" description="Delete IDEA modules">
        <patternset id="project.files.pattern">
            <include name="modules/*/*.iml"/>
            <include name="modules/*/*/*.iml"/>
            <include name="modules/*/*/*/*.iml"/>
        </patternset>
        <delete>
            <fileset dir=".">
                <patternset refid="project.files.pattern"/>
            </fileset>
        </delete>
    </target>

    <!--
      Delete IDEA project/modules
    -->
    <target name="idea-clean" depends="prepare.base" description="Delete IDEA project/modules">
        <patternset id="project.files.pattern">
            <include name="UneasyRooster.ipr"/>
            <include name="UneasyRooster.iws"/>
            <include name="UneasyRooster.iml"/>
            <include name="modules/*/*.iml"/>
            <include name="modules/*/*/*.iml"/>
            <include name="modules/*/*/*/*.iml"/>
        </patternset>
        <pathconvert property="project.files.text" pathsep="${line.separator}                " dirsep="/">
            <mapper type="regexp" from=".*[/\\](.*\.i[mpw][lrs])" to="\1"/>
            <path>
                <fileset dir=".">
                    <patternset refid="project.files.pattern"/>
                </fileset>
            </path>
        </pathconvert>
        <echo level="info"> Project files for deletion:
                ${project.files.text}
        </echo>
        <input message="Delete project files?" validargs="y,n" addproperty="do.delete" />
        <condition property="do.exit">
            <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.exit">idea-clean, failing on user request.</fail>
        <delete>
            <fileset dir=".">
                <patternset refid="project.files.pattern"/>
            </fileset>
        </delete>
    </target>

    <!--
      Display information on a Jar file
    -->
    <target name="jarinfo">
        <fail unless="file">You must specify a JAR file [-Dfile=...]</fail>
        <echo level="info">Listing Jar file: ${file}</echo>
        <!-- This just stops idea showing an error for the undefined property -->
        <property name="file" value=""/>
        <jarlib-display file="${file}"/>
        <echo level="info">Listing complete (if theres no output you can try unzip -p ${file} META-INF/MANIFEST.MF)</echo>
    </target>

    <!--
      Print a list of available unit tests (or things that may be tests)
    -->
    <target name="summary" unless="test">
        <echo level="info">Possible test classes are: (use -Dtest=...)</echo>
        <pathconvert property="x" pathsep="${line.separator}" dirsep="/">
            <mapper type="regexp" from=".*[/\\](.*)\.class" to="\1"/>
            <path>
                <fileset dir="modules" includes="**/build/test-classes/**/*Test.class"/>
            </path>
        </pathconvert>
        <echo>${x}</echo>
        <echo>Use test-one -Dtest=x,y,z</echo>
    </target>

    <!--
      Run all unit tests
    -->
    <target name="test.all" description="Run all JUnit tests" depends="publish-all-modules, report.test">
        <checkfail/>
    </target>

    <!--
      Run all unit tests and reports
    -->
    <target name="test.junit" description="Run all JUnit tests and reports" depends="publish-all-modules, report.test, report.jdepend, report.findbugs, report.dependencies, javadoc">
        <checkfail/>
    </target>

    <target name="test.perf.init" depends="prepare.base">
        <!-- Web server root directory. -->
        <if>
            <os family="unix"/>
            <then>
                <property name="test.perf.www.dir" location="/var/www/html"/>
            </then>
            <elseif>
                <os family="windows"/>
                <then>
                    <property name="test.perf.www.dir" location="${env.SYSTEMDRIVE}\Inetpub\wwwroot"/>
                </then>
            </elseif>
            <else>
                <fail message="Cannot assign web server root directory because OS family is unrecognized."/>
            </else>
        </if>
        <fail message="Web server root directory does not exist [test.perf.www.dir]: ${test.perf.www.dir}">
            <condition>
                <not>
                    <available file="${test.perf.www.dir}" type="dir"/>
                </not>
            </condition>
        </fail>

        <property name="test.perf.root.dir" location="${test.perf.www.dir}/testperf"/>

        <!-- Directory that stores all Japex test reports. -->
        <property name="test.perf.reports.dir" location="${test.perf.root.dir}/reports"/>
        <mkdir dir="${test.perf.reports.dir}"/>

        <!-- Directory for trend output. -->
        <property name="test.perf.trend.dir" location="${test.perf.root.dir}/trend"/>
        <mkdir dir="${test.perf.trend.dir}"/>

        <!-- Directory for regression output. -->
        <property name="test.perf.regression.dir" location="${test.perf.root.dir}/regression"/>
        <mkdir dir="${test.perf.regression.dir}"/>
    </target>

    <target name="test.perf.run" description="Run performance test to generate a Japex test report." depends="clean.test, test.perf.init">
        <echo level="info">Building for performance test.</echo>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="layer7-skunkworks" reference="module-build-path-skunk" onMissingDescriptor="skip">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-skunk" pathid="build-path-skunk-text"/>
        <modules target="publish-all-quick" buildpathref="module-build-path-skunk"/>

        <echo level="info">Running performance test.</echo>
        <!-- Composes desired Japex report file name and final location. -->
        <tstamp>
            <format property="test.perf.report.suffix" pattern="yyyy'-'MM'-'dd'.'HHmm"/>
        </tstamp>
        <property name="test.perf.report.name" value="${build.version.major}.${build.version.minor}${build.version.subminor}_${test.perf.report.suffix}"/>
        <property name="test.perf.report.file" location="${test.perf.reports.dir}/${test.perf.report.name}.xml"/>

        <!-- Creates temporary directory for Japex to output test report.
             This is necessary because Japex is hardcoded to output folder and file names I don't like. -->
        <tstamp>
            <format property="test.perf.tmp.suffix" pattern="yyyyMMddHHmmss"/>
        </tstamp>
        <property name="test.perf.tmp.dir" location="${build.dir}/tmp-testperf-${test.perf.tmp.suffix}"/>
        <mkdir dir="${test.perf.tmp.dir}"/>

        <!-- classpath for the tested code -->
        <ivy:cachepath organisation="com.l7tech" module="layer7-skunkworks" inline="true" conf="default,test" pathid="japex.skunk.path"/>
        <pathconvert property="japex.class.text" pathsep=":" dirsep="/" refid="japex.skunk.path"/>
        <echo>Japex test classpath:
            ${japex.class.text}
        </echo>

        <!-- classpath for the test runner -->
        <path id="test.perf.classpath">
            <fileset dir="${src.root}/lib">
                <include name="ant.jar"/>
                <include name="test/japex-1.1.jar"/>
                <include name="test/jdsl-1.1.jar"/>
                <include name="tools/junit-*.jar"/>
            </fileset>
        </path>

        <!-- Runs Japex to generate test report file. -->
        <java dir="." fork="true" classname="com.sun.japex.Japex" classpathref="test.perf.classpath">
            <jvmarg value="-Djapex.reportsDirectory=${test.perf.tmp.dir}"/>
            <jvmarg value="-Djapex.class.text=${japex.class.text}"/>
            <jvmarg value="-Dlayer7.name=${test.perf.report.name}"/>
            <jvmarg value="-Dlayer7.version=v${build.version.major}.${build.version.minor}${build.version.subminor}"/> <!-- letter 'v' to prevent Japex from parsing this as number -->
            <jvmarg value="-Dlayer7.notes=snapshot performance test"/>
            <jvmarg value="-Dsrc.root=${src.root}"/>
            <arg line="-nohtml"/>
            <arg line="-verbose"/>
            <arg line="modules/skunkworks/src/main/java/com/l7tech/test/performance/japex-config.xml"/>
        </java>

        <!-- Moves Japex test report to desired final location. -->
        <move tofile="${test.perf.report.file}">
            <fileset dir="${test.perf.tmp.dir}">
                <include name="**/report.xml"/>
            </fileset>
        </move>

        <delete dir="${test.perf.tmp.dir}"/>

        <echo level="info">Performance test complete.</echo>
    </target>

    <target name="test.perf.trend" description="Generate trend charts from Japex test reports." depends="clean.test, test.perf.init">
        <echo level="info">Running performance trend.</echo>
        <java fork="true" classname="com.l7tech.test.performance.TrendReport">
            <classpath>
                <pathelement location="modules/skunkworks/build/classes"/>
                <fileset dir="lib">
                    <include name="ant.jar"/>
                    <include name="repository/jfree/jcommon-*.jar"/>
                    <include name="repository/jfree/jfreechart-*.jar"/>
                    <include name="xercesImpl.jar"/>
                    <include name="repository/commons-lang/commons-lang-2.6.jar"/>
                    <include name="test/japex-1.1.jar"/>
                </fileset>
                <fileset dir="modules/gateway/server/build">
                    <include name="jar/layer7-gateway-server*.jar"/>
                    <include name="test/layer7-gateway-server*.jar"/>
                    <include name="dependency/layer7-*.jar"/>
                </fileset>
            </classpath>
            <arg value="-note=You can change benchmark list in &lt;code>UneasyRooster/build.xml&lt;/code> Ant target &lt;code>test.perf.trend&lt;/code>."/>
            <arg value="-note=Also see &lt;a href=&quot;../regression/index.html&quot;>Regression Report&lt;/a>"/>
            <arg value="-note=Also see &lt;a href=&quot;http://sarek.l7tech.com/mediawiki/index.php?title=Nightly_Performance_Regression#Post-implementation_Documentation&quot;>functional spec&lt;/a> on how to generate this"/>
            <arg value="-verbose"/>
            <arg value="Performance Trend Report"/>             <!-- title -->
            <arg value="${test.perf.trend.dir}"/>               <!-- outputDir -->
            <arg value="${test.perf.reports.dir}?today?-14D"/>  <!-- reportDir, include any Japex test report from last 14 days -->
            <!-- Add specific Japex test reports here. -->
            <arg value="${test.perf.reports.dir}/4.2_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.3_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.4_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.5_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.6_final.xml"/>
            <arg value="${test.perf.reports.dir}/4.6.5_final.xml"/>
        </java>
        <echo level="info">Performance trend complete.</echo>
    </target>

    <target name="test.perf.regression" description="Generate regression report and e-mail from Japex test reports." depends="clean.test, test.perf.init" if="test.perf.to">
        <echo level="info">Running performance regression.</echo>
        <java classname="com.l7tech.test.performance.RegressionReport" fork="true">
            <classpath>
                <pathelement location="modules/skunkworks/build/classes"/>
                <fileset dir="lib">
                    <include name="repository/javax.mail/mail-1.6.1.jar"/>
                    <include name="xercesImpl.jar"/>
                    <include name="repository/commons-lang/commons-lang-2.6.jar"/>
                    <include name="test/japex-1.1.jar"/>
                </fileset>
                <fileset dir="modules/gateway/server/build">
                    <include name="jar/layer7-gateway-server*.jar"/>
                    <include name="test/layer7-gateway-server*.jar"/>
                    <include name="dependency/layer7-*.jar"/>
                </fileset>
            </classpath>
            <jvmarg value="-Dmail.smtp.host=mail.l7tech.com"/>
            <arg value="-alwaysEMail"/>
            <arg value="-httpDir=testperf/regression"/>
            <arg value="-note=View this page online &lt;a href=&quot;index.html&quot;>here&lt;/a>."/>
            <arg value="-note=You can change threshold, benchmark list and e-mail recipients in &lt;code>UneasyRooster/build.xml&lt;/code> Ant target &lt;code>test.perf.regression&lt;/code>."/>
            <arg value="-note=Also see &lt;a href=&quot;../trend/index.html&quot;>Trend Report&lt;/a>."/>
            <arg value="-note=Also see &lt;a href=&quot;http://sarek.l7tech.com/mediawiki/index.php?title=Nightly_Performance_Regression#Post-implementation_Documentation&quot;>functional spec&lt;/a> on how to generate this"/>
            <arg value="-verbose"/>
            <arg value="Performance Regression Report"/>        <!-- title -->
            <arg value="${test.perf.regression.dir}"/>          <!-- outputDir -->
            <arg value="${test.perf.from}"/>                    <!-- sender -->
            <arg value="${test.perf.to}"/>                      <!-- toList -->
            <arg line="5 below avg"/>                           <!-- Highlight any 5% below average of benchmarks. -->
            <arg value="${test.perf.reports.dir}?today?-14D"/>  <!-- reportDir, include any Japex test report from last 14 days -->
            <!-- Add specific Japex test reports here, e.g.,
                 <arg value="${test.perf.reports.dir}/4.2_final.xml"/> -->
        </java>
        <echo level="info">Performance regression complete.</echo>
    </target>

    <target name="test.perf.nightly" description="Run nightly performance tests." depends="test.perf.run, test.perf.trend, test.perf.regression">
        <echo level="info">Nightly performance tests complete.</echo>
    </target>

    <!-- JDepend report -->
    <target name="report.jdepend" depends="package.report.jars">
        <echo level="info">Generating JDepend report.</echo>
        <mkdir dir="${build.reports}/jdepend"/>
        <mkdir dir="${build.reports}/teamcity"/>

        <mkdir dir="${build.dir}/layer7libs"/>
        <copy todir="${build.dir}/layer7libs" flatten="true">
            <fileset dir="${build.dir}">
                <include name="client/Client*.jar"/>
                <include name="gateway/Gateway*.jar"/>
                <include name="manager/Manager*.jar"/>
                <include name="client/lib/layer7-*"/>
                <include name="gateway/lib/layer7-*"/>
                <include name="manager/lib/layer7-*"/>
            </fileset>
        </copy>

        <jdepend format="xml" outputfile="${build.reports}/jdepend/index.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <exclude name="EDU.*"/>
            <exclude name="edu.*"/>
            <exclude name="org.*"/>
            <exclude name="sun.*"/>
            <exclude name="snoozesoft.*"/>
            <exclude name="x0AcClassesPassword.*"/>
            <exclude name="x0AcClassesTLSClient.*"/>
            <exclude name="x0AcClassesXMLDSig.*"/>
            <exclude name="x0Assertion.*"/>
            <exclude name="net.*"/>
            <exclude name="com.whirlycott.*"/>
            <exclude name="com.tibco.*"/>
            <exclude name="com.sun.*"/>
            <exclude name="com.safelogic.cryptocomply.*"/>
            <exclude name="com.ncipher.*"/>
            <exclude name="com.mchange.*"/>
            <exclude name="com.jgoodies.*"/>
            <exclude name="com.japisoft.*"/>
            <exclude name="com.intellij.*"/>
            <exclude name="com.incors.*"/>
            <exclude name="com.ibm.*"/>
            <exclude name="com.chrysalisits.*"/>
            <exclude name="com.vladium.*"/>
            <exclude name="antlr"/>
            <exclude name="antlr.*"/>

            <classespath>
                <fileset dir="${build.dir}/layer7libs"/>
            </classespath>
        </jdepend>

        <xslt processor="trax"
              classpath="lib/tools/ant-trax.jar"
              style="etc/build/jdepend.xsl"
              basedir="${build.reports}/jdepend"
              destdir="${build.reports}/jdepend"
              includes="index.xml"
              />

        <zip destfile="${build.reports}/teamcity/jdepend.zip" basedir="${build.reports}/jdepend" />
    </target>

    <target name="report.findbugs.checkavailable">
        <available property="findbugs.isavailable" file="${findbugs.home}" type="dir"/>
    </target>

    <target name="report.dependencies" depends="prepare.base">
        <mkdir dir="${build.reports}/ivy"/>
        <mkdir dir="${build.reports}/teamcity"/>
        
        <ivy:resolve file="modules/gateway/server/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/console/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="manager_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/xmlvpnclient/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="xmlvpnclient_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/config/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_config_dependencies.html" graph="false"/>

        <ivy:resolve file="modules/gateway/processcontroller/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:report todir="${build.reports}/ivy" outputpattern="gateway_processcontroller_dependencies.html" graph="false"/>

        <echoxml file="${build.reports}/ivy/index.html">
            <html>
                <head>
                    <title>Ivy Dependencies by SecureSpan Application.</title>
                </head>
                <body bgcolor="white">
                    <ul>
                        <li><a href="gateway_dependencies.html">Gateway</a></li>
                        <li><a href="manager_dependencies.html">Manager</a></li>
                        <li><a href="xmlvpnclient_dependencies.html">XML VPN Client</a></li>
                        <li><a href="gateway_config_dependencies.html">Gateway Configuration Client</a></li>
                        <li><a href="gateway_processcontroller_dependencies.html">Gateway Process Controller</a></li>
                    </ul>
                </body>
            </html>
        </echoxml>

        <zip destfile="${build.reports}/teamcity/ivydeps.zip" basedir="${build.reports}/ivy" />
    </target>

    <!--
      Build FindBugs report
    -->
    <target name="report.findbugs" depends="package.report.jars, report.findbugs.checkavailable" if="findbugs.isavailable">
        <echo level="info">Generating FindBugs report.</echo>
        <mkdir dir="${build.reports}/findbugs"/>
        <mkdir dir="${build.reports}/teamcity"/>

        <mkdir dir="${build.dir}/layer7libs"/>
        
        <!-- Get production modular assertions -->
        <ivy:resolve file="modules/gateway/production/ivy.xml" showprogress="false" transitive="false" conf="module,module-client" log="quiet" checkIfChanged="false"/>
        <ivy:retrieve conf="module,module-client" pattern="${build.dir}/layer7libs/[artifact]-[revision].[ext]"/>

        <copy todir="${build.dir}/layer7libs" flatten="true">
            <fileset dir="${build.dir}">
                <include name="client/Client*.jar"/>
                <include name="gateway/Gateway*.jar"/>
                <include name="manager/Manager*.jar"/>
                <include name="processcontroller/Controller*.jar"/>
                <include name="client/lib/layer7-*.jar"/>
                <include name="gateway/lib/layer7-*.jar"/>
                <include name="manager/lib/layer7-*.jar"/>
                <include name="processcontroller/lib/layer7-*.jar"/>
            </fileset>
        </copy>

        <!--
          Write project file for FindBugs
        -->
        <path id="findbugs.source.path">
            <dirset dir="${src.root}/modules" includes="**/src/main/java"/>
        </path>
        <path id="findbugs.target.class.path">
            <fileset dir="${build.dir}/layer7libs"/>
        </path>
        <path id="findbugs.aux.class.path">
            <fileset dir="${build.dir}">
                <exclude name="client/Client*.jar"/>
                <exclude name="processcontroller/Controller*.jar"/>
                <exclude name="gateway/Gateway*.jar"/>
                <exclude name="manager/Manager*.jar"/>
                <exclude name="*/lib/layer7-*.jar"/>
                <include name="*/lib/*.jar"/>
            </fileset>
        </path>
        <pathconvert property="findbugs.target.class.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.target.class.path">
            <mapper type="regexp" from="(.*)" to="&lt;Jar&gt;\1&lt;/Jar&gt;"/>
        </pathconvert>
        <pathconvert property="findbugs.aux.class.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.aux.class.path">
            <mapper type="regexp" from="(.*)" to="&lt;AuxClasspathEntry&gt;\1&lt;/AuxClasspathEntry&gt;"/>
        </pathconvert>
        <pathconvert property="findbugs.source.xml" pathsep="${line.separator}    " dirsep="/" refid="findbugs.source.path">
            <mapper type="regexp" from="(.*)" to="&lt;SrcDir&gt;\1&lt;/SrcDir&gt;"/>
        </pathconvert>
        <echo file="${build.etc}/findbugs.fbp">&lt;Project filename="${build.etc}/findbugs.fbp" projectName="UneasyRooster"&gt;
            ${findbugs.target.class.xml}
            ${findbugs.aux.class.xml}
            ${findbugs.source.xml}
            &lt;/Project&gt;
        </echo>
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="${build.reports}/findbugs/index.html"
                  jvmargs="-Xmx768m"
                  projectFile="${build.etc}/findbugs.fbp"
                  timeout="1800000">
        </findbugs>

        <zip destfile="${build.reports}/teamcity/findbugs.zip" basedir="${build.reports}/findbugs" />
    </target>

    <!--
      Build JUnit report
    -->
    <target name="report.test" if="build.junit.xmlformat" depends="init">
        <!-- Create report -->
        <mkdir dir="${build.reports}"/>
        <junitreport todir="${build.reports}">
            <fileset dir="${src.root}/modules">
                <include name="*/build/reports/tests/TEST-*.xml"/>
                <include name="*/*/build/reports/tests/TEST-*.xml"/>
                <include name="*/*/*/build/reports/tests/TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports}/html"/>
        </junitreport>

        <!-- Package as build artifact -->
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/junit.zip" basedir="${build.reports}/html" />
    </target>

    <!--
      Clean data from running tests.
    -->
    <target name="clean.test" depends="init-core">
        <delete>
            <fileset dir="${src.root}/modules">
                <include name="*/build/reports/tests/*,*/*/build/reports/tests/*,*/*/*/build/reports/tests/*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/">
                <include name="WspWriterTest*"/>
            </fileset>
        </delete>
    </target>

    <!--
      Remove any build artifacts
    -->
    <target name="clean" depends="init-core,clean.test,clean-modules" description="Delete all build output.">
        <delete dir="${dist.dir}"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.dir}" failonerror="false"/>
        <delete dir="${build.rpm}"/>
        <delete dir="${build.docker}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*/*"/>
                <include name="Client-*/*"/>
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete dir="${javadoc.home}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="stubdata*"/>
            </fileset>
        </delete>
        <delete>
			<fileset dir="${src.root}/tools/com/l7tech/tools">
                <include name="JarChecker*.class"/>
                <include name="JarSignatureChecker*.class"/>
            </fileset>
        </delete>
        <property name="buildinfo.update" value="true"/>
    </target>

    <!--
        Javadoc target
    -->
    <target name="javadoc" depends="init,prepare" description="Generates Javadoc.">
        <delete dir="${javadoc.home}"/>
        <mkdir dir="${javadoc.home}"/>
        <path id="javadoc.src.path">
            <dirset dir="${src.root}/modules">
                <include name="*/src/main/java"/>
                <include name="*/*/src/main/java"/>
                <exclude name="skunkworks/src/main/java"/>
            </dirset>
        </path>
        <path id="javadoc.class.path">
            <fileset dir="lib/repository"/>
        </path>
        <javadoc sourcepathref="javadoc.src.path"
                 classpathref="javadoc.class.path"
                 destdir="${javadoc.home}"
                 packagenames="com.*"
                 windowtitle="Layer 7 Technologies API Specification"
                 doctitle="Layer 7 Technologies API Specification"
                 defaultexcludes="yes"
                 version="true"
                 use="true"
                 splitindex="true"
                 maxmemory="512m">
            <header><![CDATA[<b>Layer 7 Technologies Inc.<b><br><font size='-1'>UneasyRooster</font>]]></header>
            <bottom><![CDATA[<i>Copyright &#169; 2008 Layer 7 Technologies Inc. All Rights Reserved.</i>]]></bottom>
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
            <link href="http://static.springframework.org/spring/docs/2.5.x/api/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
            <link href="http://hc.apache.org/httpclient-3.x/apidocs/"/>
            <link href="http://ws.apache.org/commons/policy/apidocs/"/>
            <link href="http://www.bouncycastle.org/docs/docs1.5/"/>
            <link href="http://jaxen.codehaus.org/apidocs/"/>
            <link href="http://www.dom4j.org/apidocs/"/>
            <link href="http://jetty.mortbay.org/javadoc/"/>
            <link href="http://tomcat.apache.org/tomcat-6.0-doc/api/"/>
            <link href="http://www.jfree.org/jfreechart/api/javadoc/"/>
            <link href="http://www.toedter.com/en/jcalendar/api/"/>
            <tag name="noinspection" enabled="false"/>
        </javadoc>
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/javadoc.zip" basedir="${javadoc.home}" />
    </target>

    <!--
      Compile target
    -->
    <target name="compile"
            description="Compile the Java code and UI forms."
            depends="package.jars">
    </target>

    <target name="package.jars"
            description="Compile and package Java code and UI forms."
            depends="prepare,publish-main-modules"
            unless="package.jars.notrequired">
    </target>

    <!--
      Package target.
      Package the application (gateway, manager, client) into their
      Respective archives (jar).
      This target is invoked by other targets such as dist.
    -->
    <target name="package"
            description="Create the SSG JAR file and SSB/SSM installers."
            depends="package.gateway.all, package.manager, package.patchverifier, package.client, package.installclients, package.installgateway.work"/>

    <target name="package.extras" depends="zip.api, package.gatewaymanagementclient"/>

    <target name="package.gateway.all" depends="package.configwiz.all, package.backuprestore, package.gateway, package.modules, pack.manager, package.ssgbackup.zip"/>

    <!--
      Build the windows installers without any dependencies.

      This target is a direct replacement for the old perl "make_installers.pl -b"

      NOTE: This is "broken" by design, it does exactly what the perl script used to do, you must
            build the ssg before running this target.
    -->
    <target name="make_installers"
            description="Create the SSG JAR file and SSXVC/SSM Win32 installers (was make_installers.pl -b)."
            depends="makerpm, makensis-unsafe, package.installclient.work, package.installmanager.work, package.installgateway.work">
    </target>

    <!--
      Generate a version string if not supplied
    -->
    <target name="package.readversion" depends="package.readlocal,package.readversion.securespan, package.readversion.api">
        <echo level="info">Build is using SS version: "${build.version}" [${build.rpmversion}-${build.version.revision}]</echo>
        <echo level="info">Build is using API version: "${build.api.version}" [${build.api.rpmversion}-${build.api.version.revision}]</echo>
    </target>
    <target name="package.readlocal">
        <property file="${src.root}/local.build.version"/>        
    </target>
    <target name="package.readversion.securespan" unless="build.version" depends="package.defaultrpmversion">
        <!-- Set properties to keep IDEA happy -->
        <property name="build.version.major" value=""/>
        <property name="build.version.minor" value=""/>
        <property name="build.version.subminor" value=""/>
        <property name="build.version.label" value=""/>
        <!-- Revision is set to 1 for all builds except official. Official builds already set build.version.revision in OFFICIAL-build.init -->
        <property name="build.version.revision" value="1"/>

        <!-- Include hyphen with suffix if it is defined and not empty -->
        <condition property="build.version.revision.suffix" value="-${build.number.api.parameters.suffix}" else="">
            <and>
                <isset property="build.number.api.parameters.suffix"/>
                <not>
                    <equals arg1="${build.number.api.parameters.suffix}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="build.version" value="${build.version.major}.${build.version.minor}.${build.version.subminor}${build.version.label}"/>
        <property name="build.rpmversion" value="${build.version}"/>
    </target>
    <target name="package.readversion.api" unless="build.api.version" depends="package.defaultapirpmversion">
        <!-- Set properties to keep IDEA happy -->
        <property name="build.api.version.major" value=""/>
        <property name="build.api.version.minor" value=""/>
        <property name="build.api.version.subminor" value=""/>
        <property name="build.api.version.label" value=""/>
        <property name="build.api.version.revision" value=""/>

        <property name="build.api.version" value="${build.api.version.major}.${build.api.version.minor}.${build.api.version.subminor}${build.api.version.label}"/>
        <property name="build.api.rpmversion" value="${build.api.version}"/>
    </target>
    <target name="package.defaultrpmversion" if="build.version" unless="build.rpmversion">
        <property name="build.rpmversion" value="${build.version}"/>        
    </target>
    <target name="package.defaultapirpmversion" if="build.api.version" unless="build.api.rpmversion">
        <property name="build.api.rpmversion" value="${build.api.version}"/>
    </target>

    <!--
      Get the version for this build from the BuildInfo util.
    -->
    <target name="package.readversion.unsafe" depends="package.readversion">
    </target>

    <!--
      Compile and package the SSB
    -->
    <target name="client" description="Build and package the SSXVC" depends="package.installclient"/>

    <!--
      Compile and package the SSM
    -->
    <target name="manager" description="Build and package the SSM" depends="package.installmanager"/>

    <!--
      Compile and package the SSG
    -->
    <target name="gateway" description="Build and package the SSG" depends="package.installgateway.work"/>

    <!--
      Compile and package just the ConfigWizards
    -->
    <target name="configwizard" description="Build and package just the config wizards" depends="package.configwiz.all"/>

    <!--
      Compile and package a single module and any modules that directly depend on it
    -->
    <target name="module_internal" depends="prepare.base">
        <fail unless="module">module is a required property (the module to package)</fail>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="${module}" reference="module-build-path-single" onMissingDescriptor="skip" onlydirectdep="true">
            <fileset dir="modules" includes="${project.module.includes}" excludes="${project.module.excludes}"/>
        </ivy:buildlist>

        <ivy-echo-build-plan refid="module-build-path-single" pathid="module-build-path-single-text"/>
        <modules target="publish" buildpathref="module-build-path-single"/>
    </target>

    <!--
      Compile and package a single module and any modules that it depends on
    -->
    <target name="moduled_internal" depends="prepare.base">
        <fail unless="module">module is a required property (the module to package)</fail>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="${module}" reference="module-build-path-single" onMissingDescriptor="skip">
            <fileset dir="modules" includes="${project.module.includes}" excludes="${project.module.excludes}"/>
        </ivy:buildlist>

        <ivy-echo-build-plan refid="module-build-path-single" pathid="module-build-path-single-text"/>
        <modules target="publish" buildpathref="module-build-path-single"/>
    </target>

    <target name="do_module_sign" if="module.skar.sign">
        <property name="skarsigner.sign.all" value="true"/>

        <!-- build SkarSigner only if the jar file does not exist -->
        <antcall target="build-skar-if-not-exists"/>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="${module}" reference="module-build-path-single" onMissingDescriptor="skip" restartFrom="${module}">
            <fileset dir="modules" includes="${project.module.includes}" excludes="${project.module.excludes}"/>
        </ivy:buildlist>

        <ivy-echo-build-plan refid="module-build-path-single" pathid="module-build-path-single-text"/>
        <modules target="package" buildpathref="module-build-path-single"/>
    </target>

    <!--
      Compile and package a single module and any modules that directly depend on it
    -->
    <target name="module" description="Build and package a single module (use with -Dmodule=...)" depends="skiptests,module_internal,do_module_sign">
        <fail unless="module">module is a required property (the module to package)</fail>
    </target>

    <!--
      Compile and package a single module and any modules that directly depend on it
    -->
    <target name="moduled" description="Build and package a single module (use with -Dmodule=...)" depends="skiptests,moduled_internal,do_module_sign">
        <fail unless="module">module is a required property (the module to package)</fail>
    </target>

    <!--
      Run the specified target on a single module
    -->
    <target name="modulet" description="Run a target on a single module (use with -Dmodule=... -Dtarget=...)" depends="prepare.base">
        <fail unless="module">module is a required property (the module to package)</fail>
        <property name="target" value="package"/>

        <!-- Create build list for required 1.5 modules -->
        <ivy:buildlist root="${module}" reference="module-build-path-single" onMissingDescriptor="skip" restartFrom="${module}">
            <fileset dir="modules" includes="${project.module.includes}" excludes="${project.module.excludes}"/>
        </ivy:buildlist>

        <ivy-echo-build-plan refid="module-build-path-single" pathid="module-build-path-single-text"/>
        <modules target="${target}" buildpathref="module-build-path-single"/>
    </target>

    <!--
      Create a new modular assertion
    -->
    <target name="new-assertion" description="Generate a new modular assertion">
        <ant dir="modules/gateway/assertions"/>
    </target>

    <!--
      Clean development deploy of SSG
    -->
    <target name="cleandeploy" description="Delete deployed libraries/modules" depends="init-core">
        <echo level="info">Deleting web libraries</echo>
        <delete dir="${deploy.dir}/web/ssg/webadmin/applet"/>
		<delete dir="${deploy.dir}/web/ssg/webstart/lib"/>
		<delete dir="${deploy.dir}/web/ssg/webstart/resources"/>
		<delete dir="${deploy.dir}/web/ssg/webstart"/>

        <echo level="info">Deleting modules</echo>
        <delete dir="${deploy.dir}/modules/assertions"/>

        <echo level="info">Deleting libraries</echo>
        <delete dir="${deploy.dir}/lib"/>
        <delete file="${deploy.dir}/Gateway.jar"/>
    </target>

	<target name="install-managerjnlpfiles">
		<loadfile property="mess" srcFile="modules/gateway/console-webstart/src/main/resources/com/l7tech/console/webstart/resources/resources.txt"/>
	
		<!--<var name="resources" value=""/>-->
		 <var name="resources" value=""/>
		 <var name="versionfilecontent" value=""/>
		 <taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar"/>
		</classpath>
		</taskdef>
		
		<for list="${mess}" param="var" delimiter="${line.separator}"> 
			<sequential>
				<antcallback target="updatewebstartfiles" return="jnlpresources,versionfileresources">
					<param name="var" value="@{var}"/>
				</antcallback>
				<var name="resources" value="${resources}        ${jnlpresources}${line.separator}"/>
				<var name="versionfilecontent" value="${versionfilecontent}    ${versionfileresources}${line.separator}"/>
			</sequential>
		</for>
		<loadfile property="jnlpheader" srcFile="modules/gateway/console-webstart/src/main/resources/com/l7tech/console/webstart/resources/managerjnlpheader.xml">
		</loadfile>	
		<echo file="${deploypath}/${install.src.ssg.webstart}/manager.jnlp" append="false">${jnlpheader}${line.separator}${resources}
		&lt;property name=&quot;jnlp.versionEnabled&quot; value=&quot;true&quot;/&gt;
	&lt;/resources&gt;
	&lt;application-desc name=&quot;Policy Manager&quot; main-class=&quot;com.l7tech.console.Main&quot;/&gt;
&lt;/jnlp&gt;
		</echo>
		<echo file="${deploypath}/${install.src.ssg.webstartlib}/version.xml" append="false">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; 
		standalone=&quot;no&quot;?>
&lt;jnlp-versions&gt;
${versionfilecontent}
&lt;/jnlp-versions&gt;
		</echo>
	</target>
	<target name="updatewebstartfiles">		
		<script language="javascript">
		  arr = project.getProperty('var').split(' ');
		  project.setProperty('jarName', arr[0]);
		  if( arr[1] ) {
			if(arr[1].indexOf("version") != -1){
				versionno = arr[1].split('=');
				project.setProperty('version', (versionno[1] === undefined || versionno[1].length == 0) ? "0.0" : versionno[1].trim());  
			 }
			 else {
				project.setProperty('version', "0.0");  
			 }
		}
		else {
			project.setProperty('version', "0.0");  
		}
		</script>
		<if>
		 <equals arg1="${jarName}" arg2="manager.jar" />
		 <then>
		   <var  name="jnlpresources" value="&lt;jar href=&quot;lib/${jarName}&quot; main=&quot;true&quot; version=&quot;${version}&quot; /&gt;"/>
		 </then>
		 <else>
		   <var  name="jnlpresources" value="&lt;jar href=&quot;lib/${jarName}&quot; version=&quot;${version}&quot; /&gt;"/>
		 </else>
		</if>
		<var name="versionfileresources" value="&lt;resource&gt;${line.separator}        &lt;pattern&gt;${line.separator}
           &lt;name&gt;${jarName}&lt;/name&gt;${line.separator}
           &lt;version-id&gt;${version}&lt;/version-id&gt;${line.separator}        &lt;/pattern&gt;
		   ${line.separator}        &lt;file&gt;${jarName}&lt;/file&gt;${line.separator}    &lt;/resource&gt;"/>
	</target>
    <!--
      Deploy SSG configuration files for development (to run with classes from IDE)
      This will not deploy the Manager Applet or any modular assertions
    -->
    <target name="deployconfig" description="Deploy configuration files for a development SSG (run from IDE)" depends="init,db.properties,init-install-macros">
        <property name="dev.deploy.ssg.dir" value="${dev.deploy.dir}/Gateway"/>
        <echo level="info">Creating deployment directories</echo>
        <mkdir dir="${dev.deploy.ssg.dir}/node/default/etc/conf"/>

        <echo level="info">Copying gateway configuration files</echo>
        <echo level="info">Copying configuration files</echo>
        <concat destfile="${dev.deploy.ssg.dir}/node/default/etc/conf/node.properties" force="no" fixlastline="true">
            <string lastmodified="1970" value="#"/>
            <string lastmodified="1970" value="# Node properties file generated by ANT deploy (${build.timestamp})"/>
            <string lastmodified="1970" value="#"/>
            <string lastmodified="1970" value="node.id  = ${deploy.node.id}"/>
            <string lastmodified="1970" value="node.db.config.main.host = ${deploy.db.host}"/>
            <string lastmodified="1970" value="node.db.config.main.port = ${deploy.db.port}"/>
            <string lastmodified="1970" value="node.db.config.main.name = ${deploy.db.name}"/>
            <string lastmodified="1970" value="node.db.config.main.user = ${deploy.db.username}"/>
            <string lastmodified="1970" value="node.db.config.main.pass = ${deploy.db.password}"/>
            <string lastmodified="1970" value="node.db.type = derby"/>
            <string lastmodified="1970" value="node.cluster.pass = ${deploy.cluster.password}"/>
            <string lastmodified="1970" value="node.java.path = ${java.home}"/>
        </concat>

        <echo level="info">Finished copying gateway configuration files</echo>
    </target>

    <target name="bootstrap" description="Deploy configuration files for a boostraped SSG" depends="init,init-install-macros">
        <property name="dev.deploy.ssg.dir" value="${dev.deploy.dir}/Gateway"/>
        <echo level="info">Creating bootstrap directories</echo>
        <mkdir dir="${dev.deploy.ssg.dir}/node/default/etc/bootstrap"/>

        <echo level="info">Creating license files</echo>
        <mkdir dir="${dev.deploy.ssg.dir}/node/default/etc/bootstrap/license"/>
        <copy file="DEVLICENSE.xml" todir="${dev.deploy.ssg.dir}/node/default/etc/bootstrap/license"/>

        <echo level="info">Creating service files</echo>
        <mkdir dir="${dev.deploy.ssg.dir}/node/default/etc/bootstrap/services"/>
        <touch file="${dev.deploy.ssg.dir}/node/default/etc/bootstrap/services/restman"/>

        <echo level="info">Finished copying gateway bootstrap files</echo>
    </target>

    <target name="skunkworks" description="Copies modular assertion files to skunkworks directory" depends="init,init-install-macros">

        <property name="dev.deploy.modules" value="${dev.deploy.dir}/Gateway/runtime/modules/assertions/"/>
        <property name="dev.skunkworks.modules" value="${src.root}/modules/skunkworks/build/modules"/>

        <echo level="info">Creating skunkworks modules folder</echo>
        <mkdir dir="${dev.skunkworks.modules}"/>

        <echo level="info">Copying assertions</echo>
        <copy todir="${dev.skunkworks.modules}">
            <fileset dir="${dev.deploy.modules}"/>
        </copy>

        <echo level="info">Finished copying files</echo>
    </target>

    <!--
      Deploy all server applications for development
    -->
    <target name="deploy-all" description="Deploy server applications for development (run with ./run.sh gateway, etc)" depends="deploy, deploy-controller"/>

    <target name="deploy-lite-init">
        <property name="module.skip.tools" value="true"/>
    </target>

    <!--
      Deploy Gateway for development without building and packaging non-essential utilities
    -->
    <target name="deploy-lite" description="Deploy a development Gateway, skipping build and package of nonessential utilities (License Generators, AuditSignatureChecker, SkarSigner, etc.)" depends="deploy-lite-init, deploy"/>

    <!--
      Deploy SSG for development
    -->
    <target name="deploy" description="Deploy a development SSG (run with ./run.sh gateway)" depends="skiptests, package.gateway.ifrequired, deployconfig, bootstrap">
        <!-- Remove any pack200 files if present, otherwise these can be out of date and cause problems running the SSM applet -->
        <delete>
            <fileset dir="${build.dir}/managerapplet/" includes="**/*.pack.gz"/>
        </delete>

        <!-- Deploy application -->
        <install-ssg-software dir="${dev.deploy.ssg.dir}"/>
    </target>

    <target name="deploy-nocheck" description="Deploy a development SSG, skipping the build (useful to deploy partial rebuild)" depends="deployconfig, package.manager.work, package.gateway.work, package.modules.work, bootstrap">
        <!-- Remove any pack200 files if present, otherwise these can be out of date and cause problems running the SSM applet -->
        <delete>
            <fileset dir="${build.dir}/managerapplet/" includes="**/*.pack.gz"/>
        </delete>

        <install-ssg-software dir="${dev.deploy.ssg.dir}"/>
    </target>

    <!--
      Deploy Process Controller for development
    -->
    <target name="deploy-controller-init" depends="init, init-install-macros">
        <property name="dev.deploy.pc.dir" value="${dev.deploy.dir}/Controller"/>
        <install-ssg-processcontroller dir="${dev.deploy.pc.dir}"/>
    </target>
    <target name="deploy-controller-config-check" depends="deploy-controller-init">
        <condition property="deploycontroller.config.isrequired">
            <not>
                <available file="${dev.deploy.pc.dir}/etc/conf/host.properties"/>
            </not>
        </condition>
    </target>
    <target name="deploy-controller-config" if="deploycontroller.config.isrequired" depends="deploy-controller-config-check">
        <ivy:cachepath organisation="com.l7tech" module="layer7-gateway-processcontroller" inline="true" conf="default" pathid="sspc.path"/>
        <java classname="com.l7tech.server.processcontroller.BootstrapConfig" fork="true" dir="${dev.deploy.pc.dir}">
            <classpath>
                <path refid="sspc.path"/>
            </classpath>
        </java>
    </target>
    <target name="deploy-controller" description="Deploy a development Process Controller (run with ./run.sh controller)" depends="deploy-controller-init,deploy-controller-config"/>

    <!-- Deprecated deployment target -->
    <target name="deploycontroller" depends="deploy-controller"/>

    <target name="pack.manager" depends="pack.manager.compress"/>

    <target name="pack.manager.compress" depends="package.manager" if="pack200">
        <pack-mac jarfile="${build.dir}/managerapplet/layer7-gateway-console-applet.jar"/>

        <!--
          The build will fail if any of these JARS are missing.
        -->
        <pack-mac jarfile="${build.dir}/managerapplet/lib/annotations-java8-2016.2.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/antlr-2.7.7-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/aopalliance-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/apache-harmony-asn1-0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/bcprov-unsigned-jdk15on-1.60.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/browser-launcher-1.0rc4.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/commons-codec-1.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/commons-collections-3.2.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/httpclient-4.2.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/httpcore-4.2.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/httpmime-4.2.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/commons-lang-2.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/concurrent-1.3.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/dom4j-1.6.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/forms_rt-2016.2.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/hibernate-core-3.6.9.Final.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jackson-core-asl-1.9.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jackson-mapper-asl-1.9.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jaxb-api-2.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jaxb-impl-2.1.13.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jaxen-1.1.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jaxws-api-2.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jaxws-rt-2.1.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jcalendar-1.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jcl-over-slf4j-1.6.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jcommon-1.0.17.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jdom-1.1.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/jfreechart-1.0.14.jar"/>
        <!--
          Skip signed JARs
        -->
        <pack-mac jarfile="${build.dir}/managerapplet/lib/json-schema-validator-0.0.1-SNAPSHOT.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/kunststoff-2.0.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/layer7-uddi-lib-1.1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/log4j-over-slf4j-1.6.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/looks-1.1.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/mail-1.6.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/nekohtml-1.9.15.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/persistence-api-2.0.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/policy-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/javax.servlet-api-3.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/sftp-8.8.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/slf4j-api-1.6.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/slf4j-jdk14-1.6.6.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-aop-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-asm-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-beans-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-context-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-core-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-expression-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-jdbc-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-orm-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-tx-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/spring-web-3.0.7.RELEASE.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/stax-ex-1.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/streambuffer-0.8.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/validation-api-1.0.0.GA.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/whirlycache-1.0.1-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/wsdl4j-1.6.2-l7p3.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xalan-2.7.2-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xalan-serializer-2.7.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xbean-saml-1.1-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xbean-saml-2.0-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xbean-xenc-xmldsig-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xercesImpl-2.11.0-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xml-apis-1.4.01.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xmlbeans-2.5.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xmlpad-3.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xmlpad-res-3.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xmlsec-1.5.7.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xom-1.2.8.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xss4j.00.patch-1.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerapplet/lib/xss4j-1.0.jar"/>

        <fail if="pack-mac.fail">Missing files for pac-mac, see "Nothing to do" messages above.</fail>
    </target>

    <!--
      See if it looks like packaging is required
    -->
    <target name="package.gateway.checkrequired">
        <uptodate property="package.gateway.notrequired">
            <srcfiles dir="." excludes="etc/JAXB_OutputXML/**/*" includes="etc/**/*, modules/*/src/main/java/**/*, modules/gateway/*/src/main/java/**/*, modules/gateway/assertions/*/src/main/java/**/*, modules/*/ivy.xml, modules/*/*/ivy.xml, modules/*/*/*/ivy.xml, modules/*/build.xml, modules/*/*/build.xml, modules/*/*/*/build.xml"/>
            <mapper type="merge" to="${build.dir}/gateway/Gateway.jar"/>
        </uptodate>
        <condition property="compile.forms.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="ssg.only">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="manager.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
        <condition property="package.jars.notrequired">
            <isset property="package.gateway.notrequired"/>
        </condition>
    </target>

    <!--
      Package the SSG if it looks like something changed
    -->
    <target name="package.gateway.ifrequired" depends="package.gateway.checkrequired, package.gateway, package.readversion, pack.manager, package.modules, package.configwiz, package.backuprestore, package.ssgbackup.zip" unless="package.gateway.notrequired">
    </target>

    <!--
      Package the SSG (JAR).
    -->
    <target name="package.gateway" depends="package.jars, package.gateway.work"/>
    <target name="package.gateway.work" unless="package.gateway.notrequired">
        <!-- packaging process controller libs -->
        <mkdir dir="${build.dir}/processcontroller/lib"/>
        <delete>
            <fileset dir="${build.dir}/processcontroller/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/processcontroller/lib">
            <fileset dir="modules/gateway/processcontroller/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/processcontroller/build/jar/layer7-gateway-processcontroller.jar" tofile="${build.dir}/processcontroller/Controller.jar"/>

        <!-- packaging gateway libs -->
        <mkdir dir="${build.dir}/gateway/lib"/>
        <mkdir dir="${build.dir}/gateway/lib/alt"/>
        <delete>
            <fileset dir="${build.dir}/gateway/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/gateway/lib">
            <fileset dir="modules/gateway/server/build/dependency">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/server/build/jar/layer7-gateway-server.jar" tofile="${build.dir}/gateway/Gateway.jar"/>
    </target>

    <target name="package.modules" depends="package.jars, package.modules.work"/>
    <target name="package.modules.work" unless="package.jars.notrequired">
        <ivy:resolve file="modules/gateway/production/ivy.xml" showprogress="false" transitive="false" conf="module,module-client,module-optional" log="quiet" checkIfChanged="false"/>

        <delete dir="${build.dir}/modules"/>
        <mkdir dir="${build.dir}/modules"/>
        <ivy:retrieve conf="module,module-client" pattern="${build.dir}/modules/[artifact]-[revision].[ext]"/>
        
        <delete dir="${build.dir}/modules-optional"/>
        <mkdir dir="${build.dir}/modules-optional"/>
        <ivy:retrieve conf="module-optional" pattern="${build.dir}/modules-optional/[artifact]-[revision].[ext]"/>
    </target>

    <!--
      Package the SSB (JAR)
    -->
    <target name="package.client" unless="ssg.only" depends="package.client.jar"/>
    <target name="package.client.jar" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/client/lib"/>
        <delete>
            <fileset dir="${build.dir}/client/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/client/lib">
            <fileset dir="modules/xmlvpnclient/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/xmlvpnclient/build/jar/layer7-xmlvpnclient.jar" tofile="${build.dir}/client/Client.jar"/>
    </target>

    <!--
      Package the SSM (JAR)
    -->
    <target name="package.manager.jar" depends="package.jars, package.manager.work"/>
    <target name="package.manager.work" unless="manager.notrequired"> 
        <mkdir dir="${build.dir}/manager/lib"/>
        <delete>
            <fileset dir="${build.dir}/manager/lib" includes="layer7-*"/>
        </delete>
        <copy todir="${build.dir}/manager/lib">
            <fileset dir="modules/gateway/console/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <!-- Copy a hmac file for CCJ 2.2.1 -->
        <copy todir="${build.dir}/manager/lib">
            <fileset dir="${src.root}/lib/repository/com.safelogic.cryptocomply">
                <include name="cryptocomply-2.2.1.hmac"/>
            </fileset>
        </copy>
        <mkdir dir="${build.dir}/managerapplet/lib"/>
        <copy todir="${build.dir}/managerapplet/lib">
            <fileset dir="modules/gateway/console-applet/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
		<mkdir dir="${build.dir}/managerwebstart/lib"/>
		<copy todir="${build.dir}/managerwebstart/lib">
            <fileset dir="modules/gateway/console-webstart/build/dependency" excludes="cryptojce-*.jar">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/console/build/jar/layer7-gateway-console.jar" tofile="${build.dir}/manager/Manager.jar"/>
        <copy file="modules/gateway/console-applet/build/jar/layer7-gateway-console-applet.jar" todir="${build.dir}/managerapplet"/>
		<copy file="modules/gateway/console-webstart/build/unsigned/layer7-gateway-console-webstart.jar" todir="${build.dir}/managerwebstart"/>
    </target>

    <target name="package.manager" depends="package.manager.jar" unless="manager.notrequired">
    </target>

    <target name="package.patchverifier" depends="package.modules">
        <mkdir dir="${build.dir}/patchverifier"/>
        <copy todir="${build.dir}/patchverifier">
            <fileset dir="modules/gateway/patchverifier/build/jar">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="package.report.jars" depends="package.client.jar,package.gateway,package.manager.jar"/>

    <target name="package.skunkworks" depends="prepare.base">
        <ivy:buildlist reference="module-build-path-skunkworks" onMissingDescriptor="skip" root="layer7-skunkworks">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-skunkworks" pathid="build-path.text"/>
        <modules buildpathref="module-build-path-skunkworks" target="publish-all-quick"/>
    </target>

    <!--
      Package the RandomXmlGenerator (Always invoked by hand)
    -->
    <target name="package.randomxmlgenerator"
            description="Compile and package the RandomXmlGenerator"
            depends="package.skunkworks">
    </target>

    <!--
      Package GClient (Always invoked by hand)
    -->
    <target name="package.gclient"
            depends="package.skunkworks">
    </target>

    <!--
      Package UDDI tool (Always invoked by hand)
    -->
    <target name="package.udditool"
            depends="package.skunkworks">
    </target>

    <!--
      Package Signer multiple signature utility (Always invoked by hand)
      May need to run "publish-all-modules" first.
      The resulting JAR requires the "lib" directory from the SSM minus any
      layer7-* jars.
    -->
    <target name="package.signer"
            depends="package.skunkworks"> 
        <mkdir dir="build/signer/lib"/>

        <ivy:resolve resolveId="signer.deps" file="modules/gateway/console/ivy.xml" conf="default" showprogress="false" log="quiet" checkIfChanged="false"/>
        <ivy:retrieve resolveId="signer.deps" pattern="build/signer/lib/[artifact]-[revision].[ext]" type="jar"/>

        <delete>
            <fileset dir="build/signer/lib" includes="layer7-*.jar"/>
        </delete>
        <copy todir="build/signer" file="modules/skunkworks/build/Signer.jar"/>

        <tar destfile="build/Signer.tar.gz" compression="gzip">
            <tarfileset dir="build" mode="444" username="root" group="root">
                <include name="signer/**/*"/>
            </tarfileset>
        </tar>
    </target>

    <target name="package.internal" depends="prepare.base">
        <ivy:buildlist reference="module-build-path-internal" onMissingDescriptor="skip" root="layer7-internal">
            <fileset dir="modules" includes="**/build.xml"/>
        </ivy:buildlist>
        <ivy-echo-build-plan refid="module-build-path-internal" pathid="build-path.text"/>
        <modules buildpathref="module-build-path-internal" target="publish"/>
    </target>

    <!--
      Package the LicenseGenerator (Aways invoked by hand)
    -->
    <target name="package.licensegenerator"
            description="Compile and packate the License Generator (also testpackage.licensegenerator)"
            depends="skiptests, package.internal"/>

    <!--
      Package the AuditSignatureChecker (Aways invoked by hand)
    -->
    <target name="package.auditsignaturechecker"
            description="Compile and package the Audit Signature Checker."
            depends="package.internal"/>

    <!--
      Package the command line GenerateCertificate utility (Aways invoked by hand)
    -->
    <target name="package.generatecertificate"
            description="Compile and package the command line GenerateCertificate utility."
            depends="package.internal"/>

    <!--
      Package the command line BatchLicenseGenerator utility (Aways invoked by hand)
    -->
    <target name="package.batchlicensegenerator"
            description="Compile and package the command line BatchLicenseGenerator utility."
            depends="package.internal"/>

    <!--
      Package the command line SkarSigner utility (Aways invoked by hand)
    -->
    <target name="package.skarsigner"
            description="Compile and package the command line SKAR and SMF Signer utility."
            depends="package.internal"/>

    <!--
      Build the windows installers
    -->
    <target name="package.installclients" unless="ssg.only" depends="package.installclient, package.installmanager">
    </target>

    <!--
      Build the SSB windows installer
    -->
    <target name="package.installclient" depends="package.client, package.installclient.work"/>
    <target name="package.installclient.work" depends="package.installclient.work.main, package.installclient.work.nsis"/>
    <target name="package.installclient.work.main" depends="init, package.readversion.unsafe">
        <!-- Copy Client JAR and its lib JARs -->
        <delete dir="${build.installer}/Client-${build.version}*" failonerror="false"/>
        <delete file="${build.installer}/Client-${build.version}*.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Client-${build.version}${build.version.revision.suffix}/lib/assertions"/>
        <copy todir="${build.installer}/Client-${build.version}${build.version.revision.suffix}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.dir}/client/lib">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy todir="${build.installer}/Client-${build.version}${build.version.revision.suffix}/lib/assertions">
            <fileset dir="${build.dir}/modules" includes="*-client-*.aar"/>
        </copy>
        <copy file="${build.dir}/client/Client.jar"
              tofile="${build.installer}/Client-${build.version}${build.version.revision.suffix}/Client.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Client.sh"
              tofile="${build.installer}/Client-${build.version}${build.version.revision.suffix}/Client.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Client-${build.version}${build.version.revision.suffix}/Client.sh" perm="755"/>

        <!-- Config files -->
        <copy file="${src.root}/modules/proxy/src/main/resources/com/l7tech/proxy/resources/logging.properties"
              todir="${build.installer}/Client-${build.version}${build.version.revision.suffix}"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Client-${build.version}${build.version.revision.suffix}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Client-${build.version}${build.version.revision.suffix}/Client.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Client-${build.version}${build.version.revision.suffix}/**/*"/>
                <exclude name="Client-${build.version}${build.version.revision.suffix}/Client.sh"/>
            </tarfileset>
        </tar>
    </target>
    
    <target name="package.installclient.work.nsis" if="makensis.enabled" depends="package.installclient.work.main">
        <!-- Run makensis -->
        <exec executable="/usr/bin/wine"
              dir="${src.installer}/proxy/win32/"
              failonerror="true">
            <arg value="${build.install.compiler}" />
            <arg value="/NOCD"/>
            <arg value="/DJ2RE=${install.jre.version}"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/DPACKAGE_REL=installer\Client-${build.version}${build.version.revision.suffix}"/>
            <arg value="/DOUTPUT_DIR=../../../build/installer"/>
            <arg value="/DMUI_VERSION=${build.version}${build.version.revision.suffix}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="Client.nsi"/>
        </exec>
    </target>

    <!--
      Build the SSM windows installer
      - Copy required JAR files
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
      - Create distribution TAR
    -->
    <target name="package.installmanager" depends="package.manager, package.installmanager.work"/>
    <target name="package.installmanager.work" depends="package.installmanager.work.main, package.installmanager.work.nsis"/>
    <target name="package.installmanager.work.main" depends="package.readversion.unsafe">
        <!-- Copy Manager JAR and its lib JARs -->
        <delete dir="${build.installer}/Manager-${build.version}*" failonerror="false"/>
        <delete file="${build.installer}/Manager-${build.version}*.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/lib"/>
        <copy todir="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.dir}/manager/lib">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="${build.dir}/manager/Manager.jar"
              tofile="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/Manager.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Manager.sh"
              tofile="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/Manager.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/Manager.sh" perm="555"/>

        <!-- Config files -->
        <copy file="${src.root}/modules/gateway/console/src/main/resources/com/l7tech/console/resources/logging.properties"
              todir="${build.installer}/Manager-${build.version}${build.version.revision.suffix}"
              preservelastmodified="true"
              granularity="2000"/>
        <copy file="${src.root}/lib/repository/com.safelogic.cryptocomply/cryptocomply-2.2.1.hmac"
              todir="${build.installer}/Manager-${build.version}${build.version.revision.suffix}/lib"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Manager-${build.version}${build.version.revision.suffix}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Manager-${build.version}${build.version.revision.suffix}/Manager.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Manager-${build.version}${build.version.revision.suffix}/**/*"/>
                <exclude name="Manager-${build.version}${build.version.revision.suffix}/Manager.sh"/>
            </tarfileset>
        </tar>
    </target>
    <target name="package.installmanager.work.nsis" if="makensis.enabled" depends="package.installmanager.work.main">
        <!-- Run makensis -->
        <exec executable="/usr/bin/wine"
              dir="${src.installer}/console/win32/"
              failonerror="true">
            <arg value="${build.install.compiler}" />
            <arg value="/NOCD"/>
            <arg value="/DJ2RE=${install.jre.version}"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/DPACKAGE_REL=installer\Manager-${build.version}${build.version.revision.suffix}"/>
            <arg value="/DOUTPUT_DIR=../../../build/installer"/>
            <arg value="/DMUI_VERSION=${build.version}${build.version.revision.suffix}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="Manager.nsi"/>
        </exec>
    </target>

    <!-- comment out package.installgateway.work.nsis depends item, bug 3703, as Gateway exe not supported post-3.7 -->
    <!-- target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.nsis, package.installgateway.work.rpm"/ -->

    <target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.rpm"/>
    
    <!--
      Build the SSG windows installer
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
    -->
    <target name="package.installgateway.work.nsis" depends="package.readversion.unsafe"  if="makensis.enabled">
        <!-- Update NSI file -->
        <generate-nsi nsiFile="SSG.nsi"
                      nsiPath="server/win32/"
                      propertyPrefix="gateway"
                      libDir="gateway/lib"/>

        <!-- Run makensis -->
        <exec executable="/usr/bin/wine"
              dir="etc/other_os_support/windows/server/win32/"
              failonerror="true">
            <arg value="${build.install.compiler}" />
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="../../../build/etc/SSG.nsi"/>
        </exec>
    </target>

    <target name="package.installgateway.work.rpm.check" if="makerpm.enabled" depends="prepare.base">
        <available property="package.installgateway.work.rpm.sourceavailable" file="${ssg-tarball}"/>
        <available property="package.installgateway.work.rpm.sourceavailable" file="${extensions-tarball}"/>
        <available property="package.installgateway.work.rpm.sourceavailable" file="${processcontroller-tarball}"/>
        <available property="package.installgateway.work.rpm.sourceavailable" file="${webadmin-tarball}"/>
        <available property="package.installgateway.work.rpm.appliance.sourceavailable" file="${appliance-tarball}"/>
        <condition property="package.installgateway.work.rpm.x86_64.appliance.required">
          <and>
            <isset property="install.jdk64.tar.gz"/>
            <available file="${install.jdk64.tar.gz}"/>
            <isset property="package.installgateway.work.rpm.appliance.sourceavailable"/>
          </and>
        </condition>
    </target>

    <!--
      Set the release for the build, by default this is the date with "svn" prepended.

      Other (optional) additions could be:
        - .rc1 (release candidate)
        - .m1  (milestone)

      This gets added after any existing release number in the spec file (e.g 0.1.svn20060201)
    -->
    <target name="package.checkrelease" unless="ssg.install.official">
        <property name="build.release" value=".svn${DSTAMP}"/>
    </target>

    <!--
      Create the SSG RPM (Core)
    -->
    <target name="package.installgateway.work.rpm.core" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <echo level="info">Using source TGZs: ${ssg-tarball}, ${webadmin-tarball}, ${extensions-tarball}, ${processcontroller-tarball}</echo>
        <copy file="${ssg-tarball}" tofile="${build.rpm}/SOURCES/ssg-core.tar.gz"/>
        <copy file="${extensions-tarball}" tofile="${build.rpm}/SOURCES/ssg-extensions.tar.gz"/>
        <copy file="${processcontroller-tarball}" tofile="${build.rpm}/SOURCES/ssg-processcontroller.tar.gz"/>
        <copy file="${webadmin-tarball}" tofile="${build.rpm}/SOURCES/ssg-webadmin.tar.gz"/>
	    <copy file="etc/ssg.spec" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^[a-zA-Z &quot;]{0,80}Layer 7 SecureSpan\(tm\) Gateway v)[0-9\._\-a-z]{1,10}" replace="${build.version}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <!-- Default "everything" RPM. -->
        <rpm specFile="ssg.spec" topDir="${build.rpm}" command="-bb --target noarch" failOnError="true"/>
    </target>

    <target name="package.installgateway.work.rpm.appliance" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.appliance.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.appliance.rpmspec" value="etc/appliance/ssg-appliance.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.appliance.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${appliance-tarball}</echo>
        <copy file="${appliance-tarball}" tofile="${build.rpm}/SOURCES/ssg-appliance.tar.gz"/>
        <copy file="${package.installgateway.work.appliance.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>

    <target name="package.installgateway.work.rpm.stig" depends="init, package.readversion, package.checkrelease" if="makerpm.enabled">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Prepare the source tarball -->
        <mkdir dir="${build.rpm}/SOURCES/temp"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg/etc"/>
        <mkdir dir="${build.rpm}/SOURCES/temp/ssg/bin"/>
        <copy file="etc/stig/harden.sh" todir="${build.rpm}/SOURCES/temp/ssg/bin"/>
        <tar destfile="${build.rpm}/SOURCES/ssg-security.tar.gz" basedir="${build.rpm}/SOURCES/temp" compression="gzip"/>
        <delete dir="${build.rpm}/SOURCES/temp"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.stig.rpmspec" value="etc/stig/ssg-security.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.stig.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${build.rpm}/SOURCES/ssg-security.tar.gz</echo>
        <copy file="${package.installgateway.work.stig.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.rpmversion}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: )[0-9]{1,10}" replace="${build.version.revision}${build.release}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssg-security.spec" topDir="${build.rpm}" command="-bb --target noarch" failOnError="true"/>
    </target>

    <target name="securityrpm" depends="package.installgateway.work.rpm.stig">
        <move todir="${dist.dir}" flatten="true">
            <fileset dir="${build.rpm}/RPMS">
                <include name="*/*.rpm"/>
            </fileset>
        </move>
    </target>

    <!--
      Create the SSG RPM (x86_64)
    -->
    <target name="package.installgateway.work.rpm.appliance.x86_64" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.x86_64.appliance.required">
        <echo level="info">Using source JDK: ${install.jdk64.tar.gz}</echo>
        <copy file="${install.jdk64.tar.gz}" tofile="${build.rpm}/SOURCES/jdk.tar.gz" overwrite="true"/>
        <copy file="etc/appliance/custom-find-requires.sh" todir="${build.rpm}/SOURCES" overwrite="true"/>
        <chmod file="${build.rpm}/SOURCES/custom-find-requires.sh" perm="755"/>
        <rpm specFile="ssg-appliance.spec" topDir="${build.rpm}" command="-bb --target x86_64" failOnError="true"/>
    </target>

    <!--
      Create the SSG RPM
    -->
    <target name="package.installgateway.work.rpm" depends="package.installgateway.work.rpm.core, package.installgateway.work.rpm.appliance, package.installgateway.work.rpm.appliance.x86_64" if="makerpm.enabled">
        <echo level="info">RPM build completed.</echo>
    </target>

    <!--
      Create the SSG Docker image
    -->
    <target name="docker" depends="package.installgateway.work.rpm.core, package.installgateway.work.rpm.appliance.x86_64" if="makedocker.enabled">
       <echo level="info">Building Docker image</echo>
       <mkdir dir="${build.rpm}/docker"/>
       <copy file="etc/docker/Dockerfile" todir="${build.rpm}/docker"/>
       <copy file="etc/docker/entryPoint.sh" todir="${build.rpm}/docker"/>

       <copy todir="${build.rpm}/docker" verbose="true">
          <fileset dir="${dist.dir}">
             <include name="**/ssg-*.noarch.rpm"/>
             <include name="**/ssg-appliance*.x86_64.rpm"/>
          </fileset>
       </copy>

       <!-- Run docker build -->
       <exec executable="docker"
          dir="${build.rpm}/docker/"
          failonerror="true">
          <arg value="build"/>
          <arg value="--tag=&quot;${user.name}/ssg:${build.rpmversion}-${build.version.revision}${build.release}&quot;"/>
          <arg value="."/>
       </exec>
    </target>

    <target name="clean.ssgbackup.zip" description="Clean the ${build.dir}/gatewayconfig/SSGBackup.zip file">
       <delete file="${build.dir}/gatewayconfig/SSGBackup.zip" />        
    </target>

    <!--
        Create a zip file self containing the gateway config module with all of it's dependencies
    -->
    <target name="package.ssgbackup.zip" unless="ssg.only" depends="clean.ssgbackup.zip, package.jars"
            description="Create the standalone zip file SSGBackup.zip for backup">

        <!--If the SSGbackup.zip already exists from a previous run, then delete it-->
        <!--<delete file="${build.dir}/gatewayconfig/SSGBackup.zip" />-->
        
        <mkdir dir="${build.dir}/gatewayconfig"/>
        <mkdir dir="${build.dir}/gatewayconfig/lib"/>

        <copy todir="${build.dir}/gatewayconfig/lib">
            <fileset dir="modules/gateway/config/build/dependency">
                <include name="*.jar" />
            </fileset>
        </copy>

        <ivy:retrieve inline="true" organisation="com.l7tech" module="layer7-gateway-config" conf="default" pattern="${build.dir}/gatewayconfig/lib/[artifact]-[revision].[ext]"/>

        <copy todir="${build.dir}/gatewayconfig">
            <fileset dir="${src.root}/etc">
                <include name="ssgbackup_noninstall.sh" />
                <include name="backuputilitylogging_noninstall.properties"/>
            </fileset>
        </copy>

        <move file="${build.dir}/gatewayconfig/ssgbackup_noninstall.sh" tofile="${build.dir}/gatewayconfig/ssgbackup.sh" />
        <move file="${build.dir}/gatewayconfig/backuputilitylogging_noninstall.properties" tofile="${build.dir}/gatewayconfig/backuputilitylogging.properties" />

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-gateway-config" showprogress="false" conf="default" log="quiet" checkIfChanged="false"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-gateway-config" revision="latest.integration" property="module.gateway.config.version"/>

        <!--Jar file SSGBackupOnlyUtility.jar is used to backup a pre 5.1 SSG. Pre 5.1 the backup utilitiy did not backup
        enough information to do a complete restore. It is used by the upgrader to completely backup a
        pre 5.1 installation before installing RHEL5 and 5.1 or greater. Following the upgrade all SSG data can be
        restored using the image created.-->
        <jar jarfile="${build.dir}/gatewayconfig/SSGBackupOnlyUtility.jar">
            <manifest>
                <attribute name="Class-Path" value="lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="Main-Class" value="com.l7tech.gateway.config.backuprestore.BackupRestoreLauncher"/>
            </manifest>
        </jar>

        <zip destfile="${build.dir}/gatewayconfig/SSGBackup.zip" basedir="${build.dir}/gatewayconfig" />

        <!--Only leave the SSGBackup.zip artifact, remove everything else which was used to create it-->
        <delete dir="${build.dir}/gatewayconfig/lib">
            <include name="*.jar" />
        </delete>
        <delete dir="${build.dir}/gatewayconfig/lib" />
        <delete dir="${build.dir}/gatewayconfig" >
            <exclude name="SSGBackup.zip" />
        </delete>

    </target>

    <!-- Package the ssg backuprestore utility -->
    <target name="package.backuprestore" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/backup"/>
        <mkdir dir="${build.dir}/backup/lib"/>
        <mkdir dir="${build.dir}/backup/cfg"/>

        <copy todir="${build.dir}/backup">
            <fileset dir="${src.root}/etc">
                <include name="ssgbackup.sh"/>
                <include name="ssgrestore.sh"/>
                <include name="ssgmigrate.sh"/>
                <include name="backupgatewaylogging.properties"/>
                <include name="backuputilitylogging.properties"/>
                <include name="restore_logging.properties"/>
            </fileset>
        </copy>

        <chmod file="${build.dir}/backup/ssgbackup.sh" perm="755"/>
        <chmod file="${build.dir}/backup/ssgrestore.sh" perm="755"/>
        <chmod file="${build.dir}/backup/ssgmigrate.sh" perm="755"/>

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-gateway-config" showprogress="false" conf="default" log="quiet" checkIfChanged="false"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-utility" revision="latest.integration" property="module.utility.version"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-gateway-config" revision="latest.integration" property="module.gateway.config.version"/>

        <jar jarfile="${build.dir}/backup/SSGBackupUtility.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.backuprestore.BackupRestoreLauncher"/>
            </manifest>
        </jar>

        <!-- TODO: Did this actually copy anything?-->
        <copy todir="${build.dir}/backup/lib">
            <fileset dir="modules/utility/build/jar">
                <include name="layer7-utility-*.jar"/>
            </fileset>
        </copy>
    </target>

    <!--
      Package all configuration wizards
    -->
    <target name="package.configwiz.all" depends="package.configwiz, package.systemconfigwiz, package.scaconfig"/>

    <!--
      Package the main configuration wizard (JAR)
    -->
    <target name="package.configwiz" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/configwizard/lib"/>
        <mkdir dir="${build.dir}/configwizard/bin"/>

        <copy todir="${build.dir}/configwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssgconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}/configwizard/bin">
            <fileset dir="${src.root}/etc">
                <include name="ssgconfig-headless"/>
            </fileset>
        </copy>

        <ivy:resolve inline="true" organisation="com.l7tech" module="layer7-gateway-config" showprogress="false" conf="default" log="quiet" checkIfChanged="false"/>
        <ivy:retrieve inline="true" organisation="com.l7tech" module="layer7-gateway-config" conf="default" pattern="${build.dir}/configwizard/lib/[artifact]-[revision].[ext]"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-utility" revision="latest.integration" property="module.utility.version"/>
        <ivy:findrevision organisation="com.l7tech" module="layer7-gateway-config" revision="latest.integration" property="module.gateway.config.version"/>

        <jar jarfile="${build.dir}/configwizard/ConfigWizard.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.client.Main"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigHeadless.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.client.HeadlessConfig"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigMasterPassphrase.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.MasterPassphraseChanger"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigClusterPassphrase.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.ClusterPassphraseChanger"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigClusterAddress.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.ClusterAddressConfig"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigKeystoreFileProperty.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.KeystoreFilePropertyManager"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/ConfigProcessController.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.client.beans.trust.TrustInterviewer"/>
            </manifest>
        </jar>

        <jar jarfile="${build.dir}/configwizard/DatabaseUpgrader.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.utility.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.DatabaseUpgrader"/>
            </manifest>
        </jar>


        <jar jarfile="${build.dir}/configwizard/PasswordReset.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="../runtime/lib/layer7-utility-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Jar" value="../runtime/lib/layer7-gateway-config-${module.gateway.config.version}.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.gateway.config.manager.AccountReset"/>
            </manifest>
        </jar>

    </target>

    <!--
      Package the system configuration wizard (JAR)
    -->
    <target name="package.systemconfigwiz" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/sysconfigwizard"/>
        <mkdir dir="${build.dir}/sysconfigwizard/lib"/>
        <mkdir dir="${build.dir}/sysconfigwizard/configfiles"/>

        <copy todir="${build.dir}/sysconfigwizard/lib">
            <fileset dir="modules/utility/build/jar">
                <include name="layer7-utility*.jar"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc/appliance">
                <include name="ssg_sys_config.pl"/>
                <include name="systemconfig.sh"/>
                <include name="authconfig/radius_ldap_setup.sh"/>
            </fileset>
        </copy>

         <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc/">
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <jar jarfile="${build.dir}/sysconfigwizard/SystemConfigWizard.jar">
            <manifest>
                <attribute name="Main-Class" value="com.l7tech.util.ApplicationLauncher"/>
                <attribute name="Class-Path" value="lib/layer7-utility.jar"/>
                <attribute name="X-Layer7-Jar" value="../../Gateway/runtime/Gateway.jar"/>
                <attribute name="X-Layer7-Main-Class" value="com.l7tech.server.config.systemconfig.SysConfigWizardLauncher"/>
            </manifest>
        </jar>
    </target>

    <!--
      Package the SCA config tool (JAR)
    -->
    <target name="package.scaconfig" unless="ssg.only" depends="package.jars">
        <mkdir dir="${build.dir}/scaconfig"/>
        <mkdir dir="${build.dir}/scaconfig/lib"/>


        <copy todir="${build.dir}/scaconfig/lib">
            <fileset dir="modules/gateway/sca-config/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/sca-config/build/jar/layer7-gateway-sca-config.jar" tofile="${build.dir}/scaconfig/ConfigScaHsm.jar"/>

        <copy todir="${build.dir}/scaconfig">
            <fileset dir="${src.root}/etc/appliance/crypto">
                <include name="scahsmconfig.sh"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/scaconfig">
            <fileset dir="${src.root}/etc/">
                <include name="configlogging.properties"/>
            </fileset>
        </copy>
    </target>

    <!--
      Package the Layer 7 API (Custom Assertion API)
    -->
    <target name="package.api" depends="package.jars">
        <!--
            Sign Layer7 API jar
        -->
        <copy file="modules/gateway/api/build/jar/layer7-api.jar" tofile="${build.dir}/layer7-api-${build.api.version}.jar"/>

        <mkdir dir="${build.dir}/docs"/>

        <!--
          Accompanying javadoc for layer7-api
        -->
        <javadoc
                destdir="${build.dir}/docs/layer7-api"
                version="true"
                author="false"
                use="true"
                windowtitle="Layer 7 External API">

             <!--links to j2se & j2ee javadocs provided so they can be linked to from within the layer7-api javadoc -->
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://java.sun.com/javaee/5/docs/api/"/>

            <fileset dir="modules/gateway/api/src/main/java">
                <!--
                  Leave some classes undocumented; they appear in the api jar,
                  but aren't supposed to be used by 3rd party devlopers
                -->
                <exclude name="com/l7tech/policy/assertion/ext/CustomAuditor.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/Category.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
            </fileset>
        </javadoc>
    </target>

    <!--
      Package the Layer 7 Gateway Management API
    -->
    <target name="package.management.api" depends="package.jars">
        <mkdir dir="${build.dir}/layer7-gateway-api/docs"/>
        <mkdir dir="${build.dir}/layer7-gateway-api/lib"/>

        <!--
          API Jar and dependencies  
        -->
        <copy todir="${build.dir}/layer7-gateway-api/lib">
            <fileset dir="modules/gateway/gateway-api/build/dependency">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="modules/gateway/gateway-api/build/jar/layer7-gateway-api.jar" todir="${build.dir}/layer7-gateway-api"/>


        <!--
          Accompanying javadoc for layer7-gateway-api
        -->
        <javadoc
                destdir="${build.dir}/docs/layer7-gateway-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Technologies - Gateway Management API v1.1"
                bottom="&lt;font size=&quot;-1&quot;&gt;&lt;i&gt;Copyright &amp;copy; 2011, &lt;a href=&quot;http://www.layer7tech.com/&quot; target=_top&gt;Layer 7 Technologies&lt;/a&gt;.&lt;/i&gt;&lt;/font&gt;">

            <!--links to j2se & j2ee javadocs provided so they can be linked to from within the layer7-api javadoc -->
            <link href="http://download.oracle.com/javase/6/docs/api/"/>
            <link href="http://download.oracle.com/javaee/6/api/"/>

            <fileset dir="modules/gateway/gateway-api/src/main/java">
                <include name="com/l7tech/gateway/api/*.java"/>
            </fileset>

            <!-- There are annotations that need to be in the classpath -->
            <classpath>
                <pathelement location="modules/gateway/gateway-api/build/classes"/>
            </classpath>
        </javadoc>
    </target>

    <target name="bridgeapi.javadoc" depends="init">
        <mkdir dir="${build.dir}/docs"/>
        <javadoc
                destdir="${build.dir}/docs/bridge-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Technologies API Specification"
                doctitle="Layer 7 Technologies API Specification"
                header="&lt;b&gt;Layer 7 Technologies&lt;/b&gt;"
                bottom="&lt;font size=-1&gt;Copyright (c) 2007, Layer 7 Technologies&lt;/font&gt;"
                 >

            <fileset dir="${src.root}/modules/proxy/src/main/java" defaultexcludes="yes">
                <patternset refid="bridgeapi.sources"/>
            </fileset>

            <!--<classpath refid="project.classpath"/>-->
        </javadoc>
    </target>

    <target name="managerapi.javadoc" depends="init">
        <delete dir="${build.dir}/docs/manager-api"/>
        <mkdir dir="${build.dir}/docs/manager-api"/>
        <javadoc
                destdir="${build.dir}/docs/manager-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Manager API"
                maxmemory="1024m"
                useexternalfile="true">

            <fileset dir="${src.root}/modules/gateway/console/src/main/java" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>

            <fileset dir="${src.root}/modules/gateway/common/src/main/java" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>

            <fileset dir="${src.root}/modules/identity/src/main/java" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>

            <fileset dir="${src.root}/modules/policy/src/main/java" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>

            <classpath refid="project.classpath"/>
        </javadoc>
    </target>

    <target name="package.managerapi" depends="package.manager.jar,managerapi.javadoc" description="Package the Manager API for distribution.">
        <zip destfile="${build.dir}/ManagerAPI-${build.version}${build.version.revision.suffix}.zip">
            <zipfileset dir="${src.root}/modules/skunkworks/src/main/resources/com/l7tech/example/manager/apidemo" includes="readme.txt"/>
            <zipfileset dir="${src.root}/modules/skunkworks/src/main/java" includes="com/l7tech/example/manager/apidemo/**/*.java" prefix="sample/src"/>
            <zipfileset dir="${build.dir}" includes="Manager.jar" prefix="lib"/>
            <zipfileset dir="${build.dir}/manager/lib" casesensitive="yes" prefix="lib"/>
            <zipfileset dir="${build.dir}/docs/manager-api" prefix="javadoc"/>
        </zip>
    </target>

    <target name="package.clientapi" depends="package.client.jar,bridgeapi.javadoc" description="Package the Client API for distribution.">
        <!-- package bridge api for distribution -->
        <zip destfile="${build.dir}/BridgeAPI-${build.version}${build.version.revision.suffix}.zip" basedir="${build.dir}/docs" includes="bridge-api/**" />
    </target>

    <target name="detect.custom.assertion.sample" depends="prepare">
        <available property="custom.assertion.sample.present" file="${src.root}/CustomAssertionSample" type="dir"/>
    </target>

    <target name="zip.api.customassertion" depends="package.api,detect.custom.assertion.sample" if="custom.assertion.sample.present">
        <!-- package layer7 api for distribution -->
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}">
          <fileset dir="${src.root}/CustomAssertionSample/">
            <include name="*.txt"/>
            <include name="*.pdf"/>
          </fileset>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/javadoc"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/javadoc/html"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/javadoc/html">
          <fileset dir="${build.dir}/docs/layer7-api"/>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/lib"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/lib">
          <fileset dir="${src.root}/CustomAssertionSample/lib"/>
        </copy>
        
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/tools"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/tools">
          <fileset dir="${src.root}/CustomAssertionSample/tools"/>
        </copy>
        
        <copy file="${src.root}/CustomAssertionSample/build.sh" todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}"/>
        <copy file="${src.root}/CustomAssertionSample/build.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}"/>
        <copy file="${src.root}/CustomAssertionSample/build-common.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}"/>
        
        <!-- Traffic Logger Sample -->
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/TrafficLoggerSample"/>
        <copy file="${src.root}/CustomAssertionSample/TrafficLoggerSample/build.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/TrafficLoggerSample"/>
        
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/TrafficLoggerSample/src"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/TrafficLoggerSample/src">
          <fileset dir="${src.root}/CustomAssertionSample/TrafficLoggerSample/src"/>
        </copy>
        
        <!-- Salesforce Sample -->
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/SalesforceSample"/>
        <copy file="${src.root}/CustomAssertionSample/SalesforceSample/build.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/SalesforceSample"/>
        
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/SalesforceSample/src"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}${build.version.revision.suffix}/SalesforceSample/src">
          <fileset dir="${src.root}/CustomAssertionSample/SalesforceSample/src"/>
        </copy>
        
        <zip destfile="${build.dir}/CustomAssertion_dev_kit-${build.version}${build.version.revision.suffix}.zip">
            <zipfileset dir="${build.dir}" filemode="755">
                <include name="CustomAssertionAPI-${build.version}${build.version.revision.suffix}/**/*.sh"/>
            </zipfileset>
            <zipfileset dir="${build.dir}">
                <include name="CustomAssertionAPI-${build.version}${build.version.revision.suffix}/**/*"/>
                <exclude name="CustomAssertionAPI-${build.version}${build.version.revision.suffix}/**/*.sh"/>
            </zipfileset>
        </zip>
    </target>

    <!--
      Package gateway management API Jar / Javadoc for distribution
    -->
    <target name="zip.api.gatewaymanagement" depends="package.management.api">
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/docs/api"/>
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/docs/schema"/>
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/api/"/>
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/client/"/>
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/ws/"/>
        <mkdir dir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/resources/"/>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/">
            <fileset dir="${build.dir}/layer7-gateway-api"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/docs/api">
          <fileset dir="${build.dir}/docs/layer7-gateway-api"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/docs/schema">
          <fileset dir="${src.root}/modules/gateway/gateway-api/build/etc/schema" includes="*.xsd"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/api">
          <fileset dir="${src.root}/modules/gateway/gateway-api/src/test/java" includes="com/l7tech/gateway/api/examples/*.java"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/client">
          <fileset dir="${src.root}/etc/gatewaymanagement/examples/client"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/ws">
          <fileset dir="${src.root}/etc/gatewaymanagement/examples/ws" includes="*.xml"/>
        </copy>

        <copy todir="${build.dir}/GatewayManagementAPI-${build.version}${build.version.revision.suffix}/examples/resources">
          <fileset dir="${src.root}/etc/gatewaymanagement/examples/resources" includes="*.xml"/>
        </copy>

        <zip destfile="${build.dir}/GatewayManagement_dev_kit-${build.version}${build.version.revision.suffix}.zip">
            <zipfileset dir="${build.dir}">
                <include name="GatewayManagementAPI-${build.version}${build.version.revision.suffix}/**/*"/>
            </zipfileset>
        </zip>
    </target>

    <!--
      Package the gateway management client for distribution
    -->
    <target name="package.gatewaymanagementclient" depends="package.jars">
        <mkdir dir="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}/lib"/>

        <copy file="etc/gatewaymanagement/gatewayManagementClient.sh"
              tofile="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}/gatewayManagementClient.sh"/>

        <copy file="etc/jdk_utils.sh"
              tofile="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}/jdk_utils.sh"/>

        <copy file="modules/gateway/gateway-management-client/build/jar/layer7-gateway-management-client.jar"
              tofile="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}/GatewayManagementClient.jar"/>

        <copy todir="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}/lib">
            <fileset dir="modules/gateway/gateway-management-client/build/dependency">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <zip destfile="${build.dir}/GatewayManagementClient-${build.version}${build.version.revision.suffix}.zip">
            <zipfileset dir="${build.dir}" filemode="555">
                <include name="GatewayManagementClient-${build.version}${build.version.revision.suffix}/gatewayManagementClient.sh"/>
            </zipfileset>
            <zipfileset dir="${build.dir}" filemode="555">
                <include name="GatewayManagementClient-${build.version}${build.version.revision.suffix}/jdk_utils.sh"/>
            </zipfileset>
            <zipfileset dir="${build.dir}" filemode="444">
                <include name="GatewayManagementClient-${build.version}${build.version.revision.suffix}/**/*"/>
                <exclude name="GatewayManagementClient-${build.version}${build.version.revision.suffix}/gatewayManagementClient.sh"/>
                <exclude name="GatewayManagementClient-${build.version}${build.version.revision.suffix}/jdk_utils.sh"/>
            </zipfileset>
        </zip>
    </target>

    <target name="zip.api" depends="package.clientapi,package.managerapi,zip.api.customassertion,zip.api.gatewaymanagement"/>

    <!--
      Core prepare target
    -->
    <target name="prepare.base" depends="init">
        <!-- time stamp -->
        <tstamp>
            <format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <mkdir dir="${javadoc.home}"/>

        <!-- set up build properties -->
        <property file="build.number" prefix="install"/>
        <property name="build.host" value="${hostname}"/>
        <property name="build.user" value="${user.name}"/>
        <property name="build.product" value="Layer 7 SecureSpan Suite"/>
        <property name="build.vendor" value="Layer 7 Technologies"/>
        <property name="build.vendor.id" value="com.l7tech"/>
        <echoproperties destfile="${build.etc}/filter.properties" regex="^(build|install)\..*"/>
    </target>

    <!--
      Create the directory structure, copy the resources, libs and
      update version tokens
    -->
    <target name="prepare"
            depends="prepare.base">
    </target>

    <!--
      Set database properties for configured DB
    -->
    <target name="db.properties"
            depends="db.properties.mysql"/>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <set-db-properties
                driver="${my.database.driver}"
                url="${my.database.url}"
                user="${my.database.user}"
                password="${my.database.password}"
                pingstmt="${my.database.pingstmt}"/>
    </target>

    <!--
        Hibernate properties token replacement target.
        This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties.dev" depends="db.properties" if="dev.build" unless="no.dev.build">
        <echo level="info">
            database.driver   = '${database.driver}'
            database.url      = '${database.url}'
            database.user     = '${database.user}'
            database.pingstmt = '${database.pingstmt}'
        </echo>
    </target>

    <!--
      Official build
    -->
    <target name="ssg-install-full"
            description="Offical build target [optionally use with skip-obfuscate, makerpm and makensis]"
            depends="ssg-install-full-init,INTERNAL-ssg-install-init-pre,package,package.extras,distribute">
    </target>

    <!--
      Initialization for a build.
    -->
    <target name="init-dist">
        <property name="no.dev.build" value="true"/>
    </target>

    <!--
      Unofficial build
    -->
    <target name="dist"
            description="Build distributable software packages without unit tests [optionally use with obfuscate]"
            depends="init-dist, makensis, makerpm, pack200, skiptests, clean, package, package.extras, distribute">
    </target>

    <target name="distribute" depends="prepare">
        <echo level="info">Moving packaged software to distribution directory.</echo>

        <echo level="info">Creating: ${dist.dir}</echo>
        <mkdir dir="${dist.dir}"/>

        <move todir="${dist.dir}" flatten="true" verbose="true">
            <fileset dir="${build.rpm}/RPMS">
                <include name="*/*.rpm"/>
            </fileset>
            <fileset dir="${build.installer}">
                <include name="*Installer.exe"/>
                <include name="Manager-*.tar.gz"/>
                <include name="Client-*.tar.gz"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="CustomAssertion_dev_kit-*.zip"/>
                <include name="GatewayManagement_dev_kit-*.zip"/>
                <include name="GatewayManagementClient*.zip"/>
                <include name="BridgeAPI-*.zip"/>
                <include name="ManagerAPI-*.zip"/>
            </fileset>
            <fileset dir="${build.dir}/modules-optional">
                <include name="*.aar"/>
            </fileset>
            <fileset dir="${build.dir}/gatewayconfig">
                <include name="SSGBackup.zip" />
            </fileset>
        </move>
        <copy file="etc/assets/SecureSpan_ActiveSOA.jar" tofile="${dist.dir}/SecureSpan_ActiveSOA-${build.version}.jar" verbose="true"/>
        <mkdir dir="${dist.dir}/components"/>
        <move todir="${dist.dir}/components" flatten="true" verbose="true">
            <fileset dir="${build.dir}/components">
                <include name="*.tar.gz"/>
            </fileset>
        </move>
    </target>

    <target name="tar"
            description="Build TARs for use in Solaris builds"
            depends="ssg-install-full-init,INTERNAL-ssg-install,package.solaris.tar"/>

    <!--
      Set the standard options for an official build.
    -->
    <target name="ssg-install-full-init">
        <property name="ssg.install.enabled" value="true"/>
        <property name="ssg.install.official" value="true"/>
        <property name="makerpm" value="true"/>
        <property name="makensis" value="true"/>
        <property name="module.obfuscate" value="true"/>
        <property name="module.official.build" value="true"/>
        <property name="pack200" value="true"/>
        <property name="module.pack200" value="true"/>
    </target>

    <!--
      Initialize full install (before anything is done, ie. packaging)
    -->
    <target name="INTERNAL-ssg-install-init-pre" if="ssg.install.enabled" depends="prepare.base">
        <fail unless="makerpm.available">RPM packaging is not available, cannot perform official build.</fail>

        <echo level="info" message="Using build number ${install.build.number}"/>
    </target>

    <target name="obfuscate" description="Enable obfuscated build (when packaging)">
        <echo level="info">Enabling obfuscation for build.</echo>
        <property name="module.obfuscate" value="true"/>
    </target>

    <target name="skip-obfuscate" description="Disable obfuscated build (when packaging)">
        <echo level="info">Disabling obfuscation for build.</echo>
        <property name="module.obfuscate.disabled" value="false"/>
    </target>

    <target name="pack200" description="Enable pack200 compression (when packaging)">
        <echo level="info">Enabling pack200 for build.</echo>
        <property name="pack200" value="true"/>
        <property name="module.pack200" value="true"/>
    </target>

    <!--
      Initialize full install
    -->
    <target name="INTERNAL-ssg-install-init" depends="package.readversion, INTERNAL-ssg-install-init-pre, package.gateway.all, init" if="ssg.install.enabled">
        <fail unless="install.build.number"
              message="Set the install.build.number property before running this target!"/>

        <condition property="jdk.exists">
            <available file="${install.jdk64.tar.gz}"/>
        </condition>

        <fail unless="jdk.exists" message="Couldn't find ${install.jdk64.tar.gz}! Check your install.properties file!"/>
    </target>

    <!--
      Full install main work
    -->
    <target name="INTERNAL-ssg-install-main" if="ssg.install.enabled" depends="init-install-macros">
        <install-ssg-appliance/>

        <install-ssg-processcontroller/>

        <install-ssg-software/>
    </target>

    <target name="init-install-macros">
        <!--
          Macro to install SSG appliance files under the given directory
        -->
        <macrodef name="install-ssg-appliance">
            <attribute name="dir" default="${install.src.app}"/>
            <sequential>
                <echo>Making Appliance directories...</echo>

                <!-- Appliance directories -->
                <mkdir dir="@{dir}/etc/init.d"/>
                <mkdir dir="@{dir}/etc/profile.d"/>
                <mkdir dir="@{dir}/etc/snmp"/>
                <mkdir dir="@{dir}/etc/sysconfig"/>
                <mkdir dir="@{dir}/etc/skel_ssg"/>
                <mkdir dir="@{dir}/${install.src.app.bin}" />
                <mkdir dir="@{dir}/${install.src.app.etc}" />
                <mkdir dir="@{dir}/${install.src.app.firewall}" />
                <mkdir dir="@{dir}/${install.src.app.firewall6}" />
                <mkdir dir="@{dir}/${install.src.app.backuprestore.cfg}"/>
                <mkdir dir="@{dir}/${install.src.app.libexec}"/>
                <mkdir dir="@{dir}/${install.src.app.ssgconfig}"/>
                <mkdir dir="@{dir}/${install.src.app.ssgprofile}"/>
                <mkdir dir="@{dir}/${install.src.app.configdir}"/>
                <mkdir dir="@{dir}/${install.src.app.configlogs}"/>                
                <!--<mkdir dir="@{dir}/${install.src.app.scaconfig}"/>-->

                <!--copy the system config wizard -->
                <copy todir="@{dir}/${install.src.app.configdir}">
                    <fileset dir="${build.dir}/sysconfigwizard">
                        <include name="**/*"/>
                    </fileset>
                </copy>

                <!--copy the sca config tool -->
                <copy todir="@{dir}/${install.src.app.configdir}">
                    <fileset dir="${build.dir}/scaconfig">
                        <include name="**/*"/>
                    </fileset>
                </copy>

                <copy file="${src.root}/etc/db/mysql/my.cnf" tofile="@{dir}/etc/my.cnf.ssg"/>
                <copy file="${src.root}/etc/processcontroller/sspc-initd" tofile="@{dir}/etc/init.d/ssg"/>
                <copy file="${src.root}/etc/appliance/sysconfigscript-initd" tofile="@{dir}/etc/init.d/ssgsysconfig"/>
                <copy file="${src.root}/etc/appliance/ssg-dbstatus-initd" tofile="@{dir}/etc/init.d/ssg-dbstatus"/>
                <copy file="${src.root}/etc/appliance/tcp_tune.sh" tofile="@{dir}/etc/init.d/tcp_tune"/>
                <copy file="${src.root}/etc/appliance/ssgenv.sh" tofile="@{dir}/etc/profile.d/ssgenv.sh"/>
                <copy file="${src.root}/etc/appliance/snmpd.conf" tofile="@{dir}/etc/snmp/snmpd.conf_example"/>
                <copy file="${src.root}/etc/appliance/iptables" tofile="@{dir}/etc/sysconfig/iptables"/>
                <copy file="${src.root}/etc/appliance/ip6tables" tofile="@{dir}/etc/sysconfig/ip6tables"/>
                <copy file="${src.root}/etc/appliance/configuser_profile" tofile="@{dir}/${install.src.app.ssgconfig}/.bash_profile"/>
                <copy file="${src.root}/etc/appliance/configuser_profile" tofile="@{dir}/etc/skel_ssg/.bash_profile"/>

                <copy todir="@{dir}/${install.src.app.libexec}">
                    <fileset dir="${src.root}/etc/appliance">
                        <include name="envclean"/>
                        <include name="scadiag_wrapper"/>
                        <include name="scakiod_load_wrapper"/>
                        <include name="load_keydata"/>
                        <include name="save_keydata"/>
                        <include name="wipe_keydata"/>
                        <include name="zerohsm.sh"/>
                        <include name="masterkey-manage.pl"/>
                        <include name="update_firewall"/>
                        <include name="gateway_control"/>
                        <include name="hardware-stats.pl"/>
                        <include name="ssgconfig_launch"/>
                        <include name="systeminfo.sh"/>
                        <include name="patch_launcher"/>
                        <include name="patchcli_launch"/>
                        <include name="viewlog"/>
                        <include name="ssg-viewlog.sh"/>
                    </fileset>
                    <fileset dir="${src.root}/etc/appliance/crypto">
                        <include name="ncipherconfig.pl"/>
                    </fileset>
                </copy>
                <copy file="${build.dir}/patchverifier/layer7-gateway-patchverifier.jar" tofile="@{dir}/${install.src.app.libexec}/patchVerifier.jar"/>

                <copy todir="@{dir}/${install.src.app.bin}">
                    <fileset dir="${src.root}/etc/appliance">
                        <include name="resetAdmin.sh"/>
                        <include name="passServiceUsage.sh"/>
                        <include name="ssg_appliance_startup_config.sh"/>
                        <include name="firewall_control.sh"/>
                        <include name="upgrade-appliance.sh"/>
                    </fileset>
                    <fileset dir="${src.root}/etc/appliance/db/mysql">
                        <include name="add_slave_user.sh"/>
                        <include name="create_slave.sh"/>
                        <include name="restart_replication.sh"/>

                    </fileset>

                </copy>

                <copy todir="@{dir}/${install.src.app.etc}">
                    <fileset dir="${src.root}/etc/appliance">
                        <include name="pkcs11_linux.cfg"/>
                    </fileset>
                </copy>

                <!-- Appliance SSG configuration extras -->
                <copy file="${src.root}/etc/backup_manifest" todir="@{dir}/${install.src.app.backuprestore.cfg}"/>
                <copy file="${src.root}/etc/appliance/appliancedefs.sh" todir="@{dir}/${install.src.app.ssgprofile}"/>
            </sequential>
        </macrodef>

        <!--
          Macro to install Process Controller software files under the given directory
        -->
        <macrodef name="install-ssg-processcontroller">
            <attribute name="dir" default="${install.src.pc}"/>
            <sequential>
                <echo>Making Process Controller directories...</echo>

                <!-- Process Controller directories -->
                <mkdir dir="@{dir}/${install.src.pc.control}"/>
                <mkdir dir="@{dir}/${install.src.pc.controlbin}"/>
                <mkdir dir="@{dir}/${install.src.pc.controletc}"/>
                <mkdir dir="@{dir}/${install.src.pc.controletc}/conf"/>
                <mkdir dir="@{dir}/${install.src.pc.controllib}"/>
                <mkdir dir="@{dir}/${install.src.pc.controlvar}"/>
                <mkdir dir="@{dir}/${install.src.pc.controllogs}"/>
                <mkdir dir="@{dir}/${install.src.pc.controlrun}"/>
                <mkdir dir="@{dir}/${install.src.pc.controlpatches}"/>

                <copy file="${src.root}/etc/processcontroller/pc.sh" tofile="@{dir}/${install.src.pc.controlbin}/pc.sh"/>
                <chmod file="@{dir}/${install.src.pc.controlbin}/pc.sh" perm="755"/>

                <copy file="${src.root}/etc/processcontroller/patch.sh" tofile="@{dir}/${install.src.pc.controlbin}/patch.sh"/>
                <chmod file="@{dir}/${install.src.pc.controlbin}/patch.sh" perm="755"/>

                <!-- Copy Controller.jar -->
                <copy todir="@{dir}/${install.src.pc.control}">
                    <fileset dir="${build.dir}/processcontroller" includes="Controller.jar"/>
                </copy>

                <!-- Copy Controller libs -->
                <copy todir="@{dir}/${install.src.pc.controllib}" flatten="true">
                    <fileset dir="${build.dir}/processcontroller/lib" casesensitive="yes">
                        <include name="*.jar"/>
                    </fileset>
                </copy>

                <!-- Copy Controller bin -->
                <copy todir="@{dir}/${install.src.pc.controlbin}">
                    <fileset dir="${src.root}/etc/processcontroller" includes="processcontroller.sh"/>
                </copy>

                <copy file="${src.root}/etc/omp.dat" tofile="@{dir}/${install.src.pc.controletc}/conf/omp.dat"/>
           </sequential>
        </macrodef>

        <!--
          Macro to install SSG software files under the given directory
        -->
        <macrodef name="install-ssg-software">
            <attribute name="dir" default="${install.src.ssg}"/>
            <sequential>
                <echo>Making Gateway directories...</echo>

                <!-- Gateway directories -->
                <mkdir dir="@{dir}/${install.src.ssg.applet}"/>
                <mkdir dir="@{dir}/${install.src.ssg.appletlib}"/>
                <mkdir dir="@{dir}/${install.src.ssg.attachment}"/>
                <mkdir dir="@{dir}/${install.src.ssg.messagecache}"/>
                <mkdir dir="@{dir}/${install.src.ssg.base}"/>
                <mkdir dir="@{dir}/${install.src.ssg.bin}"/>
                <mkdir dir="@{dir}/${install.src.ssg.samples}"/>
                <mkdir dir="@{dir}/${install.src.ssg.conf}"/>
                <mkdir dir="@{dir}/${install.src.ssg.configwizard}"/>
                <mkdir dir="@{dir}/${install.src.ssg.configwizard.logs}"/>
                <mkdir dir="@{dir}/${install.src.ssg.etc}"/>
                <mkdir dir="@{dir}/${install.src.ssg.backuprestore}"/>
                <mkdir dir="@{dir}/${install.src.ssg.backuprestore.cfg}"/>
                <mkdir dir="@{dir}/${install.src.ssg.backuprestore.images}"/>
                <mkdir dir="@{dir}/${install.src.ssg.backuprestore.logs}"/>
                <mkdir dir="@{dir}/${install.src.ssg.lib}"/>
                <mkdir dir="@{dir}/${install.src.ssg.libalt}"/>
                <mkdir dir="@{dir}/${install.src.ssg.libext}"/>
                <mkdir dir="@{dir}/${install.src.ssg.logs}"/>
                <mkdir dir="@{dir}/${install.src.ssg.profile}"/>
                <mkdir dir="@{dir}/${install.src.ssg.profilebase}"/>
                <mkdir dir="@{dir}/${install.src.ssg.aarmods}"/>
                <mkdir dir="@{dir}/${install.src.ssg.calibs}"/>
                <mkdir dir="@{dir}/${install.src.ssg.caconf}"/>
                <mkdir dir="@{dir}/${install.src.ssg.sql}"/>
                <mkdir dir="@{dir}/${install.src.ssg.liquibase}"/>
                <mkdir dir="@{dir}/${install.src.ssg.web}"/>
                <mkdir dir="@{dir}/${install.src.ssg.web}/ssg"/>
                <mkdir dir="@{dir}/${install.src.ssg.modstaging}"/>
				<mkdir dir="@{dir}/${install.src.ssg.webstart}"/>				
                <mkdir dir="@{dir}/${install.src.ssg.webstartlib}"/>
				<mkdir dir="@{dir}/${install.src.ssg.webstartres}"/>

                <!--copy the config wizard -->
                <copy todir="@{dir}/${install.src.ssg.configwizard}">
                    <fileset dir="${build.dir}/configwizard">
                        <include name="**/*"/>
                        <exclude name="lib"/>
                        <exclude name="lib/**"/>
                    </fileset>
                </copy>

                <!--copy the ssg backuprestore -->
                <copy todir="@{dir}/${install.src.ssg.backuprestore}">
                    <fileset dir="${build.dir}/backup">
                        <include name="**/*"/>
                    </fileset>
                </copy>

                <!-- Copy bundled modular assertions -->
                <copy todir="@{dir}/${install.src.ssg.aarmods}">
                    <fileset dir="${build.dir}/modules" includes="*.aar" excludes="*-client-*.aar"/>
                </copy>

                <!-- Copy prebuilt modular assertions -->
                <copy todir="@{dir}/${install.src.ssg.aarmods}" flatten="true">
                    <fileset dir="${src.root}/lib/prebuilt/modass" includes="**/*.aar" excludes="*-client-*.aar"/>
                </copy>

                <!-- Copy prebuilt custom assertions -->
                <copy todir="@{dir}/${install.src.ssg.calibs}" flatten="true">
                    <fileset dir="${src.root}/lib/prebuilt/customassertions">
                        <include name="**/*.jar"/>
                        <include name="**/*.properties"/>
                    </fileset>

                </copy>

                <!-- Copy modified / new files -->
                <copy file="${src.root}/etc/omp.dat" tofile="@{dir}/${install.src.ssg.conf}/omp.dat"/>

                <!-- Copy signer files; Trusted Store and Root APIM private key -->
                <copy file="${src.root}/etc/signer/trusted_signers" tofile="@{dir}/${install.src.ssg.conf}/trusted_signers"/>

                <!-- Copy Gateway.jar -->
                <copy todir="@{dir}/${install.src.ssg.base}">
                    <fileset dir="${build.dir}/gateway" includes="Gateway.jar"/>
                </copy>

                <!-- Copy Gateway libs -->
                <copy todir="@{dir}/${install.src.ssg.lib}" flatten="true">
                    <fileset dir="${build.dir}/gateway/lib" casesensitive="yes">
                        <include name="*.jar"/>
                    </fileset>
                </copy>
                <copy todir="@{dir}/${install.src.ssg.libalt}" flatten="true">
                    <fileset dir="${build.dir}/gateway/lib/alt" casesensitive="yes">
                        <include name="*.jar"/>
                    </fileset>
                </copy>

                <!-- Copy config libs to runtime/libs to avoid duplication -->
                <copy todir="@{dir}/${install.src.ssg.lib}" flatten="true">
                    <fileset dir="${build.dir}/configwizard/lib" casesensitive="yes">
                        <include name="*.jar"/>
                    </fileset>
                </copy>

                <!-- Copy JMS lib -->
                <copy todir="@{dir}/${install.src.ssg.libext}" flatten="true">
                    <fileset dir="${src.root}/lib/repository/javax.jms" casesensitive="yes">
                        <include name="jms-1.1.jar"/>
                    </fileset>
                </copy>

                <!-- Copy misc. stuff -->
                <copy todir="@{dir}/${install.src.ssg.sql}">
                    <fileset dir="${src.root}/etc/db/${database.type}">
                        <include name="ssg*.sql"/>
                        <include name="upgrade*.sql"/>
                        <include name="externalAudits*.sql"/>
                    </fileset>
                </copy>

                <!-- Copy a hmac file for CCJ 2.2.1 -->
                <copy todir="@{dir}/${install.src.ssg.lib}" flatten="true">
                    <fileset dir="${src.root}/lib/repository/com.safelogic.cryptocomply" casesensitive="yes">
                        <include name="cryptocomply-2.2.1.hmac"/>
                    </fileset>
                </copy>

                <copy todir="@{dir}/${install.src.ssg.liquibase}">
                    <fileset dir="${src.root}/etc/db/liquibase">
                        <include name="ssg*.xml"/>
                        <include name="upgrade*.xml"/>
                    </fileset>
                </copy>

                <!-- profile files -->
                <copy todir="@{dir}/${install.src.ssg.profilebase}">
                    <fileset dir="${src.root}/etc">
                        <include name="profile"/>
                        <include name="ssg.policy"/>
                    </fileset>
                </copy>
                <copy todir="@{dir}/${install.src.ssg.profile}">
                    <fileset dir="${src.root}/etc">
                        <include name="ssgnodedefs.sh"/>
                        <include name="ssgruntimedefs.sh"/>
                        <include name="ssg-utilities.sh"/>
                        <include name="xlocaldefs.sh"/>
                        <include name="siteminder-env.sh"/>
                    </fileset>
                </copy>

                <!-- conf files -->
                <copy file="${src.root}/etc/system.properties" todir="@{dir}/${install.src.ssg.conf}"/>
                <copy file="${src.root}/etc/ssglog.template.properties" tofile="@{dir}/${install.src.ssg.conf}/ssglog.properties"/>

                <!-- bin files -->
                <copy todir="@{dir}/${install.src.ssg.bin}">
                    <fileset dir="${src.root}/etc">
                        <include name="gateway.sh"/>
                        <include name="setup.sh"/>
                        <include name="upgrade.sh"/>
                        <include name="dbtool.sh"/>
                    </fileset>
                </copy>

                <!-- sample files -->
                <copy todir="@{dir}/${install.src.ssg.samples}">
                    <fileset dir="${src.root}/etc/appliance">
                        <include name="fix_banner.sh"/>
                    </fileset>
                </copy>

                <copy todir="@{dir}/${install.src.ssg.web}/ssg">
                    <fileset dir="${src.root}/web" includes="*"/>
                    <fileset dir="${src.root}/modules/common/src/main/resources/com/l7tech/common/resources" includes="wsil2xhtml.xml"/>
                </copy>

                <copy todir="@{dir}/${install.src.ssg.applet}">
                    <fileset dir="${build.dir}/managerapplet" includes="layer7-gateway-console-applet.jar*"/>
                </copy>

                <copy todir="@{dir}/${install.src.ssg.appletlib}">
                    <fileset dir="${build.dir}/managerapplet/lib"/>
                </copy>

                <copy todir="@{dir}/${install.src.ssg.webstartlib}">
				    <fileset dir="${build.dir}/managerwebstart" includes="layer7-gateway-console-webstart.jar"/>
                    <fileset dir="${build.dir}/managerwebstart/lib"/>
                </copy>

				<foreach target="checkwebstartresourcefile" param="currentFile" parallel="false">
					<path>
						<fileset dir="@{dir}/${install.src.ssg.webstartlib}" casesensitive="yes">
						  <include name="*.jar" />
						  <exclude name="layer7-gateway-console-webstart.jar" />
						</fileset>
					</path>
				</foreach>

				<jar destfile="@{dir}/${install.src.ssg.webstartlib}/layer7-gateway-console-webstart.jar" update="true">
					<manifest>
						<attribute name="Permissions" value="all-permissions" />
						<attribute name="Application-Name" value="CA API Gateway - Policy Manager" />
					</manifest>
				</jar>

				<copy todir="@{dir}/${install.src.ssg.webstartres}">
					<fileset dir="modules/gateway/console-webstart/src/main/resources/com/l7tech/console/webstart/resources">
						<include name="ca_logo_black_16x16.jpg"/>
						<include name="ca_logo_black_32x32.jpg"/>
						<include name="ca_logo_black_64x64.jpg"/>
					</fileset>
                </copy>
				 <antcall target="install-managerjnlpfiles">
					<param name="deploypath" value="@{dir}"/>
				 </antcall>
                <copy file="${src.root}/etc/backup_tables_audit" todir="@{dir}/${install.src.ssg.backuprestore.cfg}"/>
                <copy file="${src.root}/etc/exclude_tables" todir="@{dir}/${install.src.ssg.backuprestore.cfg}"/>
                <copy file="${src.root}/etc/exclude_files" todir="@{dir}/${install.src.ssg.backuprestore.cfg}"/>

                <foreach param="file" target="sign-jar" inheritall="true" parallel="true" maxThreads="8">
                    <path>
                        <fileset dir="@{dir}/${install.src.ssg.webstartlib}" includes="*.jar"/>
                    </path>
                </foreach>

				<move file="@{dir}/${install.src.ssg.webstartlib}/layer7-gateway-console-webstart.jar" tofile="@{dir}/${install.src.ssg.webstartlib}/manager.jar"/>
            </sequential>
        </macrodef>

    </target>

    <target name="sign-jar">
        <signjar jar="${file}" alias="signer7" keystore="${src.root}/etc/ssgKeyStore" storepass="password" lazy="true"/>
    </target>

	<target name="checkwebstartresourcefile">
		<basename property="filename" file="${currentFile}" />
		<fail message="${filename} details are not updated in modules\gateway\console-webstart\src\main\resources\com\l7tech\console\webstart\resources\resources.txt">
		<condition>
		<not>
		<resourcecontains resource="modules/gateway/console-webstart/src/main/resources/com/l7tech/console/webstart/resources/resources.txt" substring="${filename}"/>
		</not>
		</condition>
		</fail>
	</target>
    <!--
      Top level work target for official builds
    -->
    <target name="INTERNAL-ssg-install" depends="INTERNAL-ssg-install-init, INTERNAL-ssg-install-main" if="ssg.install.enabled">
        <!-- Create software tarballs. This is the original "megaball." -->
        <property name="tarball" value="${build.dir}/ssg-b${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Tarball (${tarball})...</echo>
        <tar destfile="${tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="**/*"/>
                <exclude name="**/*.sh"/>
                <exclude name="node/default/etc/conf/*"/>
                <exclude name="node/default/var"/>
                <exclude name="node/default/var/**"/>
                <exclude name="**/*logging.properties"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="555" dirmode="755"  prefix="${install.target.ssg}">
                <include name="**/*.sh"/>
                <exclude name="runtime/etc/profile.d/xlocaldefs.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="755" dirmode="755"  prefix="${install.target.ssg}">
                <include name="runtime/etc/profile.d/xlocaldefs.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="644" dirmode="755"  prefix="${install.target.ssg}">
                <include name="node/default/etc/conf/*"/>
                <include name="**/*logging.properties"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="node/default/var"/>
                <include name="node/default/var/**"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="gateway" group="gateway" mode="644" prefix="${install.target.pc}">
                <include name="**/*"/>
                <exclude name="bin/*.sh"/>
                <exclude name="${install.src.pc.controletc}"/>
                <exclude name="${install.src.pc.controletc}/*"/>
                <exclude name="${install.src.pc.controllogs}"/>
                <exclude name="${install.src.pc.controllogs}/*"/>
                <exclude name="${install.src.pc.controlrun}"/>
                <exclude name="${install.src.pc.controlrun}/*"/>
                <exclude name="${install.src.pc.controlpatches}"/>
                <exclude name="${install.src.pc.controlpatches}/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="gateway" group="gateway" filemode="555" dirmode="755" prefix="${install.target.pc}">
                <include name="bin/*.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" filemode="555" dirmode="755" prefix="${install.target.ssg}">
                <include  name="${install.src.ssg.samples}/*.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="layer7" group="gateway" filemode="555" dirmode="775" prefix="${install.target.pc}">
                <include name="etc"/>
                <include name="etc/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="layer7" group="gateway" filemode="664" dirmode="770" prefix="${install.target.pc}">
                <include name="${install.src.pc.controllogs}"/>
                <include name="${install.src.pc.controllogs}/*"/>
                <include name="${install.src.pc.controlrun}"/>
                <include name="${install.src.pc.controlrun}/*"/>
                <include name="${install.src.pc.controlpatches}"/>
                <include name="${install.src.pc.controlpatches}/*"/>
            </tarfileset>
        </tar>

        <mkdir dir="${build.dir}/components"/>

        <!-- This one is for core. -->
        <property name="ssg-tarball" value="${build.dir}/components/ssg-core-${build.version}-${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Core Tarball (${ssg-tarball})...</echo>
        <tar destfile="${ssg-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="**/*"/>
                <exclude name="**/*.sh"/>
                <exclude name="node/default/etc/conf/*"/>
                <exclude name="node/default/var"/>
                <exclude name="node/default/var/**"/>
                <exclude name="**/*logging.properties"/>
                <exclude name="runtime/modules/assertions/*"/>
                <exclude name="runtime/web/ssg/webadmin/**/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="555" dirmode="755"  prefix="${install.target.ssg}">
                <include name="**/*.sh"/>
                <exclude name="runtime/etc/profile.d/xlocaldefs.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="755" dirmode="755"  prefix="${install.target.ssg}">
                <include name="runtime/etc/profile.d/xlocaldefs.sh"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="644" dirmode="755"  prefix="${install.target.ssg}">
                <include name="node/default/etc/conf/*"/>
                <include name="**/*logging.properties"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="node/default/var"/>
                <include name="node/default/var/**"/>
            </tarfileset>
            <tarfileset dir="${install.src.ssg}" username="gateway" group="gateway" filemode="555" dirmode="755" prefix="${install.target.ssg}">
                <include  name="${install.src.ssg.samples}/*.sh"/>
            </tarfileset>
        </tar>

        <!-- This one is for the web admin. -->
        <property name="webadmin-tarball" value="${build.dir}/components/ssg-webadmin-${build.version}-${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Web Admin Tarball (${webadmin-tarball})...</echo>
        <tar destfile="${webadmin-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="runtime/web/ssg/webadmin/**/*"/>
            </tarfileset>
        </tar>

        <!-- This one is for the extension assertions that are not a part of core. -->
        <property name="extensions-tarball" value="${build.dir}/components/ssg-extensions-${build.version}-${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Extensions Tarball (${extensions-tarball})...</echo>
        <tar destfile="${extensions-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="runtime/modules/assertions/**/*"/>
            </tarfileset>
        </tar>

        <!-- This one is for the extensions for the twelve factor gateway. -->
        <property name="extensions-twelvefactor-tarball" value="${build.dir}/components/ssg-extensions-twelvefactor-${build.version}-${install.build.number}.tar.gz"/>
        <echo level="info">Creating 12 Factor Software Extensions Tarball (${extensions-twelvefactor-tarball})...</echo>
        <tar destfile="${extensions-twelvefactor-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.ssg}" username="layer7" group="layer7" filemode="444" dirmode="755" prefix="${install.target.ssg}">
                <include name="runtime/modules/assertions/**/AdaptiveLoadBalancingAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/BufferDataAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/BulkJdbcInsertAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CORSAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CacheAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CassandraAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CertificateAttributesAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CircuitBreakerAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ComparisonAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ConcurrentAllAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CsrSignerAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/CsrfProtectionAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/EchoRoutingAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/EncodeDecodeAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/EmailAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/EvaluateJsonPathExpressionAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/EvaluateJsonPathExpressionV2Assertion-*.aar"/>
                <include name="runtime/modules/assertions/**/GatewayManagementAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/GenerateOAuthSignatureBaseStringAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/GenerateSecurityHashAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/GenericIdentityManagementServiceAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/IdentityAttributesAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JavaScriptAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JSONSchemaAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JdbcQueryAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JsonDocumentStructureAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JsonTransformationAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JsonWebTokenAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/JwtAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/KerberosAuthenticationAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/LDAPQueryAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/LdapWriteAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/LookupDynamicContextVariablesAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ManageCookieAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ManipulateMultiValuedVariableAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/MessageContextAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/NtlmAuthenticationAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/OdataValidationAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/PortalBootstrapAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/RateLimitAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ReplaceTagContentAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SamlIssuerAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SamlpAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SiteMinderAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SnmpTrapAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SplitJoinAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/SwaggerAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/UDDINotificationAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/UUIDGeneratorAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ValidateCertificateAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/ValidateNonSoapSamlAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/WsAddressingAssertion-*.aar"/>
                <include name="runtime/modules/assertions/**/XmlSecurityAssertion-*.aar"/>
            </tarfileset>
        </tar>

        <!-- This one is for the process controller. -->
        <property name="processcontroller-tarball" value="${build.dir}/components/ssg-processcontroller-${build.version}-${install.build.number}.tar.gz"/>
        <echo level="info">Creating Software Process Controller Tarball (${processcontroller-tarball})...</echo>
        <tar destfile="${processcontroller-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.pc}" username="layer7" group="gateway" filemode="555" dirmode="775" prefix="${install.target.pc}">
                <include name="etc"/>
                <include name="etc/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="layer7" group="gateway" filemode="664" dirmode="770" prefix="${install.target.pc}">
                <include name="${install.src.pc.controllogs}"/>
                <include name="${install.src.pc.controllogs}/*"/>
                <include name="${install.src.pc.controlrun}"/>
                <include name="${install.src.pc.controlrun}/*"/>
                <include name="${install.src.pc.controlpatches}"/>
                <include name="${install.src.pc.controlpatches}/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="gateway" group="gateway" mode="644" prefix="${install.target.pc}">
                <include name="**/*"/>
                <exclude name="bin/*.sh"/>
                <exclude name="${install.src.pc.controletc}"/>
                <exclude name="${install.src.pc.controletc}/*"/>
                <exclude name="${install.src.pc.controllogs}"/>
                <exclude name="${install.src.pc.controllogs}/*"/>
                <exclude name="${install.src.pc.controlrun}"/>
                <exclude name="${install.src.pc.controlrun}/*"/>
                <exclude name="${install.src.pc.controlpatches}"/>
                <exclude name="${install.src.pc.controlpatches}/*"/>
            </tarfileset>
            <tarfileset dir="${install.src.pc}" username="gateway" group="gateway" filemode="555" dirmode="755" prefix="${install.target.pc}">
                <include name="bin/*.sh"/>
            </tarfileset>
        </tar>

        <!-- Create appliance tarball -->
        <property name="appliance-tarball" value="${build.dir}/ssg-appliance-b${install.build.number}.tar.gz"/>
        <echo level="info">Creating Appliance Add-On Tarball (${appliance-tarball})...</echo>
        <tar destfile="${appliance-tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${install.src.app}" username="gateway" group="gateway" mode="644" prefix="${install.target.app}">
                <include name="**/*"/>
            </tarfileset>
        </tar>

        <echo level="info">BUILD COMPLETE - Produced ${tarball}, ${webadmin-tarball}, ${ssg-tarball}, ${extensions-tarball}, ${extensions-twelvefactor-tarball}, ${processcontroller-tarball}, and ${appliance-tarball}!</echo>
    </target>

    <!-- Create the TAR used when building the Solaris PKG -->
    <target name="package.solaris.tar" depends="init">
        <echo level="info">Creating Solaris Gateway Build Tar ...</echo>
        <echo file="${build.etc}/build.version" message="${build.version}"/>
        <tar destfile="${build.dir}/solaris_build.tar.gz" compression="gzip" longfile="gnu">
            <tarfileset dir="${src.root}/etc" username="root" group="root" mode="755">
                <include name="solaris_build/**/*.sh"/>
                <exclude name="**/.svn"/>
            </tarfileset>
            <tarfileset dir="${src.root}/etc" username="root" group="root" mode="644">
                <include name="solaris_build/**/*"/>
                <exclude name="**/*.sh"/>
                <exclude name="**/.svn"/>
            </tarfileset>
            <tarfileset dir="${build.etc}" fullpath="solaris_build/build.version" username="root" group="root" mode="644">
                <include name="build.version"/>
            </tarfileset>
        </tar>
    </target>



    <!--
      Initialization for the pre-official build (set versions, etc)
    -->
    <target name="OFFICIAL-build.init.pre" depends="ssg-install-full-init">
        <delete file="local.build.version"/>
    </target>
    <target name="OFFICIAL-build.init" depends="OFFICIAL-build.init.pre,init-core">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>
		
		<!-- Set using provided label, only does something if not in "interactive" mode -->
		<property file="build.version" prefix="file"/>
		<property name="build.label" value=""/>
        <property name="official.build.version" value="${file.build.version.major}.${file.build.version.minor}.${file.build.version.subminor}${build.label}"/>
        <property name="official.build.api.version" value="${file.build.api.version.major}.${file.build.api.version.minor}.${file.build.api.version.subminor}${build.label}"/>
	
		<!-- Use result of build number API call as value of property build.version.revision -->
		<property name="build.number.api.fullUrl" value="${build.number.api.baseUrl}/${build.artifact.name}${build.number.api.parameters}"/>
		<exec executable="curl">
			<arg line="-X POST -u ${build.number.api.username}:${build.number.api.password} -o build.number ${build.number.api.fullUrl}"/>
		</exec>
		<property file="build.number" prefix="install"/>

		<!-- Set the build revision number to the build number for official builds -->
		<property name="build.version.revision" value="${install.build.number}" />
		
		<!-- Include hyphen with suffix if it is defined and not empty -->
		<condition property="build.version.revision.suffix" value="-${build.number.api.parameters.suffix}" else="">
			<and>  
				<isset property="build.number.api.parameters.suffix"/>
				<not>  
					<equals arg1="${build.number.api.parameters.suffix}" arg2=""/>
				</not>
			</and>
		</condition>
		
		<echo file="local.build.version"># Generated local build properties file ${line.separator}build.version=${official.build.version}${line.separator}build.api.version=${official.build.api.version}${line.separator}</echo>
    </target>

    <!--
      Pre-official build (sets version, buildnumber)
    -->
    <target name="OFFICIAL-build"
            description="Set the official buildnumber and product version."
            depends="OFFICIAL-build.init, clean">
        <echo level="info">Using build.number ${install.build.number}</echo>
    </target>

    <!--
       Enable installer build but don't require dependencies to be built
    -->
    <target name="makensis-unsafe">
        <echo level="info">Enabling Win32 installers for build.</echo>
        <property name="makensis" value="true"/>
    </target>

    <target name="makensis" description="Enable building of Win32 installers" depends="makensis-unsafe">
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="makerpm" description="Enable building of rpm installer(s)">
        <echo level="info">Enabling RPM installers for build.</echo>
        <property name="makerpm" value="true"/>
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="makedocker" description="Enable building of Docker image">
        <echo level="info">Enabling building Docker image.</echo>
        <property name="makedocker" value="true"/>
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="generate-xbean-jars">
        <xmlbeancompiler destfile="${src.root}/build/xbean-xenc-xmldsig.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="xmldsig-core-schema.xsd, xenc-schema.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/build/xbean-saml1_1.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="oasis-sstc-saml-schema-assertion-1.1.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/build/xbean-saml2_0.jar">
            <classpath>
                <pathelement location="${src.root}/build/xbean-xenc-xmldsig.jar"/>
                <path refid="project.classpath"/>
            </classpath>
            <fileset dir="${src.root}/etc/schema/xbean">
                <include name="saml-schema-assertion-2.0.xsd"/>
                <include name="saml-schema-authn-context-2.0.xsd"/>
                <include name="saml-schema-authn-context-types-2.0.xsd"/>
                <include name="saml-schema-authn-context-sslcert-2.0.xsd"/>
                <include name="saml-schema-authn-context-pword-2.0.xsd"/>
                <include name="saml-schema-authn-context-x509-2.0.xsd"/>
                <include name="saml-schema-authn-context-xmldsig-2.0.xsd"/>
            </fileset>
        </xmlbeancompiler>
        <echo level="info">Output JARs (build/ xbean-xenc-xmldsig.jar, xbean-saml1_1.jar, xbean-saml2_0.jar)  should be installed to lib/repository/com.l7tech.lib/ for use in build.</echo>
    </target>

    <!--
      Generate the JAX-WS classes for UDDI v3.0.2.
    -->
    <target name="generate-uddi-jar">
        <property name="build.guddi.jar" value="build/jar/layer7-uddi-lib-1.1.0.jar"/>
        <mkdir dir="build/uddiclasses"/>
        <mkdir dir="build/uddisources"/>

        <echo level="info">Generating classes from WSDL/Schemas</echo>
        <wsimport wsdl="uddi_v3_service_i.wsdl"/>
        <wsimport wsdl="uddi_v3_service_p.wsdl"/>
        <wsimport wsdl="uddi_v3_service_s.wsdl"/>
        <wsimport wsdl="uddi_v3_service_sub.wsdl"/>

		<!-- 
			WARNING: In the JAX-WS RI 2.1.6 in JDK 6 generated source classes
            there is an invalid static initializer such as:

			static {
				URL url = null;
				try {
				    URL baseUrl;
				    baseUrl = com.l7tech.common.uddi.guddiv3.UDDIInquiry.class.getResource(".");
				    url = new URL(baseUrl, "resources/uddi_v3_service_i.wsdl");
				} catch (MalformedURLException e) {
				    logger.warning("Failed to create URL for the wsdl Location: 'resources/uddi_v3_service_i.wsdl', retrying as a local file");
				    logger.warning(e.getMessage());
				}
				UDDIINQUIRY_WSDL_LOCATION = url;
			}

            this must be manually edited to be:

			static {
				UDDIINQUIRY_WSDL_LOCATION = com.l7tech.common.uddi.guddiv3.UDDIInquiry.class.getResource("resources/uddi_v3_service_i.wsdl");
			}

            to avoid logging of WARNINGS such as:

              WARNING com.l7tech.common.uddi.guddiv3.UDDISecurity: Failed to create URL for the wsdl Location: 'resources/uddi_v3_service_s.wsdl', retrying as a local file
              WARNING com.l7tech.common.uddi.guddiv3.UDDISecurity: no protocol: resources/uddi_v3_service_s.wsdl

			Files are:
            - UDDIInquiry.java 
            - UDDIPublication.java
            - UDDISecurity.java 
            - UDDISubscription.java            
        -->

        <echo level="info">Compiling for 1.6</echo>
        <delete dir="build/uddiclasses"/>
        <mkdir dir="build/uddiclasses"/>
        <javac srcdir="build/uddisources" destdir="build/uddiclasses" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.6" source="1.6">
        </javac>

        <echo level="info">Building JAR</echo>
        <jar jarfile="${build.guddi.jar}" >
            <fileset dir="build/uddiclasses">
                <include name="**/*"/>
            </fileset>
            <zipfileset dir="etc/schema/uddiv3" prefix="com/l7tech/common/uddi/guddiv3/resources">
                <include name="**/*"/>
            </zipfileset>
        </jar>

        <echo level="info">Output JAR ${build.guddi.jar} should be copied to lib/repository/com.l7tech.lib/ for use in build.</echo>
    </target>


    <!-- 
      Target to check if any Jars have expired.
    -->
    <target name="check-jar-expiry">
        <javac srcdir="tools" destdir="tools"/>
        <java dir="." fork="false" classname="com.l7tech.tools.JarSignatureChecker" classpath="tools" failonerror="true">
            <arg line="build"/>
        </java>
    </target>

    <!--
        This will ensure that the database is up to date.
        Use the -Ddatabase.name property to specify the database name
        Use the -DcreateDatabase option to create a new database
    -->
    <target name="updatedb" depends="init" description="Update the mysql ssg database to the latest schema. This makes many assumptions on the database (however they can be overridden)">
        <path id="liquibase.classpath">
            <fileset dir="lib/repository/liquibase">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="lib/repository/mysql">
                <include name="*.jar"/>
            </fileset>
            <dirset dir="">
               <include name="etc/db/liquibase" />
            </dirset>
        </path>

        <!-- adding liquibase task -->
        <taskdef resource="liquibasetasks.properties">
            <classpath refid="liquibase.classpath"/>
        </taskdef>

        <property name="database.driver" value="com.mysql.jdbc.Driver"/>
        <property name="database.name" value="ssg"/>
        <property name="database.user" value="gateway"/>
        <property name="database.password" value="7layer"/>
        <property name="database.admin.user" value="root"/>
        <property name="database.admin.password" value="7layer"/>

        <if>
            <isset property="createDatabase"/>
            <then>
                <!-- Create the database if it doesn't exist-->
                <sql driver="${database.driver}"
                     url="jdbc:mysql://localhost:3306/"
                     userid="${database.admin.user}"
                     password="${database.admin.password}"
                     classpathref="liquibase.classpath">
                    CREATE DATABASE IF NOT EXISTS ${database.name};
                    GRANT ALL ON ${database.name}.* TO '${database.user}'@'localhost' IDENTIFIED BY '${database.password}';
                </sql>
            </then>
        </if>

        <updateDatabase
                changeLogFile="ssg.xml"
                driver="${database.driver}"
                url="jdbc:mysql://localhost:3306/${database.name}"
                username="${database.user}"
                password="${database.password}"
                dropFirst="false"
                classpathref="liquibase.classpath"
                />
    </target>

    <!--
        This will setup autoprovisioning. It will install a new license and the restman service on first gateway startup.
    -->
    <target name="autoprovision" description="Creates the bootstrap folders and adds the DEVLICENSE and restman file so that the gateway will be autoprovisioned.">
        <mkdir dir="build/deploy/Gateway/node/default/etc/bootstrap/services" />
        <mkdir dir="build/deploy/Gateway/node/default/etc/bootstrap/license" />
        <copy file="DEVLICENSE.xml" todir="build/deploy/Gateway/node/default/etc/bootstrap/license"/>
        <touch file="build/deploy/Gateway/node/default/etc/bootstrap/services/restman" />
    </target>

    <!--
        Target to build the skar signer and sign .aar file.
    -->
    <target name="sign-aar-full" depends="package.skarsigner,sign-aar" description="Sign an AAR file" />
    <target name="sign-aar-gensmfxml-full" depends="build-skar-if-not-exists,sign-aar-gensmfxml" description="Build the SkarSigner package if it does not exist, sign an aar file and generate RESTman XML for an signed file" />
    <target name="sign-aar-gensmfxml" depends="sign-aar,gensmfxml-saar" description="Sign an aar file and generate RESTman XML for an signed file" />
	
	<!-- 
		Target to sign archive files and generate RESTman xml files if properties are set in individual file's build.xml
		If module.skarsigner.sign.archive is true, then the archive will be signed
		If module.skarsigner.generate.restman.xml is true, then the corresponding RESTman xml will be generated
		module.skarsigner.keystore determines which keystore to use. Value is the keystore filepath relative to src.root
		See modules/gateway/assertions/ApiPortalIntegrationAssertion/build.xml for an example.
		
		For publish to repository (ivy or Artifactory), the artifacts are set using conf="skarsigner"
		See modules/gateway/assertions/ApiPortalIntegrationAssertion/ivy.xml for an example
		If the 3 module.skarsigner properties are not set in build.xml, the artifact lines in ivy.xml must be removed
	-->
	<target name="skarsigner-sign" depends="build-skar-if-not-exists" description="Sign aar/jar/skar and generate RESTman XMLs">
        <echo level="info">Sign all archives and generate RESTman xmls for them</echo>
        <property name="skarsigner.sign.all" value="true"/>
    </target>
	
	<!-- check if the SkarSigner jar file exists -->
    <target name="skar-jar-check">
        <condition property="skar-jar-exists">
            <available file="${src.root}/modules/internal/build/SkarSigner.jar"/>
        </condition>
    </target>

    <!-- build SkarSigner only if the jar file does not exist -->
    <target name="build-skar-if-not-exists" depends="skar-jar-check" unless="skar-jar-exists">
        <antcall target="package.skarsigner"></antcall>
    </target>

    <!--
        Target to sign .aar file.
    -->
    <target name="sign-aar" description="Sign an AAR file">
        <fail unless="assertion" message="assertion is a required property (assertion name)"/>
        <fail unless="keystore" message="keystore is a required property (keystore file name)"/>
        <fail unless="access.password" message="access.password is a required property (encoded keystore access password)"/>
        <fail unless="load.password" message="load.password is a required property (encoded keystore load password)"/>

        <property name="skarSigner" value="${src.root}/modules/internal/build/SkarSigner.jar"/>
        <fail message="Skar signer ${skarSigner} is not available. Try sign-aar-full.">
            <condition>
                <not>
                    <available file="${skarSigner}" />
                </not>
            </condition>
        </fail>

        <!-- Defaults that could be overridden -->
        <property name="input" value="build/ivy/repository/${assertion}-${build.version.major}.${build.version.minor}.${build.version.subminor}.aar"/>
        <property name="output" value="build/ivy/repository/${assertion}-${build.version.major}.${build.version.minor}.${build.version.subminor}.saar"/>

        <echo level="info">Signing ${input} as ${output} using key ${keystore}</echo>

        <java jar="${skarSigner}" fork="true" failonerror="true">
            <arg line="sign"/>
            <arg line="-f &quot;${src.root}/etc/signer/${keystore}&quot;"/>
            <arg line="-p &quot;${access.password}&quot;"/>
            <arg line="-k &quot;${load.password}&quot;"/>
            <arg line="-s &quot;${src.root}/${input}&quot;"/>
            <arg line="-o &quot;${src.root}/${output}&quot;"/>
        </java>
    </target>

    <target name="gensmfxml-saar" description="Generate RESTman XML for a SAAR file">
        <fail unless="assertion" message="assertion is a required property (assertion name)"/>
        <property name="skarSigner" value="${src.root}/modules/internal/build/SkarSigner.jar"/>
        <fail message="Skar signer ${skarSigner} is not available. Try sign-aar-full.">
            <condition>
                <not>
                    <available file="${skarSigner}" />
                </not>
            </condition>
        </fail>

        <!-- Defaults that could be overridden -->
        <property name="saar-input" value="build/ivy/repository/${assertion}-${build.version.major}.${build.version.minor}.${build.version.subminor}.saar"/>
        <property name="xml-output" value="build/ivy/repository/${assertion}-${build.version.major}.${build.version.minor}.${build.version.subminor}.saar.xml"/>

        <echo level="info">Generate RESTman XML for ${saar-input} as ${xml-output}</echo>

        <java jar="${skarSigner}" fork="true" failonerror="true">
            <arg line="genSmfXml"/>
            <arg line="-n &quot;${assertion}&quot;"/>
            <arg line="-f &quot;${src.root}/${saar-input}&quot;"/>
            <arg line="-o &quot;${src.root}/${xml-output}&quot;"/>
        </java>
    </target>
	
	<!--
		Publish everything in ivy local repo to artifactory recursively
	-->
	<target name="publish-third-party-all">
		<delete dir="${ivy.cache.dir}"/>
		<foreach param="var" target="publish-third-party-helper">
			<path>
				<fileset dir="${ivy.local.dir}">
					<include name="**/*.xml"/>
				</fileset>
			</path>
		</foreach>
	</target>

	<!--
		Check if the specified artifact revision in ivy file already exist on Artifactory
	-->
	<target name="publish-third-party-helper">
		<ivy:settings  id="ivy.settings" file="${src.root}/etc/build/ivysettings_artifactory.xml"/>
		<ivy:info file="${var}" settingsRef="ivy.settings"/>
		<ivy:info organisation="${ivy.organisation}" module="${ivy.module}" revision="${ivy.revision}" property="check" settingsRef="ivy.settings"/>
		<echo message="Artifact Search: ${check.organisation} ${check.module} ${check.revision}"/>
		<antcall target="publish-third-party"/>
	</target>
	<!--
		Publish a single artifact (unless artifact revision already present)
	-->
	<target name="publish-third-party" unless="check.revision">
		<ivy:resolve file="${var}" haltonfailure="false"/>
		<ivy:publish resolver="artifactory-thirdparty" overwrite="false" haltonmissing="false" srcivypattern="${var}" conf="default,master"
			artifactspattern="${ivy.local.dir}/[organisation]/[module]-[revision].[ext]"/>
	</target>
	<!--
		Enable antcontrib for external tasks (foreach, if)
	-->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!--
		Publish all RPMs in dist folder
	-->
	<target name="publish-rpms-all" if="publish.rpm.target">
		<foreach param="var" target="publish-rpm" inheritall="true" parallel="true" maxThreads="3">
			<path>
				<fileset dir="${src.root}/dist">
					<include name="*.rpm"/>
				</fileset>
			</path>
		</foreach>
	</target>
	
	<!--
		Publish an RPM
	-->
	<target name="publish-rpm">
		<basename property="rpm.filename" file="${var}"/>
		<exec executable="curl">
			<arg line="-i -u ${artifactory.username}:${artifactory.passwd} -T ./dist/${rpm.filename} ${publish.rpm.target}/${ant.project.name}/${build.version.major}.${build.version.minor}.${build.version.subminor}/${rpm.filename}"/>
		</exec>
	</target>
	
	<!--
		Publish all other files in dist folder
	-->
	<target name="publish-generic-all" if="publish.generic.target">
		<foreach param="var" target="publish-generic" inheritall="true" parallel="true" maxThreads="5">
			<path>
				<fileset dir="${src.root}/dist">
					<include name="*.zip"/>
					<include name="*.tar.gz"/>
					<include name="*.exe"/>
                    <include name="components/*.tar.gz"/>
				</fileset>
			</path>
		</foreach>
	</target>
	
	<!--
		Publish a generic artifact (zip, tar.gz, exe)
	-->
	<target name="publish-generic">
		<basename property="generic.filename" file="${var}"/>
		<propertyregex property="nospace.filename" input="${generic.filename}" regexp=" " replace="%20" global="true" defaultValue="${generic.filename}" />
		<exec executable="curl">
			<arg line="-i -u ${artifactory.username}:${artifactory.passwd} -T"/>
			<arg value="${var}"/>
			<arg value="${publish.generic.target}/${ant.project.name}/${build.version.major}.${build.version.minor}.${build.version.subminor}/${nospace.filename}"/>
		</exec>
	</target>

    <target name="enable-m2local-snapshot" description="Enable publish of jars and rpms to local m2 repository">
        <echo level="info">Enabling publishing of integration (snapshot) to local m2 repo.</echo>
        <property name="publish.jar.target" value="local-m2"/>
        <property name="publish.status" value="integration"/>
        <property name="suffix.snapshot" value="-SNAPSHOT"/>
    </target>

	<!--
	-->
    <target name="enable-snapshot" description="Enable publish of jars and rpms to Artifactory">
        <echo level="info">Enabling Artifactory publishing of integration (snapshot) repo.</echo>
        <property name="publish.jar.target" value="artifactory-snapshot"/>
		<property name="publish.rpm.target" value="${artifactory.yum.snapshot}"/>
		<property name="publish.generic.target" value="${artifactory.generic.snapshot}"/>
		<property name="publish.status" value="integration"/>
		<property name="suffix.snapshot" value="-SNAPSHOT"/>
    </target>
	
	<!--
	-->
    <target name="enable-release" description="Enable publish of jars and rpms to Artifactory">
        <echo level="info">Enabling Artifactory publishing of release repo.</echo>
        <property name="publish.jar.target" value="artifactory-release"/>
		<property name="publish.rpm.target" value="${artifactory.yum.release}"/>
		<property name="publish.generic.target" value="${artifactory.generic.release}"/>
		<property name="publish.status" value="release"/>
		<property name="suffix.snapshot" value=""/>
    </target>

	<!-- 
	-->
    <target name="skiptests" description="Include this target to skip unit tests">
        <property name="module.skip.tests" value="true"/>
    </target>
	
	<!--
	SonarQube target
    -->
	<target name="sonar">
		<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
			<classpath path="lib/tools/sonar-ant-task-2.3.jar" />
		</taskdef>
		<sonar:sonar />
	</target>
	
</project>
