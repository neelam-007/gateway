<?xml version="1.0" encoding="UTF-8"?>
<project name="UneasyRooster" default="dev" basedir=".">
    <description>
        Ant build file for UneasyRooster
    </description>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" location="${basedir}"/>

    <!-- get the version -->
    <property file="${src.root}/build.version"/>

    <!--
      Set default build properties
      Properties that were not specified in user properties
      Mainly DB info, compiler settings, etc.
    -->
    <property file="${src.root}/etc/default_build.properties"/>

    <!-- distribution archive names -->
    <property name="war" value="ROOT.war"/>

    <!-- project classpath -->
    <path id="project.classpath">
        <pathelement location="src"/>
        <fileset dir="lib">
            <!--
              include bc provider before tarari_jce_provider since that
              contains old copies of the bc classes.
            -->
            <include name="crypto/bc/**/*.jar"/>
        </fileset>
        <fileset dir="lib">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>

            <!--
               Issue with multiple parsers.
               JDK 1.4 ships it's own parses and contributes to the
               overall parser mess. java.beans.XmlEncoder and other
               classes  do not like xerces so excluded it from project
               classpath.
               fla note: xercesImpl.jar is required by xss4j for xml-enc features.
            <exclude name="*xerces*"/>
            -->
            <!--
              Exclude since this is not necessary to compile and it includes old
              versions of some of the xml api classes
            -->
            <exclude name="xml4j.jar"/>

            <!-- Exclude build related classes -->
            <exclude name="**/ant.jar"/>
            <exclude name="**/ant-*.jar"/>
        </fileset>
    </path>

    <!--
      Classpath for Idea form compiler
    -->
    <path id="uidesigner.classpath">
        <fileset dir="lib/tools">
            <include name="jdom.jar"/>
            <include name="asm.jar"/>
            <include name="asm-commons.jar"/>
            <include name="javac2-l7p1.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for Idea form compiler
    -->
    <taskdef name="javac2t"
             classname="com.intellij.ant.Javac2"
             classpathref="uidesigner.classpath"/>

    <!--
      Task definition for Pack 200
    -->
    <taskdef name="pack200"
             classname="org.jdesktop.deployment.ant.pack200.Pack200Task"
    	     classpath="lib/tools/deployment-ant-pack200-1.0beta.jar"/>

    <!--
      Task definition for JDepend
    -->
    <taskdef name="jdepend"
             classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask"
             classpath="lib/tools/ant-jdepend.jar:lib/tools/jdepend-2.9.jar"/>

    <macrodef name="javac2">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="debug" default="on"/>
        <attribute name="target" default="1.4"/>
        <attribute name="source" default="1.4"/>
        <attribute name="optimize" default="on"/>
        <attribute name="classpathref" default="project.classpath"/>
        <attribute name="include" default="**/*.form"/>
        <sequential>
            <javac2t
                    srcdir="@{srcdir}"
                    destdir="@{destdir}"
                    debug="@{debug}"
                    target="@{target}"
                    optimize="@{optimize}"
                    source="@{source}"
                    classpathref="@{classpathref}">
                <include name="@{include}"/>
            </javac2t>
        </sequential>
    </macrodef>

    <!--
      Task definition for XmlBeans
    -->
    <taskdef name="xmlbeancompiler"
             classname="org.apache.xmlbeans.impl.tool.XMLBean"
             classpath="lib/xbean.jar:lib/jsr173_1.0_api.jar"/>

    <!--
      Classpath for obfuscation
    -->
    <path id="zelix.classpath">
        <fileset dir="etc/obfuscation">
            <include name="ZKM.jar"/>
        </fileset>
    </path>

    <!--
      Task definition for class file obfuscation
    -->
    <taskdef name="Zelix" classname="ZKMTask" classpathref="zelix.classpath"/>

    <!--
      Classpath for svn
    -->
    <path id= "svnant.classpath"  >
        <fileset dir= "lib/tools" >
            <include name= "svn*.jar" />
        </fileset>
    </path>

    <!-- 
      Taskdef for svn
    -->
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svnant.classpath" />

    <!--
      Various bolt-on task definitions
    -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!--
      Patternset used for Layer 7 API compilation/javadoc
    -->
    <patternset id="layer7api.sources">
        <include name="com/l7tech/policy/assertion/UsesVariables.java"/>
        <include name="com/l7tech/policy/assertion/SetsVariables.java"/>
        <include name="com/l7tech/policy/assertion/ext/AssertionEditor.java"/>
        <include name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.java"/>
        <include name="com/l7tech/policy/assertion/ext/Category.java"/>
        <include name="com/l7tech/policy/assertion/ext/CustomAssertion.java"/>
        <include name="com/l7tech/policy/assertion/ext/CustomAssertionUI.java"/>
        <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
        <include name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
        <include name="com/l7tech/policy/assertion/ext/EditListener.java"/>
        <include name="com/l7tech/policy/assertion/ext/SecurityContext.java"/>
        <include name="com/l7tech/policy/assertion/ext/ServiceRequest.java"/>
        <include name="com/l7tech/policy/assertion/ext/ServiceResponse.java"/>
        <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.java"/>
        <include name="com/l7tech/policy/variable/VariableMetadata.java"/>
    </patternset>

    <!--
      Patternset used for Bridge API javadoc
    -->
    <patternset id="bridgeapi.sources">
        <include name="com/l7tech/proxy/SecureSpanBridge.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeOptions.java"/>
        <include name="com/l7tech/proxy/SecureSpanBridgeFactory.java"/>
    </patternset>

    <!--
      Patternset used for Manager API javadoc
    -->
    <patternset id="managerapi.sources">
        <include name="com/l7tech/admin/AdminContext*.java"/>
        <include name="com/l7tech/admin/AdminLogin*.java"/>
        <include name="com/l7tech/cluster/ClusterNodeInfo.java"/>
        <include name="com/l7tech/cluster/ClusterProperty.java"/>
        <include name="com/l7tech/cluster/ClusterStatusAdmin*.java"/>
        <include name="com/l7tech/cluster/GatewayStatus.java"/>
        <include name="com/l7tech/cluster/LogRequest.java"/>
        <include name="com/l7tech/cluster/ServiceUsage.java"/>
        <include name="com/l7tech/common/VersionException.java"/>
        <include name="com/l7tech/common/alert/AdminAlertEvent.java"/>
        <include name="com/l7tech/common/alert/AlertAdmin.java"/>
        <include name="com/l7tech/common/audit/AuditAdmin*.java"/>
        <include name="com/l7tech/common/audit/LogonEvent.java"/>
        <include name="com/l7tech/common/security/rbac/RbacAdmin.java"/>
        <include name="com/l7tech/common/security/TrustedCertAdmin.java"/>
        <include name="com/l7tech/common/transport/jms/JmsAdmin*.java"/>
        <include name="com/l7tech/common/transport/jms/JmsConnection.java"/>
        <include name="com/l7tech/common/transport/jms/JmsEndpoint.java"/>
        <include name="com/l7tech/common/transport/jms/JmsProvider.java"/>
        <include name="com/l7tech/common/transport/jms/JmsReplyType.java"/>
        <include name="com/l7tech/common/transport/jms/JmsTestException.java"/>
        <include name="com/l7tech/console/SsmApplication*.java"/>
        <include name="com/l7tech/console/security/AuthenticationProvider.java"/>
        <include name="com/l7tech/console/security/InvalidHostCertificateException.java"/>
        <include name="com/l7tech/console/security/InvalidHostNameException.java"/>
        <include name="com/l7tech/console/security/LogonListener.java"/>
        <include name="com/l7tech/identity/Group.java"/>
        <include name="com/l7tech/identity/GroupBean.java"/>
        <include name="com/l7tech/identity/GroupManager.java"/>
        <include name="com/l7tech/identity/GroupMembership.java"/>
        <include name="com/l7tech/identity/Identity.java"/>
        <include name="com/l7tech/identity/IdentityAdmin.java"/>
        <include name="com/l7tech/identity/IdentityProvider.java"/>
        <include name="com/l7tech/identity/IdentityProviderConfig.java"/>
        <include name="com/l7tech/identity/IdentityProviderConfigManager.java"/>
        <include name="com/l7tech/identity/IdentityProviderType.java"/>
        <include name="com/l7tech/identity/PersistentGroup.java"/>
        <include name="com/l7tech/identity/PersistentUser.java"/>
        <include name="com/l7tech/identity/User.java"/>
        <include name="com/l7tech/identity/UserBean.java"/>
        <include name="com/l7tech/identity/UserManager.java"/>
        <include name="com/l7tech/identity/cert/ClientCertManager*.java"/>
        <include name="com/l7tech/identity/cert/TrustedCertManager.java"/>
        <include name="com/l7tech/identity/fed/FederatedGroup.java"/>
        <include name="com/l7tech/identity/fed/FederatedGroupMembership.java"/>
        <include name="com/l7tech/identity/fed/FederatedIdentityProviderConfig.java"/>
        <include name="com/l7tech/identity/fed/FederatedUser.java"/>
        <include name="com/l7tech/identity/fed/VirtualGroup.java"/>
        <include name="com/l7tech/identity/fed/X509Config.java"/>
        <include name="com/l7tech/identity/internal/InternalGroup.java"/>
        <include name="com/l7tech/identity/internal/InternalGroupMembership.java"/>
        <include name="com/l7tech/identity/internal/InternalUser.java"/>
        <include name="com/l7tech/identity/ldap/GroupMappingConfig.java"/>
        <include name="com/l7tech/identity/ldap/LdapGroup.java"/>
        <include name="com/l7tech/identity/ldap/LdapIdentity.java"/>
        <include name="com/l7tech/identity/ldap/LdapIdentityProviderConfig.java"/>
        <include name="com/l7tech/identity/ldap/LdapUser.java"/>
        <include name="com/l7tech/identity/ldap/MemberStrategy.java"/>
        <include name="com/l7tech/identity/ldap/PasswdStrategy.java"/>
        <include name="com/l7tech/identity/ldap/UserMappingConfig.java"/>
        <include name="com/l7tech/identity/mapping/AttributeConfig.java"/>
        <include name="com/l7tech/identity/mapping/AttributeMapping.java"/>
        <include name="com/l7tech/identity/mapping/IdentityMapping.java"/>
        <include name="com/l7tech/identity/mapping/InternalIdentityMapping.java"/>
        <include name="com/l7tech/identity/mapping/KerberosSecurityTokenMapping.java"/>
        <include name="com/l7tech/identity/mapping/LdapAttributeMapping.java"/>
        <include name="com/l7tech/identity/mapping/NameFormat.java"/>
        <include name="com/l7tech/identity/mapping/SecurityTokenMapping.java"/>
        <include name="com/l7tech/identity/mapping/X509SecurityTokenMapping.java"/>
        <include name="com/l7tech/logging/GenericLogAdmin.java"/>
        <include name="com/l7tech/logging/LogMessage.java"/>
        <include name="com/l7tech/logging/SSGLogRecord.java"/>
        <include name="com/l7tech/logging/StatisticsRecord.java"/>
        <include name="com/l7tech/objectmodel/Entity.java"/>
        <include name="com/l7tech/objectmodel/EntityHeader.java"/>
        <include name="com/l7tech/objectmodel/EntityHeaderComparator.java"/>
        <include name="com/l7tech/objectmodel/EntityManager.java"/>
        <include name="com/l7tech/objectmodel/EntityType.java"/>
        <include name="com/l7tech/objectmodel/FindException.java"/>
        <include name="com/l7tech/objectmodel/IdentityHeader.java"/>
        <include name="com/l7tech/objectmodel/NamedEntity.java"/>
        <include name="com/l7tech/objectmodel/ObjectModelException.java"/>
        <include name="com/l7tech/objectmodel/ObjectNotFoundException.java"/>
        <include name="com/l7tech/objectmodel/PersistentEntity.java"/>
        <include name="com/l7tech/objectmodel/SaveException.java"/>
        <include name="com/l7tech/objectmodel/StaleUpdateException.java"/>
        <include name="com/l7tech/objectmodel/TransactionException.java"/>
        <include name="com/l7tech/objectmodel/UpdateException.java"/>
        <include name="com/l7tech/objectmodel/VersionException.java"/>
        <include name="com/l7tech/service/PublishedService*.java"/>
        <include name="com/l7tech/service/SampleMessage.java"/>
        <include name="com/l7tech/service/ServiceAdmin.java"/>
        <include name="com/l7tech/service/ServiceAdminPublic.java"/>
        <include name="com/l7tech/service/ServiceDocument.java"/>
        <include name="com/l7tech/service/ServiceStatistics.java"/>
    </patternset>
    
    <!--
      License Generator library patternset (also ".")
    -->
    <patternset id="licensegenerator.libs">
        <include name="**/kunststoff.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/commons-lang-1.0.1.jar"/>
        <include name="**/commons-collections-2.1.1.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/qname.jar"/>
        <include name="**/forms_rt-l7p1.jar"/>
        <include name="**/xmlpad.jar"/>
        <include name="**/xmlpad-res.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/log4j-1.2.14.jar"/>
        <include name="**/bcprov-jdk15-135.jar"/>
        <include name="**/xalan-2.7.0.jar"/>
        <include name="**/serializer-xalan-2.7.0.jar"/>
        <include name="**/saaj.jar"/>
    </patternset>

    <!--
      Layer 7 API library patternset
    -->
    <patternset id="api.libs">
        <include name="**/servlet-api.jar"/>
    </patternset>

    <!--
      Configuration Wizard library patternset (also ".")
    -->
    <patternset id="configurationwizard.libs">
        <include name="**/forms_rt-l7p1.jar"/>
        <include name="**/mysql-connector-java-5.0.4-bin.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/bcprov-jdk15-135.jar"/>
        <include name="**/kunststoff.jar"/>
        <include name="**/whirlycache-1.0.1.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/concurrent-1.3.4.jar"/>
        <include name="**/commons-lang-2.3.jar"/>
        <include name="**/commons-collections-3.2.jar"/>
        <include name="**/commons-configuration-1.3.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/xalan-2.7.0.jar"/>
    </patternset>

    <patternset id="updatewizard.libs">
        <include name="**/commons-lang-2.3.jar"/>
    </patternset>

    <!--
      System Configuration Wizard library patternset  (also ".")
    -->
    <patternset id="systemconfigurationwizard.libs">
        <include name="**/commons-lang-2.3.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/commons-configuration-1.3.jar"/>
    </patternset>

    <patternset id="ssgflasher.libs">
        <include name="**/mysql-connector-java-5.0.4-bin.jar"/>
        <include name="**/commons-lang-2.3.jar"/>
        <include name="**/commons-collections-3.2.jar"/>
        <include name="**/commons-configuration-1.3.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/xss4j*.jar"/>
    </patternset>

    <!--
      XML VPN Client library patterset
    -->
    <patternset id="client.libs">
        <include name="**/BrowserLauncher2-10rc4.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/jaxrpc.jar"/>
        <include name="**/kunststoff.jar"/>
        <include name="**/saaj.jar"/>
        <include name="**/0500-wsdl4j.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/bcprov-jdk15-135.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/org.mortbay.jetty.jar"/>
        <include name="**/commons-httpclient-3.0.1.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/servlet-api.jar"/>
        <include name="**/systray4j.jar"/>
        <include name="**/jaxen-1.1-beta-10.jar"/>
        <include name="**/saxpath.jar"/>
        <include name="**/xbean.jar"/>
        <include name="**/jsr173_1.0_api.jar"/>
        <include name="**/xbean-saml1_1.jar"/>
        <include name="**/xbean-saml2_0.jar"/>
        <include name="**/xbean-xenc-xmldsig.jar"/>
        <include name="**/forms_rt-l7p1.jar"/>
        <include name="**/xml4j.jar"/>
        <include name="**/are.jar"/>
        <include name="**/mailapi-1.4.jar"/>
        <include name="**/activation.jar"/>
        <include name="**/spring-context.jar"/>
        <include name="**/spring-beans.jar"/>
        <include name="**/xalan-2.7.0.jar"/>
        <include name="**/serializer-xalan-2.7.0.jar"/>
        <include name="**/nekohtml.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/commons-collections-2.1.1.jar"/>
        <include name="**/whirlycache-1.0.1.jar"/>
        <include name="**/concurrent-1.3.4.jar"/>
        <include name="**/policy-1.0.jar"/>
    </patternset>

    <!--
      Manager library patternset

      NOTE: If you add JARs to the manager you may want to Pack200 them for
            faster Manager Applet downloads (search for PACMANAGERJARSHERE)
    -->
    <patternset id="manager.libs">
        <include name="**/BrowserLauncher2-10rc4.jar"/>
        <include name="**/looks-1.1.3.jar"/>
        <include name="**/hibernate3.jar"/>
        <include name="**/nachocalendar-0.23.jar"/>
        <include name="**/kunststoff.jar"/>
        <include name="**/concurrent-1.3.4.jar"/>
        <include name="**/0500-wsdl4j.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/commons-lang-1.0.1.jar"/>
        <include name="**/commons-collections-2.1.1.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/qname.jar"/>
        <include name="**/forms_rt-l7p1.jar"/>
        <include name="**/xmlpad.jar"/>
        <include name="**/xmlpad-res.jar"/>
        <include name="**/jaxen-1.1-beta-10.jar"/>
        <include name="**/saxpath.jar"/>
        <include name="**/jaxrpc.jar"/>
        <include name="**/saaj.jar"/>
        <include name="**/saaj-impl.jar"/>
        <include name="**/dom4j-1.6.1.jar"/>
        <include name="**/xss4j*.jar"/>
        <include name="**/spring-aop.jar"/>
        <include name="**/spring-core.jar"/>
        <include name="**/spring-context.jar"/>
        <include name="**/spring-dao.jar"/>
        <include name="**/spring-beans.jar"/>
        <include name="**/spring-remoting.jar"/>
        <include name="**/aopalliance.jar"/>
        <include name="**/mailapi-1.4.jar"/>
        <include name="**/antlr-2.7.7-l7p1.jar"/>
        <include name="**/log4j-1.2.14.jar"/>
        <include name="**/jsr173_1.0_api.jar"/>
        <include name="**/xalan-2.7.0.jar"/>
        <include name="**/serializer-xalan-2.7.0.jar"/>
        <include name="**/jcommon-1.0.5.jar"/>
        <include name="**/jfreechart-1.0.2.jar"/>
        <include name="**/whirlycache-1.0.1.jar"/>
        <include name="**/policy-1.0.jar"/>
        <include name="**/commons-httpclient-3.0.1.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/activation.jar"/>
        <include name="**/systinet-uddiclient_api_v3.jar"/>
        <include name="**/systinet-uddiclient_core.jar"/>
        <include name="**/systinet-jaxm.jar"/>
        <include name="**/systinet-saaj.jar"/>
        <include name="**/systinet-wasp.jar"/>
        <include name="**/systinet-jaxrpc.jar"/>
    </patternset>

    <!--
      Gateway library patternset (not used but needed for nsis task)
    -->
    <patternset id="gateway.libs">
    </patternset>

    <!--
      Initialize build properties
    -->
    <target name="init">
        <property name="build.dir" value="${src.root}/build"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="build.test.classes" value="${build.dir}/test-classes"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <property name="build.reports" value="${build.dir}/reports"/>
        <property name="build.installer" value="${src.root}/installer"/>
        <property name="build.rpm" value="${build.dir}/rpm"/>

        <property name="dist.dir" value="${src.root}/dist"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>

        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>
        <property name="vendor.name" value="Layer 7 Technologies Inc."/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <condition property="db.postgres">
            <equals arg1="${database.type}" arg2="postgres"/>
        </condition>

        <condition property="db.oracle8">
            <equals arg1="${database.type}" arg2="oracle8"/>
        </condition>

        <condition property="db.oracle9">
            <equals arg1="${database.type}" arg2="oracle9"/>
        </condition>

        <condition property="db.oracle10">
            <equals arg1="${database.type}" arg2="oracle10"/>
        </condition>

        <!-- paths with dynamic components -->
        <path id="project.test.classpath">
            <path refid="project.classpath"/>
            <pathelement location="${build.classes}"/>
        </path>

        <available property="makensis.available" file="${build.install.compiler}"/>
        <condition property="makensis.enabled">
            <and>
                <isset property="makensis.available"/>
                <isset property="makensis"/>
            </and>
        </condition>

        <condition property="makerpm.available">
            <or>
                <available file="rpmbuild" filepath="/bin:/usr/bin:/usr/local/bin"/>
                <available file="rpm" filepath="/bin:/usr/bin:/usr/local/bin"/>
            </or>
        </condition>
        <condition property="makerpm.enabled">
            <and>
                <isset property="makerpm.available"/>
                <isset property="makerpm"/>
            </and>
        </condition>

    </target>

    <!--
      Shortcut target for clean dev
    -->
    <target name="cleandev" depends="clean, dev"/>

    <!--
      Shortcut target for clean undeploy deploy
    -->
    <target name="redeploy" depends="undeploy, deploy"/>

    <!--
      Initialization for a dev build.
    -->
    <target name="init-dev">
        <property name="dev.build" value="true"/>
        <property file="build.number"/>
    </target>

    <!--
      Configure and invoke developer's build
      -->
    <target name="dev"
            description="Developer build (does not package)"
            depends="init-dev, compile-tests"/>

    <!--
      Configure and invoke developer's build for source files
      that match the pattern passed as -Dcompile.pattern
    -->
    <target name="compile-one" depends="init" if="compile.pattern">
        <echo message="Compiling **/*${compile.pattern}* in ${src.root}."/>
        <javac srcdir="src" destdir="${build.classes}" debug="on"
               optimize="off" includes="**/*${compile.pattern}*"
               deprecation="on" verbose="no">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <!--
      Undeploy from Tomcat
    -->
    <target name="undeploy" depends="deploy-init, init">
        <delete dir="${tomcat.home}/webapps/ROOT"/>
        <delete file="${war}"/>
    </target>

    <!--
      Deploy target initialization
    -->
    <target name="deploy-init">
        <fail unless="tomcat.home">Property is not defined: 'tomcat.home'</fail>
        <available property="tomcat.home.available" file="${tomcat.home}"/>
        <fail unless="tomcat.home.available">Tomcat home does not exist: 'tomcat.home'</fail>

        <property name="dev.build" value="true"/>
        <property name="ssg.only" value="true"/>
    </target>

    <!--
      Developer's 'deploy' target.
      Compile and package the application and then deploy
      the WAR into ${tomcat.home}/webapps ($TOMCAT_HOME/webapps)
    -->
    <target name="deploy" depends="deploy-init, package">
        <copy todir="${tomcat.home}/webapps">
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>

        <copy todir="${tomcat.home}/common/endorsed">
            <fileset dir="${build.dir}">
                <include name="l7provider.jar"/>
            </fileset>
        </copy>

        <copy todir="${tomcat.home}/server/lib">
            <fileset dir="${build.dir}">
                <include name="l7valve.jar"/>
            </fileset>
        </copy>

        <copy todir="${tomcat.home}/shared/lib">
            <fileset dir="${build.dir}">
                <include name="layer7-api.jar"/>
            </fileset>
        </copy>

        <!--
          this server.xml is ready to be modified by sslGen.sh who will later
          make the ssl cert and record it's keystore password in it
        -->
        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${tomcat.home}/conf/server.xml"/>
        <copy file="${src.root}/etc/tomcat/truststore.jks" tofile="${tomcat.home}/conf/truststore.jks"/>
        <copy file="${src.root}/etc/tomcat/SsgSSLImplementation.properties" tofile="${tomcat.home}/conf/SsgSSLImplementation.properties"/>
    </target>

    <!--
      Display information on a Jar file
    -->
    <target name="jarinfo">
        <fail unless="file">You must specify a JAR file [-Dfile=...]</fail>
        <echo level="info">Listing Jar file: ${file}</echo>
        <!-- This just stops idea showing an error for the undefined property -->
        <property name="file" value=""/>
        <jarlib-display file="${file}"/>
        <echo level="info">Listing complete (if theres no output you can try unzip -p ${file} META-INF/MANIFEST.MF)</echo>
    </target>

    <!--
      Run a single JUnit test
    -->
    <target name="test-one"
            description="Run an individual unit test. (e.g. ./build.sh test-one -Dtest=com.l7tech.MyTest)"
            depends="clean.test, dev, summary"
            if="test">
        <junit printsummary="yes" haltonfailure="yes" fork="off">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <test name="${test}" haltonfailure="no" fork="yes"/>
        </junit>
    </target>

    <!--
      Print a list of available unit tests (or things that may be tests)
    -->
    <target name="summary" unless="test">
        <echo level="info">Possible test classes are: (use -Dtest=...)</echo>
        <pathconvert property="x" targetos="unix" pathsep="${line.separator}">
            <map from="${build.test.classes}/" to=""/>
            <path>
                <fileset dir="${build.test.classes}" includes="**/*Test.class **/*Tests.class"/>
            </path>
        </pathconvert>
        <echo>${x}</echo>
        <echo level="info">NOTE: ** you will need to convert to a class name **</echo>
    </target>

    <!--
      Configure and invoke unit tests
    -->
    <target name="test" description="Run JUnit 'quick' tests" depends="test.work, test.report">
        <checkfail/>
    </target>

    <target name="test.work" depends="clean.test, dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off" errorproperty="test.error" failureproperty="test.failure">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain" unless="build.junit.xmlformat"/>
            <formatter type="xml" if="build.junit.xmlformat"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <!--
              Tests
            -->
            <test name="com.l7tech.common.audit.MessagesTest" haltonfailure="no" />
            <test name="com.l7tech.proxy.policy.ClientPolicyFactoryTest" haltonfailure="no" />
            <test name="com.l7tech.proxy.policy.ClientXpathAssertionsTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.ServerPolicyFactoryTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.policy.filter.FilterTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.xml.WssRoundTripTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.policy.PolicyServiceTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.message.KnobblyMessageTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.FunctionalTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.http.CookieTest" haltonfailure="no"/>
            <test name="com.l7tech.common.http.ParameterizedStringTest" haltonfailure="no"/>
            <test name="com.l7tech.common.security.wsfederation.FederationPassiveClientTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.EncryptionUtilTest" haltonfailure="no"/>
            <test name="com.l7tech.server.GatewayFeatureSetsTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.ServerAssertionRegistryTest" haltonfailure="no"/>

            <!--
              Move these WS-SecurityPolicy tests to test.intensive after a release
              or so, when it's no longer so new.
            -->
            <test name="com.l7tech.policy.wssp.WsspReaderTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.wssp.WsspWriterTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.wssp.WsspRoundTripTest" haltonfailure="no"/>

            <!--
              Add policy tests into the com.l7tech.policy.AllPolicyTests class
            -->
            <test name="com.l7tech.policy.AllPolicyTests" haltonfailure="no" fork="yes"/>

            <!--
              Tomcat config. When done enable the tests below.
              <test name="com.l7tech.logging.LogCLientTest" haltonfailure="no"/>
              <test name="com.l7tech.identity.ClientTest" haltonfailure="no"/>
              <test name="com.l7tech.service.ServiceAdminTest" haltonfailure="no"/>
            -->

            <!--
              Add fast precheckin tests here **
            -->
            <test name="com.l7tech.identity.IdentityEqualityTest" haltonfailure="no" fork="yes"/>
        </junit>
    </target>

    <target name="test.intensive"
            description="Run intensive JUnit tests."
            depends="clean.test, test.work, test.intensive.work, test.modules, test.report">
        <checkfail/>
    </target>

    <target name="test.intensive.work" depends="clean.test, dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off" errorproperty="test.error" failureproperty="test.failure">
            <classpath>
                <path refid="project.test.classpath"/>
                <pathelement location="${build.test.classes}"/>
            </classpath>

            <formatter type="plain" unless="build.junit.xmlformat"/>
            <formatter type="xml" if="build.junit.xmlformat"/>
            <sysproperty key="src.root" value="${src.root}"/>

            <test name="com.l7tech.common.util.ThreadPoolTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.proxy.ClientPolicyTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.RequestXpathAssertionTest" fork="yes" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.StashManagerTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.mime.MimeBoundaryTerminatedInputStreamTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.util.ExceptionUtilsTest" haltonfailure="no"/>
            <test name="com.l7tech.identity.StubDataStoreTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.XmlUtilTest" haltonfailure="no"/>
            <test name="com.l7tech.server.MockServletApiTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.saml.SamlProcessingTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.server.TokenServiceTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.proxy.datamodel.SsgManagerTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgTest" haltonfailure="no"/>
            <test name="com.l7tech.common.security.xml.WssDecoratorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.xml.WssProcessorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.security.KeysTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.xml.XpathEvaluatorTest" haltonfailure="no"/>
            <test name="com.l7tech.common.xml.SoapMessageGeneratorTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.mime.ContentTypeHeaderTest" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.MimeHeaderTest" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.MimeHeadersTest" haltonfailure="no"/>
            <test name="com.l7tech.common.mime.MimeBodyTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.io.failover.FailoverStrategyTest" haltonfailure="no"/>
            <test name="com.l7tech.service.WsdlTest" haltonfailure="no" fork="yes"/>
            <test name="com.l7tech.common.xml.tarari.util.TarariXpathConverterTest" haltonfailure="no"/>
            <test name="com.l7tech.internal.license.LicenseGeneratorTest" haltonfailure="no" />
            <test name="com.l7tech.internal.license.LicenseRoundTripTest" haltonfailure="no" />
            <test name="com.l7tech.common.io.BufferPoolByteArrayOutputStreamTest" haltonfailure="no" />
            <test name="com.l7tech.common.util.BufferPoolTest" haltonfailure="no" />
            <test name="com.l7tech.server.policy.assertion.ServerWsiBspAssertionTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.assertion.ServerWsiSamlAssertionTest" haltonfailure="no"/>
            <test name="com.l7tech.common.http.cache.HttpObjectCacheTest" haltonfailure="no" />
            <test name="com.l7tech.server.identity.AuthenticationResultTest" haltonfailure="no" />
            <test name="com.l7tech.common.security.saml.Saml2ValidationTest" haltonfailure="no" />
            <test name="com.l7tech.common.xml.ElementCursorTest" haltonfailure="no"/>
            <test name="com.l7tech.server.PolicyProcessingTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.HexUtilsTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.ISO8601DateTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.assertion.OversizedTextAssertionTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.RegexAssertionTest" haltonfailure="no"/>

            <!--
              Add possibly-slow intensive nightly tests here **
            -->
        </junit>
    </target>

    <target name="test.modules" depends="dev">
        <echo level="info">Testing modules</echo>
        <!--
          NOTE: using subant here because if we use ant it can mess up the
          base directory for the modules (which also use subant)
        -->
        <subant target="test" inheritAll="false" verbose="true">
            <fileset dir="." includes="modules/build.xml"/>
            <propertyset>
                <propertyref name="build.version"/>
            </propertyset>
        </subant>
    </target>

    <target name="test.all" description="Run testpackage and test.intensive" depends="test.work, test.intensive.work, test.modules, testpackage.work, test.report, testpackage.report">
        <checkfail/>
    </target>

    <target name="test.junit" description="Run all JUnit tests" depends="test.work, test.intensive.work, test.modules, test.report, report.jdepend, javadoc">
        <checkfail/>
    </target>

    <target name="report.jdepend" depends="compile">
        <mkdir dir="${build.reports}/jdepend"/>
        <mkdir dir="${build.reports}/teamcity"/>

        <jdepend format="xml" outputfile="${build.reports}/jdepend/index.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <exclude name="EDU.*"/>
            <exclude name="edu.*"/>
            <exclude name="org.*"/>
            <exclude name="sun.*"/>
            <exclude name="snoozesoft.*"/>
            <exclude name="x0AcClassesPassword.*"/>
            <exclude name="x0AcClassesTLSClient.*"/>
            <exclude name="x0AcClassesXMLDSig.*"/>
            <exclude name="x0Assertion.*"/>
            <exclude name="net.*"/>
            <exclude name="com.whirlycott.*"/>
            <exclude name="com.tibco.*"/>
            <exclude name="com.tarari.*"/>
            <exclude name="com.sun.*"/>
            <exclude name="com.rsa.*"/>
            <exclude name="com.ncipher.*"/>
            <exclude name="com.mchange.*"/>
            <exclude name="com.jgoodies.*"/>
            <exclude name="com.japisoft.*"/>
            <exclude name="com.intellij.*"/>
            <exclude name="com.incors.*"/>
            <exclude name="com.ibm.*"/>
            <exclude name="com.chrysalisits.*"/>
            <exclude name="antlr"/>
            <exclude name="antlr.*"/>

            <classespath>
                <pathelement location="${build.classes}" />
            </classespath>
        </jdepend>

        <xslt processor="trax"
              classpath="lib/tools/ant-trax.jar"
              style="etc/jdepend.xsl"
              basedir="${build.reports}/jdepend"
              destdir="${build.reports}/jdepend"
              includes="index.xml"
              />

        <zip destfile="${build.reports}/teamcity/jdepend.zip" basedir="${build.reports}/jdepend" /> 
    </target>

    <!--
      Targets to optionally print failure warnings
    -->
    <target name="test.report" depends="test.report.summary, test.report.error, test.report.failure"/>
    <target name="test.report.summary" if="build.junit.xmlformat">
        <mkdir dir="${build.reports}"/>
        <junitreport todir="${build.reports}">
            <fileset dir="${src.root}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports}/html"/>
        </junitreport>
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/junit.zip" basedir="${build.reports}/html" />
    </target>
    <target name="test.report.error" if="test.error">
        <echo level="warning">One or more JUnit tests exited due to error.</echo>
        <property name="fail" value="true"/>
    </target>
    <target name="test.report.failure" if="test.failure">
        <echo level="warning">One or more JUnit tests failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <!--
      Clean data from running tests.
    -->
    <target name="clean.test" depends="init">
        <delete>
            <fileset dir="${src.root}/">
                <include name="TEST*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="WspWriter*"/>
                <include name="stubdata*"/>
            </fileset>
        </delete>
    </target>

    <!--
      Remove any build artifacts
    -->
    <target name="clean" depends="init,clean.test,clean.modules" description="Delete all build output.">
        <delete file="${build.dir}/please_obfuscate"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${build.classes}"/>
        <delete dir="${build.test.classes}"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.lib}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${build.rpm}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}/installer">
                <include name="Manager-*/*"/>
                <include name="Client-*/*"/>
                <include name="Manager-*"/>
                <include name="Client-*"/>
            </fileset>
        </delete>
        <delete dir="${javadoc.home}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${src.root}">
                <include name="stubdata*"/>
            </fileset>
        </delete>
        <delete file="${src.root}/src/com/l7tech/util/Version.java"/>
        <delete file="${src.root}/tools/com/l7tech/tools/JarChecker.class"/>
        <property name="buildinfo.update" value="true"/>
    </target>

    <!--
        Javadoc target
    -->
    <target name="javadoc" depends="init,prepare" description="Generates Javadoc.">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${javadoc.home}" includes="**/*"/>
        </delete>
        <mkdir dir="${javadoc.home}"/>
        <javadoc sourcepath="src"
                 classpathref="project.classpath"
                 destdir="${javadoc.home}"
                 packagenames="com.*"
                 windowtitle="Layer 7 Technologies API Specification"
                 doctitle="Layer 7 Technologies API Specification"
                 defaultexcludes="yes"
                 version="true"
                 use="true"
                 splitindex="true"
                 maxmemory="512m">
                <!-- other possible options:
                 author="true"
                 private="true"
                 additionalparam="-linksource"
                -->
            <header><![CDATA[<b>Layer 7 Technologies Inc.<b><br><font size='-1'>UneasyRooster</font>]]></header>
            <bottom><![CDATA[<i>Copyright &#169; 2007 Layer 7 Technologies Inc. All Rights Reserved.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api"/>
            <link href="http://static.springframework.org/spring/docs/1.1.5/api"/>
            <link href="http://jakarta.apache.org/commons/httpclient/2.0/apidocs"/>
            <link href="http://ws.apache.org/commons/policy/apidocs"/>
            <link href="http://www.bouncycastle.org/docs/docs1.5"/>
            <link href="http://jaxen.codehaus.org/apidocs"/>
            <link href="http://www.dom4j.org/apidocs"/>
            <link href="http://jetty.mortbay.org/javadoc"/>
            <link href="http://tomcat.apache.org/tomcat-5.5-doc/catalina/docs/api"/>
            <link href="http://www.jfree.org/jfreechart/api/javadoc"/>
        </javadoc>
        <mkdir dir="${build.reports}/teamcity"/>
        <zip destfile="${build.reports}/teamcity/javadoc.zip" basedir="${javadoc.home}" />
    </target>

    <!--
      Perform compilation of the main sources
    -->
    <target name="compile.main" depends="init, prepare, compile13, compile14">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.5" source="1.5">
            <compilerarg value="-Xlint" compiler="modern"/>
            <compilerarg value="-Xlint:-serial" compiler="modern"/>
            <compilerarg value="-Xlint:-path" compiler="modern"/>
            <compilerarg value="-Xlint:-unchecked" compiler="modern"/>
            <compilerarg value="-Xlint:-dep-ann" compiler="modern"/>
            <classpath refid="project.classpath"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc">
                <include name="serverconfig.properties"/>
                <include name="ehcache.xml"/>
            </fileset>
            <fileset dir="${src.root}/src">
                <include name="**/XMLSchema.xsd"/>
                <include name="**/xml.xsd"/>
                <include name="**/datatypes.dtd"/>
                <include name="**/XMLSchema.dtd"/>
            </fileset>
        </copy>
    </target>

    <!--
      Compile target
    -->
    <target name="compile"
            description="Compile the Java code and UI forms."
            depends="compile.forms"
            unless="compile.pattern">
    </target>

    <!--
      Package target.
      Package the application (gateway, manager, client) into their
      Respective archives (war, jar).
      This target is invoked by other targets such as deploy and dist.
    -->
    <target name="package"
            description="Create the SSG WAR file and SSB/SSM installers."
            depends="package.readversion, package.gateway.all, package.manager, package.client, package.installclients, package.installgateway.work"/>


    <target name="package.gateway.all" depends="package.configwiz.all, package.ssgflasher, obfuscate.flasher, obfuscate.cfgwiz, obfuscate.syscfgwiz, package.gateway, package.api, obfuscate.gateway, package.bcluna-jce, package.modules"/>

    <!--
      Build the windows installers without any dependencies.

      This target is a direct replacement for the old perl "make_installers.pl -b"

      NOTE: This is "broken" by design, it does exactly what the perl script used to do, you must
            build the ssg before running this target.
    -->
    <target name="make_installers"
            description="Create the SSG WAR file and SSXVC/SSM Win32 installers (was make_installers.pl -b)."
            depends="makerpm, makensis-unsafe, package.installclient.work, package.installmanager.work, package.installgateway.work">
    </target>

    <!--
      Get the version for this build from the BuildInfo util.
    -->
    <target name="package.readversion" unless="build.version" depends="compile">
        <java output="${build.etc}/build.version" classname="com.l7tech.common.BuildInfo">
            <classpath>
                <pathelement path="${build.classes}"/>
            </classpath>
        </java>
        <replaceregexp file="${build.etc}/build.version" flags="s">
            <regexp pattern=".* ([a-zA-Z0-9\-\._]{1,20}) build .*"/>
            <substitution expression="build.version=\1"/>
        </replaceregexp>
        <property file="${build.etc}/build.version"/>
        <echo level="info">BuildInfo reports version: "${build.version}"</echo>
    </target>

    <!--
      Get the version for this build from the BuildInfo util.
    -->
    <target name="package.readversion.unsafe" unless="build.version" depends="init">
        <java output="${build.etc}/build.version" classname="com.l7tech.common.BuildInfo">
            <classpath>
                <pathelement path="${build.classes}"/>
            </classpath>
        </java>
        <replaceregexp file="${build.etc}/build.version" flags="s">
            <regexp pattern=".* ([a-zA-Z0-9\-\._]{1,20}) build .*"/>
            <substitution expression="build.version=\1"/>
        </replaceregexp>
        <property file="${build.etc}/build.version"/>
        <echo level="info">BuildInfo reports version: "${build.version}"</echo>
    </target>

    <!--
      Compile and package the SSB
    -->
    <target name="client" description="Build and package the SSXVC" depends="package.installclient"/>

    <!--
      Compile and package the SSM
    -->
    <target name="manager" description="Build and package the SSM" depends="package.installmanager"/>

    <!--
      Compile and package the SSG
    -->
    <target name="gateway" description="Build and package the SSG" depends="package.installgateway.work"/>

    <!--
      Compile and package just the ConfigWizards
    -->
    <target name="configwizard" description="Build and package just the config wizards" depends="package.configwiz.all"/>

    <target name="pack.manager" depends="pack.manager.copy, pack.manager.compress"/>

    <target name="pack.manager.copy">
        <mkdir dir="${build.dir}/managerlibs"/>
        <copy todir="${build.dir}/managerlibs">
            <fileset dir="${build.dir}/lib">
                <patternset>
                    <exclude name="**/systinet-*"/>
                </patternset>
                <patternset refid="manager.libs"/>
            </fileset>
        </copy>
    </target>

    <macrodef name="pack-mac">
        <attribute name="jarfile"/>
        <attribute name="packfile" default="@{jarfile}.pack.gz"/>
        <sequential>
            <pack200 src="@{jarfile}" destfile="@{packfile}" segmentlimit="-1" gzipoutput="true"/>
        </sequential>
    </macrodef>

    <target name="pack.manager.compress" depends="pack.manager.copy" if="pack200">
        <pack-mac jarfile="${build.dir}/Manager.jar"/>

        <!--
          Note that the build does not fail if any of these are missing, but a
          warning is logged.
        -->
        <pack-mac jarfile="${build.dir}/managerlibs/0500-wsdl4j.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/activation.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/antlr-2.7.7-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/aopalliance.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/BrowserLauncher2-10rc4.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-codec-1.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-collections-2.1.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-discovery.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-httpclient-3.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-lang-1.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/commons-logging-1.0.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/concurrent-1.3.4.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/dom4j-1.6.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/forms_rt-l7p1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/hibernate3.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/jaxen-1.1-beta-10.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/jaxrpc.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/jcommon-1.0.5.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/jfreechart-1.0.2.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/jsr173_1.0_api.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/kunststoff.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/log4j-1.2.14.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/looks-1.1.3.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/nachocalendar-0.23.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/policy-1.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/saaj-impl.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/saaj.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/saxpath.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-aop.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-beans.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-context.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-core.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-dao.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/spring-remoting.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/whirlycache-1.0.1.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xalan-2.7.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/serializer-xalan-2.7.0.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xercesImpl.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xmlpad.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xmlpad-res.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xss4j.jar"/>
        <pack-mac jarfile="${build.dir}/managerlibs/xss4j_patch.jar"/>
        <!-- label: PACMANAGERJARSHERE [can delete if no longer referenced in this file] -->
    </target>

    <!--
      Package the SSG (WAR).
    -->
    <target name="package.gateway" depends="compile, configure_properties.dev, package.manager, pack.manager">
        <!-- the ssg war -->
        <war warfile="${build.dir}/${war}" webxml="${build.etc}/web.xml">
            <lib dir="${build.dir}/lib">
                <include name="bcprov-jdk15-135.jar"/>
                <include name="jgroups.jar"/>
                <include name="jboss-*.jar"/>
                <include name="trove.jar"/>
                <include name="commons-logging-1.0.4.jar"/>

                <include name="activation.jar"/>
                <include name="mailapi-1.4.jar"/>
                <include name="smtp-1.3.2.jar"/>
                <include name="whirlycache-1.0.1.jar"/>
                <include name="policy-1.0.jar"/>
                <include name="commons-collections-2.1.1.jar"/>
                <include name="commons-dbcp-1.2.1.jar"/>
                <include name="commons-discovery.jar"/>
                <include name="commons-httpclient-3.0.1.jar"/>
                <include name="commons-codec-1.2.jar"/>
                <include name="commons-lang-1.0.1.jar"/>
                <include name="commons-pool-1.2.jar"/>

                <include name="hibernate3.jar"/>
                <include name="antlr-2.7.7-l7p1.jar"/>
                <include name="asm.jar"/>
                <include name="asm-attrs.jar"/>
                <include name="c3p0-0.9.0.4.jar"/>
                <include name="dom4j-1.6.1.jar"/>
                <include name="cglib-2.1.3.jar"/>
                <include name="ehcache-1.1.jar"/>

                <include name="spring-aop.jar"/>
                <include name="spring-beans.jar"/>
                <include name="spring-context.jar"/>
                <include name="spring-core.jar"/>
                <include name="spring-dao.jar"/>
                <include name="spring-hibernate.jar"/>
                <include name="spring-jdbc.jar"/>
                <include name="spring-orm.jar"/>
                <include name="spring-remoting.jar"/>
                <include name="spring-support.jar"/>
                <include name="spring-web.jar"/>
                <include name="aopalliance.jar"/>
                <include name="nekohtml.jar"/>

                <!-- AdminWS Stuff -->
                <!--
                  This is the same as the jsr173_api.jar
                  <include name="stax-api-1.0.jar"/>
                -->
                <include name="jdom.jar"/>
                <include name="wstx-asl-3.0.1.jar"/>
                <include name="xfire-aegis-1.2.2.jar"/>
                <include name="xfire-core-1.2.2.jar"/>
                <include name="xfire-spring-1.2.2.jar"/>
                <include name="spring-webmvc.jar"/>
                <include name="0500-wsdl4j.jar"/>

                <include name="velocity-1.4.jar"/>
                <include name="jaxen-1.1-beta-10.jar"/>
                <include name="jms-1.1.jar"/>
                <include name="jta.jar"/>
                <include name="odmg.jar"/>
                <include name="concurrent-1.3.4.jar"/>
                <include name="qname.jar"/>
                <include name="log4j-1.2.14.jar"/>
                <include name="slf4j-*.jar"/>

                <include name="systinet-*.jar" if="include.systinet"/>
                <include name="jaxrpc.jar" unless="include.systinet"/>
                <include name="saaj.jar" unless="include.systinet"/>

                <include name="saxpath.jar"/>
                <include name="xalan-2.7.0.jar"/>
                <include name="serializer-xalan-2.7.0.jar"/>
                <include name="jsr173_1.0_api.jar"/> <!-- StAX -->
                <include name="xbean.jar"/>
                <include name="xbean-xenc-xmldsig.jar"/>
                <include name="xbean-saml1_1.jar"/>
                <include name="xbean-saml2_0.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xss4j*.jar"/>

                <include name="ftp*-1.0-*.jar"/>
                <include name="mina*-1.1.0.jar"/>

                <!-- Include OpenJMS on dev builds -->
                <include name="openjms-client-0.7.6.jar" if="include.jms.openjms"/>
                <include name="exolabcore-0.3.7.jar" if="include.jms.openjms"/>

                <!-- Include MQSeries on dev builds -->
                <include name="com.ibm.mqbind.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mq.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mqjms.jar" if="include.jms.mqseries"/>
                <include name="connector.jar" if="include.jms.mqseries"/>

                <!-- Include Tibco on dev builds -->
                <include name="tibcrypt.jar" if="include.jms.tibco"/>
                <include name="tibjms.jar" if="include.jms.tibco"/>
                <include name="tibjmsadmin.jar" if="include.jms.tibco"/>
                <include name="tibjmsapps.jar" if="include.jms.tibco"/>
                <include name="tibrvjms.jar" if="include.jms.tibco"/>

                <include name="ojdbc14.jar" if="db.oracle8"/>
                <include name="ojdbc14.jar" if="db.oracle9"/>
                <include name="ojdbc14.jar" if="db.oracle10"/>

                <include name="mysql-connector-java-5.0.4-bin.jar" if="db.mysql"/>
                <include name="postgresql.jar" if="db.postgres"/>
            </lib>

            <classes dir="${build.classes}">
                <!-- Tool, Manager, Client, Config Wizard and Test classes -->
                <exclude name="com/l7tech/internal/**/*"/>
                <exclude name="com/l7tech/console/**/*"/>
                <exclude name="com/l7tech/test/**/*"/>
                <exclude name="com/l7tech/server/jms/**/*" unless="include.jms"/>
                <exclude name="com/l7tech/proxy/gui/**"/>
                <exclude name="com/l7tech/proxy/ClientProxy*.class"/>
                <exclude name="com/l7tech/proxy/Main*.class"/>
                <exclude name="com/l7tech/proxy/RequestHandler*.class"/>
                <exclude name="com/l7tech/server/config/**"/>

                <!-- Tomcat classes -->
                <exclude name="com/l7tech/server/tomcat/**"/>

                <!-- UDDI implementations (these should be packaged as modules) -->
                <exclude name="com/l7tech/server/service/uddi/impl/**"/>

                <!-- Classes that make up the Layer 7 API -->
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/Category.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionUI.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/EditListener.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/SecurityContext.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceRequest.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceResponse.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/ServiceInvocation.class"/>
            </classes>

            <zipfileset dir="${src.root}/web" includes="*" prefix="ssg"/>
            <zipfileset dir="${src.root}/web" includes="*"/>
            <zipfileset dir="${src.root}/src/com/l7tech/common/resources" includes="wsil2xhtml.xml" prefix="ssg"/>
            <!-- Spring config -->
            <zipfileset dir="${src.root}/etc" includes="webApplicationContext.xml" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/etc" includes="dataAccessContext.xml" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/etc" includes="adminContext.xml" prefix="WEB-INF"/>
            <zipfileset dir="${src.root}/etc" includes="rbacEnforcementContext.xml" prefix="WEB-INF"/>

            <!-- AdminWS stuff -->
            <zipfileset dir="${src.root}/etc/admin/ws/xfire" prefix="WEB-INF">
                <include name="xfire-servlet.xml"/>
            </zipfileset>

            <!-- Web SecureSpan Manager stuff -->
            <zipfileset dir="${src.root}/etc/admin/" prefix="WEB-INF">
                <include name="admin-servlet.xml"/>
            </zipfileset>

            <zipfileset dir="${src.root}/src" includes="**/*.aegis.xml" prefix="WEB-INF/classes"/>

            <!-- Include the manager jars in the Gateway, for the applet admin mode. -->
            <zipfileset dir="${build.dir}" includes="Manager.jar*" prefix="ssg/webadmin"/>
            <zipfileset dir="${src.root}/etc" includes="favicon.ico"/>
            <zipfileset dir="${build.dir}/managerlibs" prefix="ssg/webadmin/lib"/>
            <zipfileset src="${src.root}/webhelp/ssm/help.zip" prefix="ssg/webadmin"/>
        </war>

        <jar jarfile="${build.dir}/l7valve.jar">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/server/tomcat/*.class"/>
                <exclude name="com/l7tech/server/tomcat/ClientTrusting*.class"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/l7provider.jar">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/server/tomcat/ClientTrusting*.class"/>
                <include name="com/l7tech/common/util/ConfigurableLogFormatter*.class"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/ssg-uddi-module-systinetv3.jar">
            <zipfileset dir="${src.root}/lib/gateway/uddi/systinet" includes="*.jar" prefix="lib"/>
            <zipfileset dir="${src.root}/lib" prefix="lib">
                <include name="activation.jar"/>
            </zipfileset>
            <zipfileset dir="${src.root}/etc/services/uddi-systinet" prefix="META-INF/services"/>
            <fileset dir="${build.classes}">
                <include name="com/l7tech/server/service/uddi/impl/systinet/**"/>
            </fileset>
        </jar>
    </target>

    <!--
      Task to generate JAR file manifests with classpaths.
    -->
    <macrodef name="generate-manifest">
        <attribute name="propertyPrefix"/>
        <attribute name="filename"/>
        <attribute name="pathPrefix" default=""/>
        <element name="section" optional="yes"/>
        <sequential>
            <fileset id="@{propertyPrefix}.lib.fileset" dir="${src.root}/lib" casesensitive="yes">
                <patternset refid="@{propertyPrefix}.libs"/>
            </fileset>
            <pathconvert property="@{propertyPrefix}.libs.path" targetos="unix" pathsep=" " refid="@{propertyPrefix}.lib.fileset">
                <mapper type="regexp" from=".*[/\\](.*)\.jar" to="lib/\1.jar"/>
            </pathconvert>
            <copy todir="${build.etc}">
                <fileset dir="${src.root}/etc" includes="@{filename}"/>
            </copy>
            <manifest file="${build.etc}/@{filename}" mode="update">
                <attribute name="Implementation-Title" value="${app.name}"/>
                <attribute name="Implementation-Version" value="${build.version.major}.${build.version.minor}"/>
                <attribute name="Implementation-Vendor" value="${vendor.name}"/>
                <attribute name="Class-Path" value="@{pathPrefix} ${@{propertyPrefix}.libs.path}"/>
                <section/>
            </manifest>
        </sequential>
    </macrodef>

    <!--
      Package the SSB (JAR)
    -->
    <target name="package.client" unless="ssg.only" depends="package.client.jar, obfuscate.client"/>
    <target name="package.client.jar" unless="ssg.only" depends="compile">
        <!-- the client proxy jar -->
        <generate-manifest propertyPrefix="client" filename="Client.mf">
            <section>
                <attribute name="Main-Class" value="com.l7tech.proxy.gui.Main"/>
            </section>
        </generate-manifest>
        <jar jarfile="${build.dir}/Client.jar" manifest="${build.etc}/Client.mf">
            <fileset dir="${build.classes}">
                <exclude name="**/*.form"/>
                <exclude name="com/l7tech/internal/**/*"/>

                <!-- Omit the third-party crypto drivers unless we need to ship with one or more of them.  Including it causes testpackage to fail -->
                <exclude name="com/l7tech/common/security/prov/rsa/**/*"/>
                <exclude name="com/l7tech/common/security/prov/ncipher/**/*"/>
                <exclude name="com/l7tech/common/security/prov/entrust/**/*"/>
                <exclude name="com/l7tech/common/security/prov/tarari/**/*"/>
                <exclude name="com/l7tech/common/security/prov/luna/**/*"/>
                <exclude name="com/l7tech/common/security/prov/pkcs11/**/*"/>
                <!-- goes in lib/ext -->
                <exclude name="com/l7tech/common/security/TrustedCert**"/>
                <exclude name="com/l7tech/common/security/CertEntity**"/>
                <exclude name="com/l7tech/common/security/X509Entity**"/>
                <exclude name="com/l7tech/common/security/keystore/**/*"/>

                <!-- Tarari drivers not available in standalone Agent -->
                <exclude name="com/l7tech/common/xml/tarari/TarariUtil*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariFactories*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariMessageContextImpl*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/GlobalTarariContextImpl*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/SecureXsltSecurityManager.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariElementCursor*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariCompiledXpath*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariCompiledStylesheetImpl*.class" />
                <exclude name="com/l7tech/common/xml/tarari/TarariSchemaSource*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/TarariSchemaHandler*.class"/>
                <exclude name="com/l7tech/common/xml/tarari/util/**/*"/>

                <!-- SchemaEntry relies on NamedEntityImp -->
                <exclude name="com/l7tech/common/xml/schema/SchemaEntry*.class/"/>

                <!-- Exclude unless Log4j is used -->
                <exclude name="com/l7tech/common/util/Log4jJdkLogAppender.class"/>

                <exclude name="com/l7tech/common/audit/**/*"/>
                <exclude name="com/l7tech/common/alert/**/*"/>

                <exclude name="com/l7tech/policy/server/**/*"/>
                <exclude name="com/l7tech/policy/exporter/**/*"/>
                <exclude name="com/l7tech/policy/validator/RequestXpathAssertionValidator.class"/>
                <exclude name="com/l7tech/policy/validator/ValidatorFactory.class"/>

                <include name="com/l7tech/proxy/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/*"/>
                <exclude name="com/l7tech/common/security/rbac/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <exclude name="com/l7tech/policy/assertion/ext/**/*"/>
                <exclude name="com/l7tech/common/Authorizer.class"/>
            </fileset>
            <fileset dir="${src.root}/etc">
                <include name="login.config"/>
                <include name="bridgePolicyTemplates/*"/>
            </fileset>
        </jar>
    </target>

    <!--
      Package the SSM (JAR)
    -->
    <target name="package.manager.jar" depends="compile">
        <generate-manifest propertyPrefix="manager" filename="Manager.mf">
            <section>
                <attribute name="Main-Class" value="com.l7tech.console.Main"/>
            </section>
        </generate-manifest>
        <jar jarfile="${build.dir}/Manager.jar" manifest="${build.etc}/Manager.mf" index="true">
            <indexjars>
                <fileset dir="${src.root}/lib" casesensitive="yes">
                    <patternset refid="manager.libs"/>
                </fileset>
            </indexjars>
            <fileset dir="${build.classes}">
                <exclude name="**/*.form"/>
                <include name="**/*.xsd"/>
                <include name="**/*.dtd"/>
                <exclude name="com/l7tech/internal/**/*"/>

                <include name="com/l7tech/admin/Admin*.class"/>
                <exclude name="com/l7tech/logging/rmi/**/*"/>
                <exclude name="com/l7tech/policy/server/**/*"/>
                <include name="com/l7tech/identity/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <exclude name="com/l7tech/common/http/prov/apache/**/*"/>
                <exclude name="com/l7tech/common/security/prov/**/*"/>
                <exclude name="com/l7tech/common/security/saml/**/*Statement*"/>
                <exclude name="com/l7tech/common/security/saml/**/*Assertion*"/>
                <include name="com/l7tech/common/security/saml/SamlConstants.class"/>
                <exclude name="com/l7tech/common/message/**/*"/>
                <exclude name="com/l7tech/common/xml/saml/**/*"/>
                <exclude name="com/l7tech/common/xml/tarari/*.class"/>
                <include name="com/l7tech/common/xml/tarari/util/*.class" />
                <exclude name="com/l7tech/common/security/wstrust/**/*" />
                <include name="com/l7tech/common/security/TrustedCert*.class"/>
                <exclude name="com/l7tech/common/security/AesKey.class"/>
                <exclude name="com/l7tech/common/security/Jce*.class"/>
                <exclude name="com/l7tech/common/security/Rsa*.class"/>
                <exclude name="com/l7tech/common/util/Pkcs12*.class"/>
                <exclude name="com/l7tech/common/util/CertificateDownloader.class"/>
                <exclude name="com/l7tech/common/util/Log4jJdkLogAppender.class"/>
                <exclude name="com/l7tech/common/security/xml/processor/**/*"/>
                <exclude name="com/l7tech/common/security/xml/decorator/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/JmsReplyTypeMapper*.class"/>

                <include name="com/l7tech/cluster/ClusterNodeInfo.class"/>
                <include name="com/l7tech/cluster/ClusterStatusAdmin.class"/>
                <include name="com/l7tech/cluster/ClusterStatusAdmin*Exception.class"/>
                <include name="com/l7tech/cluster/ClusterStatusAdmin*ModuleInfo.class"/>
                <include name="com/l7tech/cluster/ServiceUsage.class"/>
                <include name="com/l7tech/cluster/GatewayStatus.class"/>
                <include name="com/l7tech/cluster/LogRequest.class"/>
                <include name="com/l7tech/cluster/ClusterProperty.class"/>
                <include name="com/l7tech/console/**/*"/>
                <include name="com/l7tech/logging/GenericLogAdmin.class"/>
                <include name="com/l7tech/logging/LogAdmin.class"/>
                <include name="com/l7tech/logging/SSGLogRecord.class"/>
                <include name="com/l7tech/logging/LogMessage.class"/>
                <include name="com/l7tech/logging/StatisticsRecord.class"/>
                <!-- <include name="com/l7tech/message/**/*"/> -->
                <include name="com/l7tech/message/Message.class"/>
                <include name="com/l7tech/message/Request.class"/>
                <include name="com/l7tech/message/Response.class"/>
                <include name="com/l7tech/objectmodel/*Exception.class"/>
                <include name="com/l7tech/objectmodel/Entity.class"/>
                <include name="com/l7tech/objectmodel/NamedEntity.class"/>
                <include name="com/l7tech/objectmodel/EntityHeader*.class"/>
                <include name="com/l7tech/objectmodel/IdentityHeader.class"/>
                <include name="com/l7tech/objectmodel/EntityType.class"/>
                <include name="com/l7tech/objectmodel/EntityManager.class"/>
                <include name="com/l7tech/objectmodel/ObjectPermission.class"/>
                <include name="com/l7tech/objectmodel/AnonymousEntityReference.class"/>
                <include name="com/l7tech/objectmodel/PersistentEntity.class"/>
                <include name="com/l7tech/objectmodel/imp/*"/>
                <include name="com/l7tech/objectmodel/alert/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/objectmodel/ObjectIdentity.class"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionsRegistrar.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionDescriptor.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Impl*"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertions.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Service*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Security*"/>
                <include name="com/l7tech/service/ServiceAdmin.class"/>
                <include name="com/l7tech/service/ServiceAdminPublic.class"/>
                <include name="com/l7tech/service/PublishedService*.class"/>
                <include name="com/l7tech/service/ServiceDocument.class"/>
                <include name="com/l7tech/service/SampleMessage.class"/>
                <include name="com/l7tech/service/ServiceStatistics.class"/>
                <include name="com/l7tech/service/MetricsBin.class"/>
                <include name="com/l7tech/service/MetricsSummaryBin.class"/>
                <include name="com/l7tech/service/ResolutionParameterTooLongException.class"/>
                <include name="com/l7tech/spring/remoting/rmi/**/*"/>
                <include name="com/l7tech/spring/remoting/http/**/*"/>
                <exclude name="com/l7tech/spring/remoting/http/SecureHttpFilter*.class"/>
                <exclude name="com/l7tech/spring/remoting/http/SecureRemoteInvocationExecutor*.class"/>
            </fileset>
        </jar>
    </target>

    <target name="package.manager.jar.pack200" depends="package.manager.jar" if="pack200" unless="ssg.only">

        <move file="${build.dir}/Manager.jar" tofile="${build.dir}/Manager.nopack.jar"/>

        <pack200 src="${build.dir}/Manager.nopack.jar"
                 destfile="${build.dir}/Manager.jar"
                 segmentlimit="-1"
                 repack="true"/>

        <delete file="${build.dir}/Manager.nopack.jar"/>
    </target>

    <target name="package.manager" depends="package.manager.jar, obfuscate.manager, package.manager.jar.pack200">

        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}" includes="Manager.jar"/>
        </signjar>

    </target>

    <!--
      Package the RandomXmlGenerator (Always invoked by hand)
    -->
    <target name="package.randomxmlgenerator"
            description="Compile and package the RandomXmlGenerator"
            depends="dev">
        <jar jarfile="${build.dir}/RandomXmlGenerator.jar">
            <manifest>
                <attribute name="Implementation-Title" value="${app.name}"/>
                <attribute name="Implementation-Version" value="${build.version.major}.${build.version.minor}"/>
                <attribute name="Implementation-Vendor" value="${vendor.name}"/>
                <attribute name="Main-Class" value="com.l7tech.skunkworks.xml.RandomXmlGenerator"/>
            </manifest>
            <fileset dir="${build.test.classes}">
                <include name="com/l7tech/skunkworks/xml/**/*"/>
            </fileset>
        </jar>
    </target>

    <!-- 
      Package GClient (Always invoked by hand)
    -->
    <patternset id="gclient.libs">
        <include name="**/axis.jar"/>
        <include name="**/0500-wsdl4j.jar"/>
        <include name="**/activation.jar"/>
        <include name="**/are.jar"/>
        <include name="**/bcprov-jdk15-135.jar"/>
        <include name="**/commons-codec-1.2.jar"/>
        <include name="**/commons-collections-2.1.1.jar"/>
        <include name="**/commons-discovery.jar"/>
        <include name="**/commons-httpclient-3.0.1.jar"/>
        <include name="**/commons-lang-1.0.1.jar"/>
        <include name="**/commons-logging-1.0.4.jar"/>
        <include name="**/concurrent-1.3.4.jar"/>
        <include name="**/dom4j-1.6.1.jar"/>
        <include name="**/FastInfoset.jar"/>
        <include name="**/forms_rt-l7p1.jar"/>
        <include name="**/jaxen-1.1-beta-10.jar"/>
        <include name="**/jaxrpc.jar"/>
        <include name="**/jms-1.1.jar"/>
        <include name="**/log4j-1.2.14.jar"/>
        <include name="**/mailapi-1.4.jar"/>
        <include name="**/policy-1.0.jar"/>
        <include name="**/qname.jar"/>
        <include name="**/saaj.jar"/>
        <include name="**/saaj-impl.jar"/>
        <include name="**/saxpath.jar"/>
        <include name="**/servlet-api.jar"/>
        <include name="**/spring-beans.jar"/>
        <include name="**/spring-context.jar"/>
        <include name="**/spring-core.jar"/>
        <include name="**/whirlycache-1.0.1.jar"/>
        <include name="**/xbean.jar"/>
        <include name="**/xbean-saml1_1.jar"/>
        <include name="**/xbean-saml2_0.jar"/>
        <include name="**/xbean-xenc-xmldsig.jar"/>
        <include name="**/xercesImpl.jar"/>
        <include name="**/xml4j.jar"/>
        <include name="**/xss4j*.jar"/>
    </patternset>
    <target name="package.gclient" depends="compile-test-forms, testpackage.init">
        <mkdir dir="${build.dir}/gclient"/>
        <mkdir dir="${build.dir}/gclient/lib"/>

        <copy todir="${build.dir}/gclient/lib">
            <fileset dir="${build.lib}">
                <patternset refid="gclient.libs"/>
            </fileset>
            <fileset dir="lib/test">
                <patternset refid="gclient.libs"/>
            </fileset>
        </copy>

        <echo level="info">Generating manifest for GClient.jar</echo>
        <generate-manifest propertyPrefix="gclient" filename="GClient.mf">
            <section>
                <attribute name="Main-Class" value="com.l7tech.skunkworks.gclient.GClient"/>
            </section>
        </generate-manifest>
        <echo level="info">Creating GClient.jar</echo>
        <jar jarfile="${build.dir}/gclient/GClient.jar" manifest="${build.etc}/GClient.mf">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/console/util/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/proxy/**/*"/>

                <exclude name="com/l7tech/common/Authorizer*.class"/>
                <exclude name="com/l7tech/common/alert/**/*"/>
                <exclude name="com/l7tech/common/audit/**/*"/>
                <exclude name="com/l7tech/common/gui/util/HelpUtil*.class"/>
                <exclude name="com/l7tech/common/security/TrustedCert*.class"/>
                <exclude name="com/l7tech/common/security/X509Entity*.class"/>
                <exclude name="com/l7tech/common/security/keystore/**/*"/>
                <exclude name="com/l7tech/common/security/prov/luna/**/*"/>
                <exclude name="com/l7tech/common/security/prov/ncipher/**/*"/>
                <exclude name="com/l7tech/common/security/prov/rsa/**/*"/>
                <exclude name="com/l7tech/common/security/rbac/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/**/*"/>
                <exclude name="com/l7tech/common/xml/tarari/**/*"/>
                <exclude name="com/l7tech/common/xml/schema/**/*"/>
                <exclude name="com/l7tech/console/util/ClusterLogWorker*.class"/>
                <exclude name="com/l7tech/console/util/ClusterStatusWorker*.class"/>
                <exclude name="com/l7tech/console/util/IconManager*.class"/>
                <exclude name="com/l7tech/console/util/TopComponents*.class"/>
                <exclude name="com/l7tech/console/util/jfree/**/*"/>
                <exclude name="com/l7tech/policy/assertion/ext/**/*"/>
                <exclude name="com/l7tech/policy/wssp/**/*"/>
                <exclude name="com/l7tech/proxy/BridgeServlet*.class"/>
                <exclude name="com/l7tech/proxy/ClientProxy*.class"/>
                <exclude name="com/l7tech/proxy/RequestHandler*.class"/>
                <exclude name="com/l7tech/proxy/gui/**/*"/>
                <exclude name="com/l7tech/proxy/resources/**/*"/>
            </fileset>
            <fileset dir="${build.test.classes}">
                <include name="com/l7tech/skunkworks/gclient/**/*"/>
            </fileset>
        </jar>

        <echo level="info">Testpackaging GClient.jar</echo>
        <fileset id="gclient.testpackage.fileset" dir="${build.dir}/gclient/lib">
            <patternset refid="gclient.libs"/>
        </fileset>
        <checkdeps jarfile="build/gclient/GClient.jar"
                   libfilesetref="gclient.testpackage.fileset"
                   resultproperty="testpackage.gclient.result"
                   ignoreclasses="com.l7tech.common.security.prov.luna.BouncyCastleToLunaProvider com.l7tech.common.security.prov.luna.LunaJceProviderEngine com.l7tech.common.security.prov.pkcs11.Pkcs11JceProviderEngine"/>
        <!-- This just stops idea complaining -->
        <property name="testpackage.gclient.result" value=""/>
        <condition property="testpackage.gclient.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.gclient.result}"/>
            </not>
        </condition>
        <fail if="testpackage.gclient.fail">GClient packaging test failed.</fail>        

        <echo level="info">Obfuscating GClient.jar</echo>
        <build-zkm propertyPrefix="gclient" libDir="build/gclient/lib"/>
        <Zelix scriptFileName="build/etc/gclient.zkm"
               logFileName="build/obfuscation/gclientobfuscation.log"
               trimLogFileName="build/obfuscation/gclientobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo level="info">Done obfuscating GClient.jar</echo>
        <copy tofile="build/gclient/GClient.jar" file="build/obfuscation/GClient.jar" overwrite="true"/>
    </target>


    <!--
      Package the LicenseGenerator (Aways invoked by hand)
    -->
    <target name="package.licensegenerator"
            description="Compile and packate the License Generator (also testpackage.licensegenerator)"
            depends="init, compile">
        <property name="licensegenerator.lib.dir" value="${src.root}/installer/LicenseGenerator-HEAD/lib"/>
        <mkdir dir="${licensegenerator.lib.dir}"/>

        <copy todir="${licensegenerator.lib.dir}">
            <fileset dir="${src.root}/lib">
                <patternset refid="licensegenerator.libs"/>
            </fileset>
        </copy>

        <generate-manifest propertyPrefix="licensegenerator" filename="LicenseGenerator.mf" pathPrefix=". ">
            <section>
                <attribute name="Main-Class" value="com.l7tech.internal.license.gui.LicenseGeneratorMain"/>
            </section>
        </generate-manifest>
        <jar jarfile="${build.dir}/LicenseGenerator.jar" manifest="${build.etc}/LicenseGenerator.mf">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/internal/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/server/GatewayFeatureSet*.class"/>

                <exclude name="com/l7tech/common/xml/saml/**/*"/>
                <exclude name="com/l7tech/common/xml/*SoapMessage*"/>
                <exclude name="com/l7tech/common/xml/tarari/**/*"/>
                <exclude name="com/l7tech/common/xml/*Wsdl*"/>
                <exclude name="com/l7tech/common/xml/*Xpath*"/>
                <exclude name="com/l7tech/common/util/*CheckInfo*"/>
                <exclude name="com/l7tech/common/util/*SoapFaultUtil*"/>
            </fileset>
        </jar>
        <copy file="${build.dir}/LicenseGenerator.jar" todir="${src.root}/installer/LicenseGenerator-HEAD/"/>
        <copy file="${src.root}/etc/LicenseGenerator.sh" todir="${src.root}/installer/LicenseGenerator-HEAD/"/>
        <chmod file="${src.root}/installer/LicenseGenerator-HEAD/LicenseGenerator.sh" perm="755"/>

        <tar destfile="${src.root}/installer/LicenseGenerator-HEAD.tar.gz"
             basedir="${src.root}/installer/"
             includes="LicenseGenerator-HEAD/**/*"
             compression="gzip"/>
    </target>

    <!--
      Build the windows installers
    -->
    <target name="package.installclients" unless="ssg.only" depends="package.installclient, package.installmanager">
    </target>

    <!--
      Task to create an NSI file with the correct libs / version
    -->
    <macrodef name="generate-nsi">
        <attribute name="nsiFile"/>
        <attribute name="nsiPath"/>
        <attribute name="propertyPrefix"/>
        <sequential>
            <copy file="${build.installer}/@{nsiPath}@{nsiFile}"
                  tofile="${build.etc}/@{nsiFile}"
                  overwrite="true"/>
            <fileset id="@{propertyPrefix}.build.lib.fileset" dir="${build.lib}" casesensitive="yes">
                <patternset refid="@{propertyPrefix}.libs"/>
            </fileset>
            <pathconvert property="@{propertyPrefix}.add.nsi.libs.path"
                         targetos="unix"
                         pathsep="&#x0A;  File "
                         refid="@{propertyPrefix}.build.lib.fileset">
                <mapper type="regexp" from=".*[/\\](.*)\.jar" to="&quot;\$\{BUILD_DIR}\\lib\\\1.jar&quot;"/>
            </pathconvert>
            <pathconvert property="@{propertyPrefix}.del.nsi.libs.path"
                         targetos="unix"
                         pathsep="&#x0A;  Delete "
                         refid="@{propertyPrefix}.build.lib.fileset">
                <mapper type="regexp" from=".*[/\\](.*)\.jar" to="&quot;\$INSTDIR\\lib\\\1.jar&quot;"/>
            </pathconvert>
            <replace file="${build.etc}/@{nsiFile}">
                <replacefilter token="%%%BUILD_VERSION%%%"
                               value="${build.version}"/>
                <replacefilter token="%%%JARFILE_FILE_LINES%%%"
                               value="%%%JARFILE_FILE_LINES%%%&#x0A;  File ${@{propertyPrefix}.add.nsi.libs.path}"/>
                <replacefilter token="%%%JARFILE_DELETE_LINES%%%"
                               value="%%%JARFILE_DELETE_LINES%%%&#x0A;  Delete ${@{propertyPrefix}.del.nsi.libs.path}"/>
            </replace>
        </sequential>
    </macrodef>

    <!--
      Build the SSB windows installer
    -->
    <target name="package.installclient" depends="package.client, package.installclient.work"/>
    <target name="package.installclient.work" depends="package.installclient.work.main, package.installclient.work.nsis"/>
    <target name="package.installclient.work.main" depends="package.readversion.unsafe">
        <!-- Copy Client JAR and its lib JARs -->
        <delete dir="${build.installer}/Client-${build.version}" failonerror="false"/>
        <delete file="${build.installer}/Client-${build.version}.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Client-${build.version}/lib"/>
        <copy todir="${build.installer}/Client-${build.version}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.lib}">
                <patternset refid="client.libs"/>
            </fileset>
        </copy>
        <copy file="${build.dir}/Client.jar"
              tofile="${build.installer}/Client-${build.version}/Client.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Client.sh"
              tofile="${build.installer}/Client-${build.version}/Client.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Client-${build.version}/Client.sh" perm="755"/>

        <!-- Config files -->
        <copy file="${src.root}/src/com/l7tech/proxy/resources/logging.properties"
              todir="${build.installer}/Client-${build.version}"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Help files -->
        <unzip src="${src.root}/webhelp/ssb/help.zip"
               dest="${build.installer}/Client-${build.version}"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Client-${build.version}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Client-${build.version}/Client.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Client-${build.version}/**/*"/>
                <exclude name="Client-${build.version}/Client.sh"/>
            </tarfileset>
        </tar>
    </target>
    <target name="package.installclient.work.nsis" if="makensis.enabled">
        <!-- Update NSI file -->
        <generate-nsi nsiFile="Client.nsi"
                      nsiPath="proxy/win32/"
                      propertyPrefix="client"/>

        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${build.installer}/proxy/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="../../../build/etc/Client.nsi"/>
        </exec>

    </target>

    <!--
      Build the SSM windows installer
      - Copy required JAR files
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
      - Create distribution TAR
    -->
    <target name="package.installmanager" depends="package.manager, package.installmanager.work"/>
    <target name="package.installmanager.work" depends="package.installmanager.work.main, package.installmanager.work.nsis"/>
    <target name="package.installmanager.work.main" depends="package.readversion.unsafe">
        <!-- Copy Manager JAR and its lib JARs -->
        <delete dir="${build.installer}/Manager-${build.version}" failonerror="false"/>
        <delete file="${build.installer}/Manager-${build.version}.tar.gz" failonerror="false"/>
        <mkdir dir="${build.installer}/Manager-${build.version}/lib"/>
        <copy todir="${build.installer}/Manager-${build.version}/lib" preservelastmodified="true" granularity="2000">
            <fileset dir="${build.lib}">
                <patternset refid="manager.libs"/>
            </fileset>
        </copy>
        <copy file="${build.dir}/Manager.jar"
              tofile="${build.installer}/Manager-${build.version}/Manager.jar"
              preservelastmodified="true"
              granularity="2000"/>

        <!-- Start script -->
        <copy file="${src.root}/etc/Manager.sh"
              tofile="${build.installer}/Manager-${build.version}/Manager.sh"
              preservelastmodified="true"
              granularity="2000"/>
        <chmod file="${build.installer}/Manager-${build.version}/Manager.sh" perm="555"/>

        <!-- Help files -->
        <unzip src="${src.root}/webhelp/ssm/help.zip"
               dest="${build.installer}/Manager-${build.version}"/>

        <!-- Create distro TAR -->
        <tar destfile="${build.installer}/Manager-${build.version}.tar.gz"
             compression="gzip">
            <tarfileset dir="${build.installer}" mode="555" username="build" group="build">
                <include name="Manager-${build.version}/Manager.sh"/>
            </tarfileset>
            <tarfileset dir="${build.installer}" mode="444" username="build" group="build">
                <include name="Manager-${build.version}/**/*"/>
                <exclude name="Manager-${build.version}/Manager.sh"/>
            </tarfileset>
        </tar>
    </target>
    <target name="package.installmanager.work.nsis" if="makensis.enabled">
        <!-- Update NSI file -->
        <generate-nsi nsiFile="Manager.nsi"
                      nsiPath="console/win32/"
                      propertyPrefix="manager"/>

        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${build.installer}/console/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="../../../build/etc/Manager.nsi"/>
        </exec>
    </target>

    <!-- comment out package.installgateway.work.nsis depends item, bug 3703, as Gateway exe not supported post-3.7 -->
    <!-- target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.nsis, package.installgateway.work.rpm"/ -->

    <target name="package.installgateway.work" depends="package.gateway, INTERNAL-ssg-install, package.installgateway.work.rpm"/>
    <!--
      Build the SSG windows installer
      - Update NSI (with jars)
      - Generate start script from template
      - Run makensis (wine?)
    -->
    <target name="package.installgateway.work.nsis" depends="package.readversion.unsafe"  if="makensis.enabled">
        <!-- Update NSI file -->
        <generate-nsi nsiFile="SSG.nsi"
                      nsiPath="server/win32/"
                      propertyPrefix="gateway"/>

        <!-- Run makensis -->
        <exec executable="${build.install.compiler}"
              dir="${build.installer}/server/win32/"
              failonerror="true">
            <arg value="/NOCD"/>
            <arg value="/DJ2RE_DIR=${install.wintarballs}"/>
            <arg value="/XSetCompressor bzip2"/>
            <arg value="../../../build/etc/SSG.nsi"/>
        </exec>
    </target>

    <target name="package.installgateway.work.rpm.check" if="makerpm.enabled">
        <available property="package.installgateway.work.rpm.sourceavailable" file="${tarball}"/>
    </target>

    <!--
      Set the release for the build, by default this is the date with "svn" prepended.

      Other (optional) additions could be:
        - .rc1 (release candidate)
        - .m1  (milestone)

      This gets added after any existing release number in the spec file (e.g 0.1.svn20060201)
    -->
    <target name="package.checkrelease" unless="ssg.install.official">
        <property name="build.release" value=".svn${DSTAMP}"/>
    </target>

    <!--
      Create the SSG RPM (Core)
    -->
    <target name="package.installgateway.work.rpm.core" depends="package.installgateway.work.rpm.check, package.readversion, package.checkrelease" if="package.installgateway.work.rpm.sourceavailable">
        <!-- create directories -->
        <mkdir dir="${build.rpm}/BUILD"/>
        <mkdir dir="${build.rpm}/RPMS"/>
        <mkdir dir="${build.rpm}/SOURCES"/>
        <mkdir dir="${build.rpm}/SPECS"/>
        <mkdir dir="${build.rpm}/SRPMS"/>

        <!-- Set release as empty if not yet set -->
        <property name="build.release" value=""/>
        <property name="package.installgateway.work.rpmspec" value="etc/ssg.spec"/>
        <echo level="info">Using spec file : ${package.installgateway.work.rpmspec}</echo>
        <echo level="info">Using source TGZ: ${tarball}</echo>
        <echo level="info">Using source JDK: ${install.jdk.tar.gz}</echo>
        <copy file="${tarball}" tofile="${build.rpm}/SOURCES/ssg.tar.gz"/>
        <copy file="${install.jdk.tar.gz}" tofile="${build.rpm}/SOURCES/jdk.tar.gz"/>
        <copy file="${package.installgateway.work.rpmspec}" todir="${build.rpm}/SPECS">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="(?&lt;=^Version: )[0-9\._\-a-z]{1,10}" replace="${build.version}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^Release: [0-9]{1,10})" replace="${build.release}" flags="m"/>
                    <replaceregex pattern="(?&lt;=^[a-zA-Z &quot;]{0,80}Layer 7 SecureSpan\(tm\) Gateway v)[0-9\._\-a-z]{1,10}" replace="${build.version}" flags="m"/>
                </tokenfilter>
            </filterchain>
        </copy>

        <rpm specFile="ssg.spec" topDir="${build.rpm}" command="-bb --target i386"/>

        <condition property="package.installgateway.work.rpm.x86_64.required">
          <isset property="install.jdk64.tar.gz"/>
        </condition>
    </target>
   
    <!--
      Create the SSG RPM (x86_64)
    -->
    <target name="package.installgateway.work.rpm.x86_64" depends="package.installgateway.work.rpm.core" if="package.installgateway.work.rpm.x86_64.required">
        <echo level="info">Using source JDK: ${install.jdk64.tar.gz}</echo>
        <copy file="${install.jdk64.tar.gz}" tofile="${build.rpm}/SOURCES/jdk.tar.gz" overwrite="true"/>
        <rpm specFile="ssg.spec" topDir="${build.rpm}" command="-bb --target x86_64"/>
    </target>
 
    <!--
      Create the SSG RPM
    -->
    <target name="package.installgateway.work.rpm" depends="package.installgateway.work.rpm.core, package.installgateway.work.rpm.x86_64">
        <echo level="info">RPM build completed.</echo>
    </target>

    <!--
      Build the Luna provider (JAR)
    -->
    <target name="package.bcluna-jce" depends="compile">
        <jar jarfile="${build.dir}/bcluna-jce.jar" manifest="${src.root}/etc/bcluna-jce.mf">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/common/security/prov/luna/BouncyCastleToLunaProvider.class"/>
            </fileset>
        </jar>
    </target>

    <!-- Package the ssg flasher utility -->
    <target name="package.ssgflasher" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/migration"/>
        <mkdir dir="${build.dir}/migration/lib"/>
        <mkdir dir="${build.dir}/migration/cfg"/>
        <copy todir="${build.dir}/migration">
            <fileset dir="${src.root}/etc">
                <include name="ssgmigration.sh"/>
                <include name="ssgmigration.cmd"/>
                <include name="migrationlogging.properties"/>
            </fileset>
        </copy>
        <chmod file="${build.dir}/migration/ssgmigration.sh" perm="755"/>
        <copy todir="${build.dir}/migration/cfg">
            <fileset dir="${src.root}/etc">
                <include name="grandmaster_flash"/>
            </fileset>
        </copy>
        <generate-manifest propertyPrefix="ssgflasher" filename="SSGMigration.mf" pathPrefix=". ">
            <section>
                <attribute name="Main-Class" value="com.l7tech.server.flasher.FlashUtilityLauncher"/>
            </section>
        </generate-manifest>
        <jar jarfile="${build.dir}/migration/SSGMigration.jar"  manifest="${build.etc}/SSGMigration.mf">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/server/flasher/**/*"/>
                <include name="com/l7tech/common/BuildInfo*"/>
                <include name="com/l7tech/common/License.class"/>
                <include name="com/l7tech/common/LicenseException.class"/>
                <include name="com/l7tech/common/InvalidLicenseException.class"/>
                <include name="com/l7tech/common/security/xml/SimpleSecurityTokenResolver*.class"/>
                <include name="com/l7tech/common/security/xml/SecurityTokenResolver.class"/>
                <include name="com/l7tech/common/util/CausedIOException*"/>
                <include name="com/l7tech/common/util/FileUtils*"/>
                <include name="com/l7tech/common/util/ResourceUtils*"/>
                <include name="com/l7tech/common/util/XmlUtil*"/>
                <include name="com/l7tech/common/util/BufferPool*"/>
                <include name="com/l7tech/common/util/PaddingCharSequence*"/>
                <include name="com/l7tech/common/xml/TooManyChildElementsException*"/>
                <include name="com/l7tech/common/xml/InvalidDocumentFormatException*"/>
                <include name="com/l7tech/common/io/BufferPoolByteArrayOutputStream*"/>
                <include name="com/l7tech/server/config/LinuxSpecificFunctions*"/>
                <include name="com/l7tech/server/config/OSDetector*"/>
                <include name="com/l7tech/server/config/*SpecificFunctions*"/>
                <include name="com/l7tech/server/config/WindowsSpecificFunctions*"/>
                <include name="com/l7tech/server/config/PropertyHelper*"/>
                <include name="com/l7tech/server/config/PropertyHelper*"/>
                <include name="com/l7tech/server/config/beans/ConfigurationBean*"/>
                <include name="com/l7tech/server/config/beans/SsgDatabaseConfigBean*"/>
                <include name="com/l7tech/server/config/beans/BaseConfigurationBean*"/>
                <include name="com/l7tech/server/config/db/DBActions*"/>
                <include name="com/l7tech/server/config/db/DBInformation*"/>
                <include name="com/l7tech/server/config/db/DbVersion*"/>
                <include name="com/l7tech/server/config/db/CheckSSGDatabase*"/>
                <include name="com/l7tech/server/config/exceptions/UnsupportedOsException*"/>
                <include name="com/l7tech/server/config/PartitionActions*"/>
                <include name="com/l7tech/server/partition/PartitionInformation*"/>
                <include name="com/l7tech/server/partition/PartitionManager*"/>
            </fileset>
        </jar>

        <copy todir="${build.dir}/migration/lib">
            <fileset dir="${build.lib}">
                <patternset refid="ssgflasher.libs"/>
            </fileset>
        </copy>
    </target>

    <!--
      Package all configuration wizards
    -->
    <target name="package.configwiz.all" depends="package.configwiz, package.systemconfigwiz"/>

    <!--
      Package the main configuration wizard (JAR)
    -->
    <target name="package.configwiz" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/configwizard"/>
        <mkdir dir="${build.dir}/configwizard/lib"/>

        <copy todir="${build.dir}/configwizard/lib">
            <fileset dir="${build.lib}">
                <patternset refid="configurationwizard.libs"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/configwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssgconfig.cmd"/>
                <include name="ssgconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <replace file="${build.dir}/configwizard/configlogging.properties" token="LOGFILE_NAME" value="ssgconfig%g.log"/>

        <generate-manifest propertyPrefix="configurationwizard" filename="ConfigWizard.mf" pathPrefix=". ">
            <section>
                <attribute name="Main-Class" value="com.l7tech.server.config.ConfigurationWizardLauncher"/>
            </section>
        </generate-manifest>
        <classfileset id="package.configwiz.classfileset" dir="${build.classes}">
            <!-- Entry points, GUI, console and API -->
            <root classname="com.l7tech.server.config.ConfigurationWizardLauncher" />

            <!-- Providers -->
            <root classname="com.l7tech.common.security.prov.bc.BouncyCastleJceProviderEngine" />
            <root classname="com.l7tech.common.security.prov.luna.BouncyCastleToLunaProvider" />
            <root classname="com.l7tech.common.security.prov.luna.LunaJceProviderEngine" />
            <root classname="com.l7tech.common.security.prov.pkcs11.Pkcs11JceProviderEngine" />
            <root classname="com.l7tech.common.util.DnParserBc" />
            <root classname="com.l7tech.common.util.SingleLineLogFormatter" />
        </classfileset>
        <jar jarfile="${build.dir}/configwizard/ConfigWizard.jar" manifest="${build.etc}/ConfigWizard.mf">
            <fileset refid="package.configwiz.classfileset"/>
            <fileset dir="${build.classes}">
                <include name="com/l7tech/server/config/resources/**/*"/>
            </fileset>
        </jar>
    </target>

    <target name="package.updatewiz" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/updatewizard"/>
        <mkdir dir="${build.dir}/updatewizard/lib"/>

        <copy todir="${build.dir}/updatewizard/lib">
            <fileset dir="${build.lib}">
                <patternset refid="updatewizard.libs"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/updatewizard">
            <fileset dir="${src.root}/etc">
                <include name="ssgupdatewizard.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <replace file="${build.dir}/updatewizard/configlogging.properties" token="LOGFILE_NAME" value="updatewizard%g.log"/>

        <generate-manifest propertyPrefix="updatewizard" filename="UpdateWizard.mf" pathPrefix=". ">
            <section>
                <attribute name="Main-Class" value="com.l7tech.server.config.packageupdater.PackageUpdateWizardLauncher"/>
            </section>
        </generate-manifest>
        <classfileset id="package.updatewiz.classfileset" dir="${build.classes}">
            <!-- Entry points -->
            <root classname="com.l7tech.server.config.packageupdater.PackageUpdateWizardLauncher" />
        </classfileset>
        <jar jarfile="${build.dir}/updatewizard/UpdateWizard.jar" manifest="${build.etc}/UpdateWizard.mf">
            <fileset refid="package.updatewiz.classfileset"/>
        </jar>
    </target>

    <!--
      Package the system configuration wizard (JAR)
    -->
    <target name="package.systemconfigwiz" unless="ssg.only" depends="compile">
        <mkdir dir="${build.dir}/sysconfigwizard"/>
        <mkdir dir="${build.dir}/sysconfigwizard/lib"/>
        <mkdir dir="${build.dir}/sysconfigwizard/configfiles"/>

        <copy todir="${build.dir}/sysconfigwizard/lib">
            <fileset dir="${build.lib}">
                <patternset refid="systemconfigurationwizard.libs"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/sysconfigwizard">
            <fileset dir="${src.root}/etc">
                <include name="ssg_sys_config.pl"/>
                <include name="systemconfig.sh"/>
                <include name="configlogging.properties"/>
            </fileset>
        </copy>

        <replace file="${build.dir}/sysconfigwizard/configlogging.properties" token="LOGFILE_NAME" value="ssg_networkingconfig_log.txt"/>

        <generate-manifest propertyPrefix="systemconfigurationwizard" filename="SystemConfigWizard.mf" pathPrefix=". ">
            <section>
                <attribute name="Main-Class" value="com.l7tech.server.config.systemconfig.SysConfigWizardLauncher"/>
            </section>
        </generate-manifest>
        <classfileset id="package.systemconfigwiz.classfileset" dir="${build.classes}">
            <!-- Entry points, GUI, console and API -->
            <root classname="com.l7tech.server.config.systemconfig.SysConfigWizardLauncher" />

            <!-- Providers -->
            <root classname="com.l7tech.common.util.SingleLineLogFormatter" />
        </classfileset>
        <jar jarfile="${build.dir}/sysconfigwizard/SystemConfigWizard.jar" manifest="${build.etc}/SystemConfigWizard.mf">
            <fileset refid="package.systemconfigwiz.classfileset"/>
        </jar>
    </target>

    <!--
      Package the signed Layer 7 API (JAR)
    -->
    <target name="package.api" depends="compile">
        <!--
           ** Layer7 API jar, pack and sign
        -->
        <jar jarfile="${build.dir}/layer7-api.jar" manifest="${src.root}/etc/layer7-api.mf">
            <fileset dir="${build.classes}">
                <include name="com/l7tech/policy/assertion/UsesVariables.class"/>
                <include name="com/l7tech/policy/assertion/SetsVariables.class"/>
                <include name="com/l7tech/policy/variable/VariableMetadata.class"/>
                <include name="com/l7tech/policy/assertion/ext/AssertionEditor.class"/>
                <include name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.class"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionUI.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAuditor.class"/>
                <include name="com/l7tech/policy/assertion/ext/EditListener.class"/>
                <include name="com/l7tech/policy/assertion/ext/SecurityContext.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceRequest.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceResponse.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.class"/>
            </fileset>
        </jar>

        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}" includes="layer7-api.jar"/>
        </signjar>

        <mkdir dir="${build.dir}/docs"/>

        <!--
          Accompanying javadoc for layer7-api
        -->
        <javadoc
                destdir="${build.dir}/docs/layer7-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 External API">

            <fileset dir="${src.root}/src/" defaultexcludes="yes">
                <patternset refid="layer7api.sources"/>
                <!--
                  Leave some classes undocumented; they appear in the api jar,
                  but aren't supposed to be used by 3rd party devlopers
                -->
                <exclude name="com/l7tech/policy/assertion/ext/CustomAuditor.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/Category.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditor.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/AssertionEditorSupport.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertionUI.java"/>
                <exclude name="com/l7tech/policy/assertion/ext/EditListener.java"/>
            </fileset>
        </javadoc>

    </target>

    <target name="bridgeapi.javadoc" depends="init">
        <mkdir dir="${build.dir}/docs"/>
        <javadoc
                destdir="${build.dir}/docs/bridge-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Technologies API Specification"
                doctitle="Layer 7 Technologies API Specification"
                header="&lt;b&gt;Layer 7 Technologies&lt;/b&gt;"
                bottom="&lt;font size=-1&gt;Copyright (c) 2007, Layer 7 Technologies&lt;/font&gt;"
                 >

            <fileset dir="${src.root}/src/" defaultexcludes="yes">
                <patternset refid="bridgeapi.sources"/>
            </fileset>
            
            <classpath refid="project.classpath"/>
        </javadoc>
    </target>

    <target name="managerapi.javadoc" depends="init">
        <mkdir dir="${build.dir}/docs"/>
        <javadoc
                destdir="${build.dir}/docs/manager-api"
                version="true"
                author="false"
                use="true"
                public="true"
                windowtitle="Layer 7 Manager API">

            <fileset dir="${src.root}/src/" defaultexcludes="yes">
                <patternset refid="managerapi.sources"/>
            </fileset>
            
            <classpath refid="project.classpath"/>
        </javadoc>
    </target>

    <target name="zip.api" depends="package.api,bridgeapi.javadoc">
        <!-- package bridge api for distribution -->
        <zip destfile="${build.dir}/BridgeAPI-${build.version}.zip" basedir="${build.dir}/docs" includes="bridge-api/**" />

        <!-- package layer7 api for distribution -->
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}">
          <fileset dir="${src.root}/CustomAssertionSample/">
            <include name="*.txt"/>
            <include name="*.pdf"/>
          </fileset>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc/html"/>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/javadoc/html">
          <fileset dir="${build.dir}/docs/layer7-api"/>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/lib"/>
        <copy file="${build.dir}/layer7-api.jar" tofile="${build.dir}/CustomAssertionAPI-${build.version}/lib/layer7-api.jar"/>


        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>
        <copy file="${src.root}/CustomAssertionSample/build.sh" todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>
        <copy file="${src.root}/CustomAssertionSample/build.xml" todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample"/>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/resources"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/tools"/>
        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/src"/>

        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/resources">
          <fileset dir="${src.root}/CustomAssertionSample/resources"/>
        </copy>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/tools">
          <fileset dir="${src.root}/CustomAssertionSample/tools"/>
        </copy>
        <copy todir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/src">
          <fileset dir="${src.root}/CustomAssertionSample/src"/>
        </copy>

        <mkdir dir="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/lib"/>
        <copy file="${build.dir}/layer7-api.jar" tofile="${build.dir}/CustomAssertionAPI-${build.version}/TrafficLoggerSample/lib/layer7-api.jar"/>

        <zip destfile="${build.dir}/CustomAssertion_dev_kit-${build.version}.zip" basedir="${build.dir}" includes="CustomAssertionAPI-${build.version}/**" />
    </target>

    <!--
      Builds all the modules.
    -->
    <target name="package.modules" unless="ssg.only" depends="compile">
        <echo level="info">Building modules</echo>
        <!--
          NOTE: using subant here because if we use ant it can mess up the
          base directory for the modules (which also use subant)
        -->
        <subant target="package" inheritAll="false" verbose="true">
            <fileset dir="." includes="modules/build.xml"/>
            <propertyset>
                <propertyref name="build.version"/>
            </propertyset>
        </subant>
    </target>

    <!--
      Cleans all the modules.
    -->
    <target name="clean.modules" unless="ssg.only">
        <echo level="info">Cleaning modules</echo>
        <!--
          NOTE: using subant here because if we use ant it can mess up the
          base directory for the modules (which also use subant)
        -->
        <subant target="clean" inheritAll="false" verbose="true">
            <fileset dir="." includes="modules/build.xml"/>
        </subant>
    </target>

    <!--
      Ensure that all classes in the various jar files are loadable when the classpath
      contains only the jars and their declared dependency jars.
    -->
    <target name="testpackage" description="Test classpaths for packages." depends="testpackage.work, testpackage.report">
        <checkfail/>
    </target>

    <target name="testpackage.report"
            depends="testpackage.report.client,
                     testpackage.report.manager,
                     testpackage.report.configwizard,
                     testpackage.report.sysconfigwizard,
                     testpackage.report.flasher"/>

    <target name="testpackage.report.client" if="testpackage.client.fail">
        <echo level="warning">Client package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <target name="testpackage.report.manager" if="testpackage.manager.fail">
        <echo level="warning">Manager package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <target name="testpackage.report.configwizard" if="testpackage.configwizard.fail">
        <echo level="warning">ConfigWizard package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <target name="testpackage.report.sysconfigwizard" if="testpackage.sysconfigwizard.fail">
        <echo level="warning">SysConfigWizard package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <target name="testpackage.report.flasher" if="testpackage.flasher.fail">
        <echo level="warning">SSG Flasher package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <target name="testpackage.report.api" if="testpackage.api.fail">
        <echo level="warning">Layer 7 API package test failed.</echo>
        <property name="fail" value="true"/>
    </target>

    <macrodef name="checkdeps">
        <attribute name="libfilesetref"/>
        <attribute name="jarfile"/>
        <attribute name="resultproperty"/>
        <attribute name="ignoreclasses" default=""/>
        <attribute name="failpackages" default=""/>
        <sequential>
            <java classname="com.l7tech.tools.JarChecker" fork="true" resultproperty="@{resultproperty}">
                <classpath>
                    <pathelement path="tools"/>
                    <fileset refid="@{libfilesetref}"/>
                    <pathelement location="@{jarfile}"/>
                </classpath>
                <sysproperty key="java.awt.headless" value="true"/>
                <sysproperty key="com.l7tech.tools.JarChecker.failpackages" value="@{failpackages}"/>
                <arg value="@{jarfile}"/>
                <arg line="@{ignoreclasses}"/>
            </java>
        </sequential>
    </macrodef>

    <target name="testpackage.work" depends="testpackage.client, testpackage.manager, testpackage.config, testpackage.api"/>

    <target name="testpackage.init">
        <javac srcdir="tools" destdir="tools" debug="on" optimize="off"
               deprecation="on" verbose="no"/>
    </target>

    <target name="testpackage.client" depends="testpackage.init, package.client.jar">
        <!-- Testpackage for SecureSpan XML VPN Client -->
        <fileset id="client.testpackage.fileset" dir="${build.lib}">
            <patternset refid="client.libs"/>
        </fileset>
        <checkdeps jarfile="build/Client.jar"
                   libfilesetref="client.testpackage.fileset"
                   resultproperty="testpackage.client.result"/>
        <!-- This just stops idea complaining -->
        <property name="testpackage.client.result" value=""/>
        <condition property="testpackage.client.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.client.result}"/>
            </not>
        </condition>
    </target>

    <target name="testpackage.manager" depends="testpackage.init, package.manager.jar">
        <!-- Testpackage for SecureSpan Manager -->
        <fileset id="manager.testpackage.fileset" dir="${build.lib}">
            <patternset refid="manager.libs"/>
        </fileset>
        <checkdeps jarfile="build/Manager.jar"
                   libfilesetref="manager.testpackage.fileset"
                   resultproperty="testpackage.manager.result"/>
        <!-- This just stops idea complaining -->
        <property name="testpackage.manager.result" value=""/>
        <condition property="testpackage.manager.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.manager.result}"/>
            </not>
        </condition>
    </target>

    <target name="testpackage.api" depends="testpackage.init, package.api">
        <!-- Testpackage for Layer 7 API -->
        <fileset id="api.testpackage.fileset" dir="${build.lib}">
            <patternset refid="api.libs"/>
        </fileset>
        <checkdeps jarfile="build/layer7-api.jar"
                   libfilesetref="api.testpackage.fileset"
                   resultproperty="testpackage.api.result"/>

        <!-- This just stops idea complaining -->
        <property name="testpackage.api.result" value=""/>
        <condition property="testpackage.api.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.api.result}"/>
            </not>
        </condition>
    </target>

    <target name="testpackage.config" depends="testpackage.init, package.configwiz, package.systemconfigwiz, package.ssgflasher">
        <!-- Testpackage for Configuration Wizard -->
        <fileset id="configwizard.testpackage.fileset" dir="${build.lib}">
            <patternset refid="configurationwizard.libs"/>
        </fileset>
        <checkdeps jarfile="build/configwizard/ConfigWizard.jar"
                   libfilesetref="configwizard.testpackage.fileset"
                   failpackages="com.l7tech.admin com.l7tech.cluster com.l7tech.internal com.l7tech.service com.l7tech.spring"
                   resultproperty="testpackage.configwizard.result"
                   ignoreclasses="com.l7tech.common.security.prov.luna.BouncyCastleToLunaProvider com.l7tech.common.security.prov.luna.LunaJceProviderEngine com.l7tech.common.security.prov.pkcs11.Pkcs11JceProviderEngine"/>

        <!-- This just stops idea complaining -->
        <property name="testpackage.configwizard.result" value=""/>
        <condition property="testpackage.configwizard.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.configwizard.result}"/>
            </not>
        </condition>

        <!-- Testpackage for System Configuration Wizard -->
        <fileset id="sysconfigwizard.testpackage.fileset" dir="${build.lib}">
            <patternset refid="systemconfigurationwizard.libs"/>
        </fileset>
        <checkdeps jarfile="build/sysconfigwizard/SystemConfigWizard.jar"
                   libfilesetref="sysconfigwizard.testpackage.fileset"
                   failpackages="com.l7tech.admin com.l7tech.cluster com.l7tech.internal com.l7tech.service com.l7tech.spring"
                   resultproperty="testpackage.sysconfigwizard.result"/>

        <!-- This just stops idea complaining -->
        <property name="testpackage.sysconfigwizard.result" value=""/>
        <condition property="testpackage.sysconfigwizard.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.sysconfigwizard.result}"/>
            </not>
        </condition>

        <!-- Testpackage for the flasher utility -->
        <fileset id="flasher.testpackage.fileset" dir="${build.lib}">
            <patternset refid="ssgflasher.libs"/>
        </fileset>
        <checkdeps jarfile="build/migration/SSGMigration.jar"
                   libfilesetref="flasher.testpackage.fileset"
                   resultproperty="testpackage.flasher.result"
                   ignoreclasses="com.l7tech.common.security.prov.luna.LunaJceProviderEngine"
        />
        <!-- This just stops idea complaining -->
        <property name="testpackage.flasher.result" value=""/>
        <condition property="testpackage.flasher.fail">
            <not>
                <equals arg1="0" arg2="${testpackage.flasher.result}"/>
            </not>
        </condition>
    </target>

    <!--
      Test LicenseGenerator package.  Always invoked by hand.
    -->
    <target name="testpackage.licensegenerator" depends="package.licensegenerator">
        <javac srcdir="tools" destdir="tools" debug="on" optimize="off"
               deprecation="on" verbose="no"/>

        <fileset id="licensegenerator.testpackage.fileset" dir="${build.lib}">
            <patternset refid="licensegenerator.libs"/>
        </fileset>

        <checkdeps jarfile="build/LicenseGenerator.jar"
                   libfilesetref="licensegenerator.testpackage.fileset"
                   resultproperty="testpackage.licensegenerator.result"/>
    </target>

    <!--
      Task to check if the build should be failed
    -->
    <macrodef name="checkfail">
        <sequential>
            <fail if="fail">Exiting due to build failures.</fail>
        </sequential>
    </macrodef>

    <target name="prepare.jms" if="dev.build" depends="prepare.jms.mqseries, prepare.jms.tibco"/>

    <target name="prepare.db" depends="
        prepare.db.oracle8,
        prepare.db.oracle9,
        prepare.db.oracle10,
        prepare.db.mysql,
        prepare.db.postgres
    "/>

    <!--
      Task to copy jars from the given path to the build/lib directory
    -->
    <macrodef name="prepare-named-libs">
        <attribute name="name"/>
        <attribute name="dir"/>
        <sequential>
            <echo level="info">Copying @{name} Jars from @{dir} to ${build.lib}</echo>
            <copy todir="${build.lib}">
                <fileset dir="@{dir}">
                    <include name="*.jar"/>
                    <include name="*.zip"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <target name="prepare.jms.mqseries" if="include.jms.mqseries">
        <prepare-named-libs name="MQSeries" dir="${src.root}/lib/gateway/jms/mqseries"/>
    </target>

    <target name="prepare.jms.tibco" if="include.jms.tibco">
        <prepare-named-libs name="Tibco EMS" dir="${src.root}/lib/gateway/jms/tibco"/>
    </target>

    <target name="prepare.db.mysql" if="db.mysql">
        <prepare-named-libs name="MySQL" dir="${src.root}/lib/gateway/jdbc/mysql"/>
    </target>

    <target name="prepare.db.postgres" if="db.postgres">
        <prepare-named-libs name="PostgreSQL" dir="${src.root}/lib/gateway/jdbc/postgres"/>
    </target>

    <target name="prepare.db.oracle8" if="db.oracle8">
        <prepare-named-libs name="Oracle 8" dir="${src.root}/lib/gateway/jdbc/oracle8"/>
    </target>

    <target name="prepare.db.oracle9" if="db.oracle9">
        <prepare-named-libs name="Oracle 9" dir="${src.root}/lib/gateway/jdbc/oracle9"/>
    </target>

    <target name="prepare.db.oracle10" if="db.oracle10">
        <prepare-named-libs name="Oracle 10" dir="${src.root}/lib/gateway/jdbc/oracle10"/>
    </target>

    <!--
      NOTE: Don't use if="include.systinet" here since the JARs are required for the SSM.
    -->
    <target name="prepare.systinet">
        <prepare-named-libs name="Systinet" dir="${src.root}/lib/gateway/uddi/systinet"/>
    </target>

    <!--
      Core prepare target
    -->
    <target name="prepare.base" depends="init">
        <!-- time stamp -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.test.classes}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <mkdir dir="${javadoc.home}"/>

        <!-- lib -->
        <copy todir="${build.lib}" flatten="true" preservelastmodified="true">
            <fileset dir="${src.root}/lib">
                <include name="*.jar"/>
                <include name="*.zip"/>
                <!-- the default crypto provider -->
                <include name="crypto/bc/bcprov*.jar"/>
                <include name="gateway/cluster/*.jar"/>
                <include name="gateway/adminws/*.jar"/>
                <include name="gateway/config/*.jar"/>
                <include name="gateway/ftp/*.jar"/>

                <exclude name="**/CVS/*"/>
                <exclude name="**/ant.jar"/>
                <exclude name="**/ant-contrib.jar"/>
                <exclude name="**/optional.jar"/>
                <exclude name="**/*junit.jar"/>
            </fileset>
        </copy>

        <!-- the web.xml -->
        <copy todir="${build.etc}">
            <fileset dir="${src.root}/etc">
                <include name="web.xml"/>
                <include name="testweb.xml"/>
            </fileset>
        </copy>

        <!-- Resources -->
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <!-- <include name="hibernate.cfg.xml"/> -->
                <include name="hibernate.properties" if="dev.build"/>
            </fileset>

            <fileset dir="${src.root}/etc/db">
                <include name="SSG.hbm.xml"/>
                <include name="rbac.hbm.xml"/>
                <include name="audit.hbm.xml"/>
                <include name="identityMapping.hbm.xml"/>
                <include name="c3p0.properties"/>
                <include name="hibernate_default.properties"/>
            </fileset>

            <fileset dir="${src.root}/etc">
                <include name="keystore.properties" if="dev.build"/>
                <include name="uddi.properties"/>
                <include name="treecache-service.xml"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="**/resources/*"/>
                <include name="**/resources/**/*"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/console/**/*.properties"/>
                <include name="com/l7tech/console/resources/helpset/**/*"/>
                <include name="com/l7tech/proxy/resources/**"/>
                <include name="com/l7tech/server/**/*.properties"/>
            </fileset>

            <fileset dir="${src.root}/tests">
                <include name="com/l7tech/**/*.properties" if="dev.build"/>
                <include name="com/l7tech/common/security/xml/test_*" if="dev.build"/>
                <include name="com/l7tech/**/*.xml" if="dev.build"/>
                <include name="com/l7tech/**/*.pfx" if="dev.build"/>
                <include name="com/l7tech/**/*.crt" if="dev.build"/>
                <include name="com/l7tech/**/*.xsd" if="dev.build"/>
                <include name="com/l7tech/**/*.wsdl" if="dev.build"/>
                <include name="**/resources/*" if="dev.build"/>
                <include name="**/resources/**/*" if="dev.build"/>
            </fileset>
        </copy>

        <!-- set up build number -->
        <property file="build.number"/>
    </target>

    <!--
      Create the directory structure, copy the resources, libs and
      update version tokens
    -->
    <target name="prepare"
            depends="prepare.base, prepare.jms, prepare.db, prepare.systinet, keystore.properties, INTERNAL-buildinfo">

        <!-- set up build number if it isn't already set -->
        <property file="build.number"/>
    </target>

    <!--
      Set key store related properties
    -->
    <target name="keystore.properties" if="dev.build">
        <echo level="info">Keystore directory is ${keystoredir}</echo>
        <propertyfile file="${build.classes}/keystore.properties">
            <entry key="keystoredir" value="${keystoredir}"/>
            <entry key="rootcakspasswd" value="${ca.keystore.password}"/>
            <entry key="sslkspasswd" value="${ssl.keystore.password}"/>
        </propertyfile>
    </target>

    <!--
      1.3 compile target - the files that require 1.3 source/target flags
      This is required by custom assertion library to support integration with components
      such as Tivoli that require 1.3 VM
    -->
    <target name="compile13" depends="prepare" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no" target="1.3" source="1.3">
            <patternset refid="layer7api.sources"/>
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <!--
      1.4 compile target - the files that require 1.4 source/target flags
    -->
    <target name="compile14" depends="prepare" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" verbose="off" target="1.4" source="1.4">
            <classpath refid="project.classpath"/>

            <!-- Currently there are no classes restricted to 1.4 (although there are a couple restricted to 1.3) -->
            <exclude name="**/*"/>
        </javac>
    </target>

    <!--
      Compile IntelliJ IDEA Forms
    -->
    <target name="compile.forms" depends="compile.main">
        <javac2 srcdir="src" destdir="${build.classes}"/>
    </target>

    <!--
      Set database properties for configured DB
    -->
    <target name="db.properties"
            depends="db.properties.mysql, db.properties.postgres, db.properties.oracle8, db.properties.oracle9, db.properties.oracle10"/>

    <macrodef name="set-db-properties">
        <attribute name="driver"/>
        <attribute name="url"/>
        <attribute name="user"/>
        <attribute name="password"/>
        <attribute name="pingstmt"/>
        <sequential>
            <property name="database.driver" value="@{driver}"/>
            <property name="database.url" value="@{url}"/>
            <property name="database.user" value="@{user}"/>
            <property name="database.password" value="@{password}"/>
            <property name="database.pingstmt" value="@{pingstmt}"/>
        </sequential>
    </macrodef>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <set-db-properties
                driver="${my.database.driver}"
                url="${my.database.url}"
                user="${my.database.user}"
                password="${my.database.password}"
                pingstmt="${my.database.pingstmt}"/>
    </target>

    <target name="db.properties.postgres" if="db.postgres">
        <echo>Setting database properties for PostgreSQL...</echo>
        <set-db-properties
                driver="${pg.database.driver}"
                url="${pg.database.url}"
                user="${pg.database.user}"
                password="${pg.database.password}"
                pingstmt="${pg.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle8" if="db.oracle8">
        <echo>Setting database properties for Oracle 8...</echo>
        <set-db-properties
                driver="${oracle8.database.driver}"
                url="${oracle8.database.url}"
                user="${oracle8.database.user}"
                password="${oracle8.database.password}"
                pingstmt="${oracle8.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle9" if="db.oracle9">
        <echo>Setting database properties for Oracle 9...</echo>
        <set-db-properties
                driver="${oracle9.database.driver}"
                url="${oracle9.database.url}"
                user="${oracle9.database.user}"
                password="${oracle9.database.password}"
                pingstmt="${oracle9.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle10" if="db.oracle10">
        <echo>Setting database properties for Oracle 10...</echo>
        <set-db-properties
                driver="${oracle10.database.driver}"
                url="${oracle10.database.url}"
                user="${oracle10.database.user}"
                password="${oracle10.database.password}"
                pingstmt="${oracle10.database.pingstmt}"/>
    </target>

    <!--
        Hibernate properties token replacement target.
        This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties.dev" depends="db.properties" if="dev.build">
        <echo level="info">
            database.driver   = '${database.driver}'
            database.url      = '${database.url}'
            database.user     = '${database.user}'
            database.pingstmt = '${database.pingstmt}'
        </echo>

        <replace file="${build.classes}/hibernate.properties"
                 token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_URL" value="${database.url}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_USER" value="${database.user}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_PASSWORD" value="${database.password}"/>
        <replace file="${build.classes}/hibernate.properties"
                 token="DB_PINGSTMT" value="${database.pingstmt}"/>
    </target>

    <!--
      Test compilation target
    -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="tests" destdir="${build.test.classes}" debug="on" optimize="off"
               deprecation="on" verbose="no">
            <classpath refid="project.test.classpath"/>
        </javac>
        <copy todir="${build.test.classes}">
            <fileset dir="tests">
                <include name="**/resources/*"/>
            </fileset>
        </copy>
    </target>

    <!--
      Build testservlets.war containing useful stuff like the echo servlet
    -->
    <target name="package.testservlets" depends="dev">
        <war warfile="${build.dir}/testservlets.war" webxml="${build.etc}/testweb.xml">
            <classes dir="${build.test.classes}" defaultexcludes="true">
                <include name="com/l7tech/test/servlets/**"/>
            </classes>
        </war>
    </target>

    <!--
      Test IntelliJ IDEA forms compilation target (for skunkworks testing apps)
    -->
    <target name="compile-test-forms" depends="compile-tests">
        <javac2 srcdir="tests" destdir="${build.test.classes}" classpathref="project.test.classpath"/>
    </target>

    <!--
      Official build
    -->
    <target name="ssg-install-full"
            description="Offical build target [optionally use with obfuscate, makerpm and makensis]"
            depends="ssg-install-full-init,INTERNAL-ssg-install-init-pre,package,zip.api">
    </target>

    <!--
      Unofficial build
    -->
    <target name="dist"
            description="Build distributable software packages [optionally use with obfuscate]"
            depends="makensis, makerpm, pack200, clean, package">
        <echo level="info">Moving packaged software to distribution directory.</echo>

        <echo level="info">Creating: ${dist.dir}</echo>
        <mkdir dir="${dist.dir}"/>

        <move todir="${dist.dir}" flatten="true">
            <fileset dir="${build.rpm}/RPMS">
                <include name="*/*.rpm"/>
            </fileset>
            <fileset dir="${build.installer}">
                <include name="*/win32/*Installer.exe"/>
            </fileset>
        </move>
    </target>

    <target name="ssg-install-full-init">
        <property name="ssg.install.enabled" value="true"/>
        <property name="ssg.install.official" value="true"/>
    </target>

    <!--
      Process configuration files for the full install
    -->
    <target name="INTERNAL-ssg-install-properties" depends="db.properties" if="ssg.install.enabled">
        <!-- Copy hibernate.properties -->
        <property name="install.src.hibernate.properties" value="${install.src.conf}/hibernate.properties"/>
        <copy file="${src.root}/etc/db/${database.type}/hibernate.properties"
              tofile="${install.src.hibernate.properties}"/>

        <replace file="${install.src.hibernate.properties}" token="DB_URL" value="${database.url}"/>
        <replace file="${install.src.hibernate.properties}" token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${install.src.hibernate.properties}" token="DB_PINGSTMT" value="${database.pingstmt}"/>

        <copy file="${src.root}/etc/ftpserver.properties" todir="${install.src.conf}"/>
        <copy file="${src.root}/etc/system.properties" todir="${install.src.conf}"/>

        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}"/>
        <echo>Patching ${install.src.keystore.properties}...</echo>

        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>

        <copy file="${src.root}/etc/ssglog.properties" tofile="${install.src.ssglog.properties}"/>
        <copy file="${src.root}/etc/uddi.properties" tofile="${install.src.uddi.properties}"/>

        <echo>Patching ${install.src.ssglog.properties}...</echo>
        <replaceregexp file="${install.src.ssglog.properties}">
            <regexp pattern="java.util.logging.FileHandler.pattern=.*"/>
            <substitution expression="java.util.logging.FileHandler.pattern=${install.target.logs}/ssg_%g_%u.log"/>
        </replaceregexp>

        <!-- Copy cluster_hostname -->
        <copy file="${src.root}/etc/cluster_hostname" tofile="${install.src.cluster_hostname}-dist"/>
    </target>

    <!--
      Initialize full install (before anything is done, ie. packaging)
    -->
    <target name="INTERNAL-ssg-install-init-pre" if="ssg.install.enabled" depends="prepare.base">
        <property name="install.build.number" value="${build.number}"/>
        <echo level="info" message="Using build number ${install.build.number}"/>

        <echo level="info" message="Enabling Pack200"/>
        <property name="pack200" value="true"/>
    </target>


    <target name="pack200">
        <property name="pack200" value="true"/>
    </target>

    <!--
      Initialize full install
    -->
    <target name="INTERNAL-ssg-install-init" depends="package.readversion, INTERNAL-ssg-install-init-pre, package.gateway.all, init" if="ssg.install.enabled">
        <fail unless="install.build.number"
              message="Set the install.build.number property before running this target!"/>
        <property file="etc/install.properties"/>

        <fail unless="install.tomcat.tar.gz"
              message="Set the install.tomcat.tar.gz property or create install.properties!"/>
        <fail unless="install.jdk.tar.gz" message="Set the install.jdk.tar.gz property or create install.properties!"/>

        <condition property="tomcat.exists">
            <available file="${install.tomcat.tar.gz}"/>
        </condition>

        <condition property="jdk.exists">
            <available file="${install.jdk.tar.gz}"/>
        </condition>

        <fail unless="tomcat.exists"
              message="Couldn't find ${install.tomcat.tar.gz}! Check your install.properties file!"/>
        <fail unless="jdk.exists" message="Couldn't find ${install.jdk.tar.gz}! Check your install.properties file!"/>

        <!-- Relative pathnames -->
        <property name="install.rel.dist" value="dist"/>
        <property name="install.rel.doc" value="doc"/>
        <property name="install.rel.etc" value="etc"/>
        <property name="install.rel.bin" value="bin"/>
        <property name="install.rel.libexec" value="libexec"/>
        <property name="install.rel.logs" value="logs"/>
        <property name="install.rel.ldap" value="${install.rel.etc}/ldapTemplates"/>
        <property name="install.rel.conf" value="${install.rel.etc}/conf"/>
        <property name="install.rel.partitions" value="partitions"/>
        <property name="install.rel.partitionTemplate" value="partitiontemplate_"/>
        <property name="install.rel.defaultPartition" value="default_"/>
        <property name="install.rel.sql" value="${install.rel.etc}/sql"/>

        <!-- Absolute source paths -->
        <property name="install.src.base" value="${build.dir}/install/ssg"/>
        <property name="install.src.bin" value="${install.src.base}/${install.rel.bin}"/>
        <property name="install.src.libexec" value="${install.src.base}/${install.rel.libexec}"/>
        <property name="install.src.lib" value="${install.src.base}/lib"/>
        <property name="install.src.mods" value="${install.src.base}/modules/lib"/>
        <property name="install.src.aarmods" value="${install.src.base}/modules/assertions"/> 
        <property name="install.src.dist" value="${install.src.base}/${install.rel.dist}"/>
        <property name="install.src.doc" value="${install.src.base}/${install.rel.doc}"/>
        <property name="install.src.jdk" value="${install.src.base}/${install.rel.jdk}"/>
        <property name="install.src.tomcat" value="${install.src.base}/${install.rel.tomcat}"/>

        <property name="install.src.etc" value="${install.src.base}/${install.rel.etc}"/>
        <property name="install.src.sql" value="${install.src.base}/${install.rel.sql}"/>

        <property name="install.src.conf" value="${install.src.base}/${install.rel.conf}"/>
        <property name="install.src.partitions" value="${install.src.conf}/${install.rel.partitions}"/>
        <property name="install.src.partitionTemplate" value="${install.src.partitions}/${install.rel.partitionTemplate}"/>
        <property name="install.src.defaultPartition" value="${install.src.partitions}/${install.rel.defaultPartition}"/>
        <property name="install.src.passwords.txt" value="${install.src.base}/passwords.txt"/>
        <property name="install.src.keystore.properties" value="${install.src.conf}/keystore.properties"/>
        <property name="install.src.cluster_hostname" value="${install.src.conf}/cluster_hostname"/>
        <property name="install.src.ssglog.properties" value="${install.src.conf}/ssglog.properties"/>
        <property name="install.src.uddi.properties" value="${install.src.conf}/uddi.properties"/>
        <property name="install.src.server.xml" value="${install.src.tomcat}/conf/server.xml"/>
        <property name="install.src.logs" value="${install.src.base}/${install.rel.logs}"/>
        <property name="install.src.web-inf" value="${install.src.tomcat}/webapps/ROOT/WEB-INF"/>
        <property name="install.src.ldap" value="${install.src.base}/${install.rel.ldap}"/>
        <property name="install.src.var" value="${install.src.base}/var"/>
        <property name="install.src.var.attachments" value="${install.src.var}/attachments"/>

        <property name="install.rel.jdk" value="${install.jdk.dir}"/>
        <property name="install.rel.tomcat" value="${install.tomcat.dir}"/>
        <!-- Absolute target paths -->
        <property name="install.target.base" value="/ssg"/>
        <property name="install.target.ldap" value="${install.target.base}/${install.rel.ldap}"/>
        <property name="install.target.tomcat" value="${install.target.base}/${install.rel.tomcat}"/>
        <property name="install.target.jdk" value="${install.target.base}/${install.rel.jdk}"/>
        <property name="install.target.logs" value="${install.target.base}/${install.rel.logs}"/>

        <property name="install.src.war" value="${install.src.dist}/ROOT-b${install.build.number}.war"/>
        <property name="install.src.configwizard" value="${install.src.base}/configwizard"/>
        <property name="install.src.flasher" value="${install.src.base}/migration"/>
        <property name="install.src.sysconfigwizard" value="${install.src.base}/sysconfigwizard"/>

        <echo>Making directories...</echo>
        <mkdir dir="${install.src.base}"/>
        <mkdir dir="${install.src.lib}"/>
        <mkdir dir="${install.src.mods}"/>
        <mkdir dir="${install.src.aarmods}"/>
        <mkdir dir="${install.src.dist}"/>
        <mkdir dir="${install.src.doc}"/>
        <mkdir dir="${install.src.etc}"/>
        <mkdir dir="${install.src.sql}"/>
        <mkdir dir="${install.src.ldap}"/>
        <mkdir dir="${install.src.bin}"/>
        <mkdir dir="${install.src.libexec}"/>
        <mkdir dir="${install.src.conf}"/>
        <mkdir dir="${install.src.partitions}"/>
        <mkdir dir="${install.src.partitionTemplate}"/>
        <mkdir dir="${install.src.partitionTemplate}/var/attachments"/>
        <mkdir dir="${install.src.partitionTemplate}/var/modules"/>
        <mkdir dir="${install.src.defaultPartition}"/>
        <mkdir dir="${install.src.logs}"/>
        <mkdir dir="${install.src.var}"/>
        <mkdir dir="${install.src.var.attachments}"/>
        <mkdir dir="${install.src.configwizard}"/>
        <mkdir dir="${install.src.flasher}"/>
    </target>

    <!--
      Full install main work
    -->
    <target name="INTERNAL-ssg-install-main" depends="INTERNAL-ssg-install-properties" if="ssg.install.enabled">
        <!-- Extract Tomcat & JDK tarballs -->
        <untar src="${install.tomcat.tar.gz}" dest="${install.src.base}" compression="gzip"/>
        <!-- Note that the RPM does this later to get the correct JDK for the architecture -->
        <untar src="${install.jdk.tar.gz}" dest="${install.src.base}" compression="gzip"/>

        <copy todir="${install.src.base}/tomcat/common/endorsed">
            <fileset dir="${build.dir}">
                <include name="l7provider.jar"/>
            </fileset>
        </copy>
        <copy todir="${install.src.base}/tomcat/server/lib">
            <fileset dir="${build.dir}">
                <include name="l7valve.jar"/>
            </fileset>
        </copy>
        <copy todir="${install.src.base}/tomcat/shared/lib">
            <fileset dir="${build.dir}">
                <include name="layer7-api.jar"/>
            </fileset>
        </copy>

        <!--copy the config wizard -->
        <copy todir="${install.src.configwizard}">
            <fileset dir="${build.dir}/configwizard">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--copy the system config wizard -->
        <copy todir="${install.src.sysconfigwizard}">
            <fileset dir="${build.dir}/sysconfigwizard">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--copy the ssg flasher -->
        <copy todir="${install.src.flasher}">
            <fileset dir="${build.dir}/migration">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy WAR file into position -->
        <copy file="${build.dir}/${war}" tofile="${install.src.war}"/>

        <!-- Copy modules -->
        <copy file="${build.dir}/ssg-uddi-module-systinetv3.jar" todir="${install.src.mods}"/>

        <!-- Copy bundled modular assertions -->
        <copy todir="${install.src.aarmods}">
            <fileset dir="${src.root}/modules/assertions/RateLimitAssertion/build" includes="*.aar"/>
            <fileset dir="${src.root}/modules/assertions/ComparisonAssertion/build" includes="*.aar"/>
            <fileset dir="${src.root}/modules/assertions/SnmpTrapAssertion/build" includes="*.aar"/>
            <fileset dir="${src.root}/modules/assertions/EchoRoutingAssertion/build" includes="*.aar"/>
            <fileset dir="${src.root}/modules/assertions/FtpRoutingAssertion/build" includes="*.aar"/>
            <fileset dir="${src.root}/modules/assertions/FtpCredentialAssertion/build" includes="*.aar"/>
        </copy>

        <!-- Copy LDAP templates -->
        <copy todir="${install.src.ldap}">
            <fileset dir="${src.root}/etc/ldapTemplates" includes="**/*.xml"/>
        </copy>

        <!-- Expand ROOT-bxxxx.war into tomcat/webapps -->
        <echo>Expanding ${install.src.war}...</echo>
        <unwar src="${install.src.war}" dest="${install.src.tomcat}/webapps/ROOT"/>

        <!-- Copy modified / new files -->
        <copy file="${src.root}/etc/tomcat/catalina.sh" tofile="${install.src.tomcat}/bin/catalina.sh"/>
        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${install.src.tomcat}/conf/server.xml"/>
        <copy file="${src.root}/etc/tomcat/truststore.jks" tofile="${install.src.tomcat}/conf/truststore.jks"/>
        <copy file="${src.root}/etc/tomcat/SsgSSLImplementation.properties"
              tofile="${install.src.tomcat}/conf/SsgSSLImplementation.properties"/>
    </target>

    <!--
      Top level work target for official builds
    -->
    <target name="INTERNAL-ssg-install" depends="INTERNAL-ssg-install-init, INTERNAL-ssg-install-main" if="ssg.install.enabled">
        <!-- Copy misc. stuff -->
        <copy todir="${install.src.sql}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <include name="ssg.sql"/>
                <include name="upgrade*.sql"/>
            </fileset>
        </copy>

        <!-- copy new sudo exececuted files to new libexec directory -->
        <copy todir="${install.src.libexec}">
            <fileset dir="${src.root}/etc">
                <include name="load_keydata"/>
                <include name="save_keydata"/>
                <include name="wipe_keydata"/>
                <include name="zerohsm.sh"/>
                <include name="masterkey-manage.pl"/>
            </fileset>
        </copy>

        <copy todir="${install.src.bin}">
            <fileset dir="${src.root}/etc">
                <include name="setkeys.sh"/>
                <include name="md5passwd.pl"/>
                <include name="rpass.pl"/>
                <include name="install.pl"/>
                <include name="upgrade.sh"/>
                <include name="buildVersion.txt"/>
                <include name="passServiceUsage.sh"/>
                <include name="ssgruntimedefs.sh"/>
                <include name="partition_defs.sh"/>
                <include name="ssg_appliance_startup_config.sh"/>
                <include name="iptables"/>
                <include name="iptables-singlenet"/>
                <include name="tarari-initd"/>
                <include name="rotate-binlogs.pl"/>
                <include name="ssg-initd"/>
                <include name="ssg-dbstatus-initd"/>
                <include name="tcp_tune.sh"/>
                <include name="snmpd.conf"/>
                <include name="configuser_bashrc"/>
                <include name="sysconfigscript-initd"/>
                <include name="partitionControl.sh"/>
                <include name="partition_firewall.pl"/>
                <include name="ssg-java.security"/>
            </fileset>
            <fileset dir="${src.root}/etc/db/mysql">
                <include name="my.cnf"/>
		        <include name="my.ini"/>
            </fileset>
        </copy>

        <!-- Create tarball -->
        <property name="tarball" value="${build.dir}/ssg-b${install.build.number}.tar.gz"/>
        <echo level="info">Creating ${tarball}...</echo>
        <tar destfile="${tarball}" compression="gzip" longfile="gnu">
            <tarfileset dir="${build.dir}/install" username="gateway" group="gateway" mode="644">
                <include name="**/*"/>                
                <exclude name="**/bin/*"/>
                <exclude name="ssg/dist/*"/>
            </tarfileset>            
            <tarfileset dir="${build.dir}/install" username="gateway" group="gateway" mode="755">
                <include name="**/bin/*"/>
                <exclude name="**/bin/*.bat"/>
                <exclude name="**/bin/*.cnf"/>
                <exclude name="**/bin/*.conf"/>
                <exclude name="**/bin/*.exe"/>
                <exclude name="**/bin/*.gz"/>
                <exclude name="**/bin/*.ini"/>
                <exclude name="**/bin/*.jar"/>
                <exclude name="**/bin/*.txt"/>
                <exclude name="**/bin/*.xml"/>
            </tarfileset>
            <tarfileset dir="${build.dir}/install" username="gateway" group="gateway" mode="644">
                <include name="**/bin/*.bat"/>
                <include name="**/bin/*.cnf"/>
                <include name="**/bin/*.conf"/>
                <include name="**/bin/*.exe"/>
                <include name="**/bin/*.gz"/>
                <include name="**/bin/*.ini"/>
                <include name="**/bin/*.jar"/>
                <include name="**/bin/*.txt"/>
                <include name="**/bin/*.xml"/>
            </tarfileset>
        </tar>		
        <echo level="info">BUILD COMPLETE - Produced ${tarball}!</echo>
    </target>

    <!--
      Used if you want to set the version in your source tree, use with compile, package, etc
    -->
    <target name="version">
        <property name="buildinfo.update" value="true"/>
        <property name="build.version" value="${build.version.major}.${build.version.minor}.${build.version.subminor}"/>
    </target>

    <!--
      Used if you want to reset the version in your source tree (HEAD),  use with compile, package, etc
    -->
    <target name="unversion">
        <property name="buildinfo.update" value="true"/>
        <property name="build.version" value="HEAD"/>
    </target>

    <!--
      Initialization for the pre-official build (set versions, etc)
    -->
    <target name="OFFICIAL-build.init" depends="init">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>

        <input message="This will increment the OFFICIAL build count in CVS.  Are you sure you want to do this?"
               validargs="Y,y,N,n" addproperty="sure"/>

        <condition property="die">
            <not>
                <or>
                    <equals arg1="${sure}" arg2="y"/>
                    <equals arg1="${sure}" arg2="Y"/>
                </or>
            </not>
        </condition>
        <fail if="die" message="Aborted at user request."/>

        <input message="Enter a version number" addproperty="build.version"/>

        <echo level="info">Running svn switch for build.number (to trunk/HEAD)</echo>
        <svn>
            <switch path="build.number" recurse="false" url="svn+ssh://sarek/home/svnuser/UneasyRooster/trunk/build.number"/>
        </svn>

        <buildnumber/>

        <property name="buildinfo.update" value="true"/>
    </target>

    <!--
      Pre-official build (sets version, buildnumber)
    -->
    <target name="OFFICIAL-build"
            description="Set the official buildnumber and product version."
            depends="OFFICIAL-build.init, clean, testpackage">
        <echo level="info">commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number</echo>
        <svn>
            <commit file="build.number" recurse="false" message="[OFFICIAL-build] Incremented build number to ${build.number}"/>
        </svn>
    </target>

    <!--
      Substitute values in the BuildInfo.java file
    -->
    <macrodef name="buildinforeplace">
        <attribute name="token"/>
        <attribute name="value"/>
        <sequential>
            <echo>Replacing @{token} with @{value}</echo>
            <replaceregexp match='@{token} = ".*"' replace='@{token} = "@{value}"'>
                <fileset dir="${src.root}/src">
                    <include name="com/l7tech/common/BuildInfo.java"/>
                </fileset>
            </replaceregexp>
        </sequential>
    </macrodef>

    <!--
      Target that only runs if build.version if being re-defined
    -->
    <target name="INTERNAL-buildinfo-version" if="build.version">
        <buildinforeplace token="PRODUCT_VERSION" value="${build.version}"/>
    </target>

    <!--
      Set the build info for the build
    -->
    <target name="INTERNAL-buildinfo" depends="INTERNAL-buildinfo-version, INTERNAL-buildinfo-uptodate">
        <property name="hostname" value="buildmachine.l7tech.com"/>

        <tstamp>
            <format property="build.date" pattern="yyyyMMdd"/>
            <format property="build.time" pattern="HHmmss"/>
        </tstamp>

        <buildinforeplace token="BUILD_NUMBER"          value="${build.number}"/>
        <buildinforeplace token="PRODUCT_VERSION_MAJOR" value="${build.version.major}"/>
        <buildinforeplace token="PRODUCT_VERSION_MINOR" value="${build.version.minor}"/>
        <buildinforeplace token="PRODUCT_VERSION_SUBMINOR" value="${build.version.subminor}"/>
        <buildinforeplace token="PRODUCT_NAME"  value="${app.name}"/>
        <buildinforeplace token="BUILD_DATE"    value="${build.date}"/>
        <buildinforeplace token="BUILD_TIME"    value="${build.time}"/>
        <buildinforeplace token="BUILD_USER"    value="${user.name}"/>
        <buildinforeplace token="BUILD_MACHINE" value="${hostname}"/>
    </target>

    <!--
      Check if build information needs to be set
    -->
    <target name="INTERNAL-buildinfo-uptodate" unless="buildinfo.update">
        <uptodate property="buildinfo.uptodate" targetfile="${src.root}/src/com/l7tech/common/BuildInfo.java" >
            <srcfiles dir="${src.root}" includes="src/**/*, build.version, build.number" excludes="src/com/l7tech/common/BuildInfo.java"/>
        </uptodate>
    </target>

    <!-- flasher obfuscation -->
    <target name="obfuscate.flasher" if="obfuscate" unless="ssg.only">
        <!-- cleanup previous output -->
        <delete file="build/etc/flasher.zkm"/>
        <delete file="build/obfuscation/flasherobfuscation.log"/>
        <delete file="build/obfuscation/flasherobfuscation.trim"/>

        <!-- dynamically generate the lib list and target -->
        <copy tofile="build/etc/flasher.zkm" file="etc/obfuscation/genjarobf.zkm"/>
        <path id="flasher.libs.obf">
            <fileset dir="build/migration/lib">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="stringed-cpath" refid="flasher.libs.obf"/>
        <replace file="build/etc/flasher.zkm" token="@@CP@@" value="${stringed-cpath}"/>
        <replace file="build/etc/flasher.zkm" token="@@JAR@@" value="./build/migration/SSGMigration.jar"/>

        <!-- the actual obfuscation -->
        <echo>Obfuscating SSGMigration.jar</echo>
        <Zelix scriptFileName="build/etc/flasher.zkm"
               logFileName="build/obfuscation/flasherobfuscation.log"
               trimLogFileName="build/obfuscation/flasherobfuscation.trim"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating SSGMigration.jar</echo>
        <copy tofile="build/migration/SSGMigration.jar" file="build/obfuscation/SSGMigration.jar" overwrite="true"/>
    </target>

    <!-- config wiz obfuscation -->
    <target name="obfuscate.cfgwiz" if="obfuscate" unless="ssg.only">
        <!-- cleanup previous output -->
        <delete file="build/etc/cfgwiz.zkm"/>
        <delete file="build/obfuscation/cfgwizobfuscation.log"/>
        <delete file="build/obfuscation/cfgwizobfuscation.trim"/>

        <!-- dynamically generate the lib list and target -->
        <copy tofile="build/etc/cfgwiz.zkm" file="etc/obfuscation/genjarobf.zkm"/>
        <path id="cfgwiz.libs.obf">
            <fileset dir="build/configwizard/lib">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="stringed2-cpath" refid="cfgwiz.libs.obf"/>
        <replace file="build/etc/cfgwiz.zkm" token="@@CP@@" value="${stringed2-cpath}"/>
        <replace file="build/etc/cfgwiz.zkm" token="@@JAR@@" value="./build/configwizard/ConfigWizard.jar"/>

        <!-- the actual obfuscation -->
        <echo>Obfuscating ConfigWizard.jar</echo>
        <Zelix scriptFileName="build/etc/cfgwiz.zkm"
               logFileName="build/obfuscation/cfgwizobfuscation.log"
               trimLogFileName="build/obfuscation/cfgwizobfuscation.trim"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating ConfigWizard.jar</echo>
        <copy tofile="build/configwizard/ConfigWizard.jar" file="build/obfuscation/ConfigWizard.jar" overwrite="true"/>
    </target>

    <!-- sys config wiz obfuscation -->
    <target name="obfuscate.syscfgwiz" if="obfuscate" unless="ssg.only">
        <!-- cleanup previous output -->
        <delete file="build/etc/syscfgwiz.zkm"/>
        <delete file="build/obfuscation/syscfgwizobfuscation.log"/>
        <delete file="build/obfuscation/syscfgwizobfuscation.trim"/>

        <!-- dynamically generate the lib list and target -->
        <copy tofile="build/etc/syscfgwiz.zkm" file="etc/obfuscation/genjarobf.zkm"/>
        <path id="syscfgwiz.libs.obf">
            <fileset dir="build/sysconfigwizard/lib">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="stringed3-cpath" refid="syscfgwiz.libs.obf"/>
        <replace file="build/etc/syscfgwiz.zkm" token="@@CP@@" value="${stringed3-cpath}"/>
        <replace file="build/etc/syscfgwiz.zkm" token="@@JAR@@" value="./build/sysconfigwizard/SystemConfigWizard.jar"/>

        <!-- the actual obfuscation -->
        <echo>Obfuscating SystemConfigWizard.jar</echo>
        <Zelix scriptFileName="build/etc/syscfgwiz.zkm"
               logFileName="build/obfuscation/syscfgwizobfuscation.log"
               trimLogFileName="build/obfuscation/syscfgwizobfuscation.trim"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating SystemConfigWizard.jar</echo>
        <copy tofile="build/sysconfigwizard/SystemConfigWizard.jar" file="build/obfuscation/SystemConfigWizard.jar" overwrite="true"/>
    </target>
    
    <!--
      SecureSpan XML VPN Client obfuscation target
    -->
    <target name="obfuscate.client" depends="obfuscate.init" if="obfuscate" unless="ssg.only">
        <echo>Obfuscating Client.jar</echo>
        <Zelix scriptFileName="build/etc/client.zkm"
               logFileName="build/obfuscation/clientobfuscation.log"
               trimLogFileName="build/obfuscation/clientobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating Client.jar</echo>
        <copy tofile="build/Client.jar" file="build/obfuscation/Client.jar" overwrite="true"/>
    </target>

    <!--
      SecureSpan Manager obfuscation target
    -->
    <target name="obfuscate.manager" depends="obfuscate.manager.init" if="obfuscate">
        <echo>Obfuscating Manager.jar</echo>
        <Zelix scriptFileName="build/etc/manager.zkm"
               logFileName="build/obfuscation/managerobfuscation.log"
               trimLogFileName="build/obfuscation/managerobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Done obfuscating Manager.jar</echo>
        <copy tofile="build/Manager.jar" file="build/obfuscation/Manager.jar" overwrite="true"/>
    </target>

    <!--
      SecureSpan Gateway obfuscation target
    -->
    <target name="obfuscate.gateway" depends="obfuscate.init" if="obfuscate">
        <echo>Obfuscating war classes</echo>
        <Zelix scriptFileName="build/etc/ssg.zkm"
               logFileName="build/obfuscation/ssgobfuscation.log"
               trimLogFileName="build/obfuscation/ssgobfuscation.log"
               isParseOnly="false"
               isVerbose="true"/>
        <echo>Copying obfuscated classes in exploded war</echo>
        <copy todir="build/ROOT_exploded/WEB-INF/classes/com" overwrite="true">
            <fileset dir="./build/obfuscation/gatewayclasses/com">
                <include name="**/*.class"/>
            </fileset>
        </copy>
        <echo>Repackage new ROOT.war (obfuscated version)</echo>
        <zip destfile="build/obfuscation/ROOT.war" basedir="build/ROOT_exploded"/>
        <echo>Cleaning up...</echo>
        <delete dir="build/ROOT_exploded"/>
        <delete dir="build/obfuscation/gatewayclasses"/>
        <copy tofile="build/ROOT.war" file="build/obfuscation/ROOT.war" overwrite="true"/>
    </target>

    <!--
      Task to update ZKM files with classpaths.
    -->
    <macrodef name="build-zkm">
        <attribute name="propertyPrefix"/>
        <attribute name="filename"  default="@{propertyPrefix}.zkm"/>
        <attribute name="pathExtra" default=""/>
        <attribute name="libDir" default="lib"/>
        <sequential>
            <fileset id="@{propertyPrefix}.lib.fileset" dir="${src.root}/@{libDir}" casesensitive="yes">
                <patternset refid="@{propertyPrefix}.libs"/>
            </fileset>
            <pathconvert property="@{propertyPrefix}.zkm.libs.path" targetos="unix" pathsep="${line.separator}" refid="@{propertyPrefix}.lib.fileset">
                <mapper type="regexp" from=".*[/\\](.*)\.jar" to="    &quot;build/lib/\1.jar&quot;"/>
            </pathconvert>
            <copy file="${src.root}/etc/obfuscation/@{filename}" tofile="${build.etc}/@{filename}">
                <filterset>
                  <filter token="JARFILE_FILE_LINES" value="classpath${line.separator}${@{propertyPrefix}.zkm.libs.path}${line.separator}@{pathExtra};"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <!--
      Initialization for obfuscation
    -->
    <target name="obfuscate.init" if="obfuscate" depends="package.api">
        <echo>Extracting classes from ROOT.war</echo>
        <unzip src="build/ROOT.war" dest="build/ROOT_exploded"/>
        <!--
            Patternset used for gateway libs
        -->
        <patternset id="gateway.libs">
            <include name="*"/>
        </patternset>

        <echo>Setting classpaths in zkm scripts</echo>
        <build-zkm filename="client.zkm" propertyPrefix="client"/>
        <build-zkm filename="ssg.zkm" propertyPrefix="gateway" libDir="build/ROOT_exploded/WEB-INF/lib"
                   pathExtra="    &quot;build/lib/servlet-api.jar&quot;${line.separator}    &quot;build/lib/catalina.jar&quot;${line.separator}    &quot;build/layer7-api.jar&quot;${line.separator}    &quot;lib/gateway/tarari/tarari_raxj.jar&quot;${line.separator}"/>
    </target>

    <target name="obfuscate.manager.init" if="obfuscate">
        <build-zkm filename="manager.zkm" propertyPrefix="manager"/>
    </target>

    <target name="obfuscate" description="Enable obfuscated build (when packaging)">
        <echo level="info">Enabling obfuscation for build.</echo>
        <property name="obfuscate" value="true"/>
        <mkdir dir="build"/>
        <touch file="build/please_obfuscate"/>
    </target>

    <!--
       Enable installer build but don't require dependencies to be built
    -->
    <target name="makensis-unsafe">
        <echo level="info">Enabling Win32 installers for build.</echo>
        <property name="makensis" value="true"/>
    </target>

    <target name="makensis" description="Enable building of Win32 installers" depends="makensis-unsafe">
        <property name="ssg.install.enabled" value="true"/>
    </target>

    <target name="makerpm" description="Enable building of rpm installer(s)">
        <echo level="info">Enabling RPM installers for build.</echo>
        <property name="makerpm" value="true"/>
        <property name="ssg.install.enabled" value="true"/>        
    </target>

    <!--
      Meant to be used as part of official build this will create an obfuscated version
      of the following files:

      . build/Client.jar
      . build/Manager.jar
      . build/ROOT.war
      . installer/Client-VERSION.tar.gz
      . installer/Manager-VERSION.tar.gz

      When followed by ssg-install-full, the resulting build/ssg-bBUILDNUMBER.tar.gz will
      also be obfuscated.

      When followed by a call to ./make_installers.pl -b, the resulting windows installers
      for client, manager and ssg will also be obfuscated
    -->
    <target name="obfuscate.work"
            if="obfuscate"
            depends="package.client, package.manager, package.gateway, obfuscate.client, obfuscate.manager, obfuscate.gateway, obfuscate.flasher, obfuscate.cfgwiz, obfuscate.syscfgwiz">
        <echo level="info">Expecting obfuscation version ${build.version}</echo>

        <untar src="installer/Client-${build.version}.tar.gz" dest="build/obfuscation/" compression="gzip"/>
        <untar src="installer/Manager-${build.version}.tar.gz" dest="build/obfuscation/" compression="gzip"/>
        <copy file="build/obfuscation/Client.jar" tofile="build/obfuscation/Client-${build.version}/Client.jar" overwrite="true"/>
        <copy file="build/obfuscation/Manager.jar" tofile="build/obfuscation/Manager-${build.version}/Manager.jar" overwrite="true"/>

        <tar destfile="build/obfuscation/Client-${build.version}_obfuscated.tar.gz" compression="gzip">
            <tarfileset dir="build/obfuscation/Client-${build.version}" prefix="Client-${build.version}">
                <include name="**"/>
                <exclude name="*.sh"/>
            </tarfileset>
            <tarfileset dir="build/obfuscation/Client-${build.version}" prefix="Client-${build.version}" mode="755">
                <include name="*.sh"/>
            </tarfileset>
        </tar>

        <tar destfile="build/obfuscation/Manager-${build.version}_obfuscated.tar.gz" compression="gzip">
            <tarfileset dir="build/obfuscation/Manager-${build.version}" prefix="Manager-${build.version}">
                <include name="**"/>
                <exclude name="*.sh"/>
            </tarfileset>
            <tarfileset dir="build/obfuscation/Manager-${build.version}" prefix="Manager-${build.version}" mode="755">
                <include name="*.sh"/>
            </tarfileset>
        </tar>

        <delete dir="build/obfuscation/Client-${build.version}"/>
        <delete dir="build/obfuscation/Manager-${build.version}"/>

        <copy file="build/obfuscation/Client-${build.version}_obfuscated.tar.gz"
              tofile="installer/Client-${build.version}.tar.gz"
              overwrite="true"/>

        <copy file="build/obfuscation/Manager-${build.version}_obfuscated.tar.gz"
              tofile="installer/Manager-${build.version}.tar.gz"
              overwrite="true"/>
    </target>

    <target name="generate-xbean-jars">
        <xmlbeancompiler destfile="${src.root}/lib/xbean-xenc-xmldsig.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="xmldsig-core-schema.xsd, xenc-schema.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/lib/xbean-saml1_1.jar" classpathref="project.classpath">
            <fileset dir="${src.root}/etc/schema/xbean" includes="oasis-sstc-saml-schema-assertion-1.1.xsd"/>
        </xmlbeancompiler>
        <xmlbeancompiler destfile="${src.root}/lib/xbean-saml2_0.jar">
            <classpath>
                <pathelement location="${src.root}/lib/xbean-xenc-xmldsig.jar"/>
                <path refid="project.classpath"/>
            </classpath>
            <fileset dir="${src.root}/etc/schema/xbean">
                <include name="saml-schema-assertion-2.0.xsd"/>
                <include name="saml-schema-authn-context-2.0.xsd"/>
                <include name="saml-schema-authn-context-types-2.0.xsd"/>
                <include name="saml-schema-authn-context-sslcert-2.0.xsd"/>
                <include name="saml-schema-authn-context-pword-2.0.xsd"/>
                <include name="saml-schema-authn-context-x509-2.0.xsd"/>
                <include name="saml-schema-authn-context-xmldsig-2.0.xsd"/>
            </fileset>
        </xmlbeancompiler>
    </target>
</project>
