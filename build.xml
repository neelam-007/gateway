<project name="UneasyRooster" default="dev" basedir=".">
    <!-- Uncomment for jikes/emacs to be used
    <property name="build.compiler" value="jikes"/>
    <property name="build.compiler.emacs" value="true"/> -->

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" value="${basedir}"/>

    <!-- as the file name says -->
    <property file="${src.root}/etc/ssg.version"/>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!--
      ** Set default build properties
      ** Properties that were not specified in user properties
    -->
    <property file="${src.root}/etc/default_build.properties"/>

    <!-- where the builds go -->
    <property name="dev.build.home" value="${src.root}/build"/>

    <!-- distribution archive names -->
    <!--
    <property name="war" value="${app.name}.war"/>
    -->
    <property name="war" value="ROOT.war"/>
    <property name="tar" value="${app.name}.tar"/>
    <property name="tar.gz" value="${app.name}_${app.version}.tar.gz"/>

    <!-- ear not used
      <property name="ear"        value="${app.name}.ear"/>
    -->

    <!-- project classpath -->
    <path id="project.class.path">
        <pathelement location="src"/>
        <fileset dir="lib">
            <include name="**/*.jar"/>
	        <include name="**/*.zip"/>
            <!--
               * Issue with multiple parsers.
               * JDK 1.4 ships it's own parses and contributes to the
               * overall parser mess. java.beans.XmlEncoder and other
               * classes  do not like xerces so excluded it from project
               * classpath.
               * It is not throughly tested to see if this breaks other things.

           fla note: xercesImpl.jar and xml-apis.jar are required by xss4j for xml-enc features.
           <exclude name="*xerces*"/>
           <exclude name="*xml-api*"/>
           -->
        </fileset>
        <fileset dir="lib">
            <include name="*.zip"/>
        </fileset>
    </path>
    <property name="test.class.path" refid="project.class.path"/>

    <!--
       * jars that go in $TOMCAT_HOME/common/lib
       * currently in ant this is used in conjunction with
       * fileset (look for patternset id usage throughout this
       * build.xml for examples)
    -->
    <!-- obsolete in recent Tomcat versions
    <property name="common.lib.jars"
              value="saaj.jar, jaxrpc.jar"/>

              -->
    <!--
      ** init dev target The "dev" target depends on this target.
      -->
    <target name="init-dev">
        <property name="build.dir" value="${dev.build.home}"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>
        <property name="app.version" value="HEAD"/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <condition property="db.postgres">
            <equals arg1="${database.type}" arg2="postgres"/>
        </condition>

        <condition property="db.oracle8">
            <equals arg1="${database.type}" arg2="oracle8"/>
        </condition>

        <condition property="db.oracle9">
            <equals arg1="${database.type}" arg2="oracle9"/>
        </condition>

        <condition property="db.oracle10">
            <equals arg1="${database.type}" arg2="oracle10"/>
        </condition>
    </target>

    <target name="cleandev" depends="clean, dev"/>
    <target name="redeploy" depends="undeploy, deploy"/>

    <!--
      ** configure and invoke developer's build
      -->
    <target name="dev" depends="init-dev">
        <property name="dev.build" value="true"/>
        <property file="build.number"/>
        <property name="build.version" value="HEAD"/>

        <antcall target="INTERNAL-buildinfo"/>

        <antcall target="compile">
        </antcall>
        <antcall target="compile-tests">
        </antcall>

        <antcall target="compile-one">
        </antcall>
    </target>

    <!--
      ** configure and invoke developer's build for source files
      ** that match the pattern passed as -Dcompile.pattern
      -->
    <target name="compile-one" depends="init-dev" if="compile.pattern">
        <echo message="Compiling **/*${compile.pattern}* in ${src.root}."/>
        <javac srcdir="src" destdir="${build.classes}" debug="on"
            optimize="off"
            includes="**/*${compile.pattern}*" deprecation="on" depend="on"
            verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="undeploy" depends="init-dev">
        <delete dir="${tomcat.home}/webapps/ROOT"/>
        <delete file="${war}"/>
    </target>

    <!--
      ** developer's 'deploy' target.
      ** compile and package the application.
      ** Then deploy a package into the ${tomcat.home}/webapps ($TOMCAT_HOME/webapps)
      -->
    <target name="deploy" depends="init-dev">
        <property name="dev.build" value="true"/>
        <antcall target="package"/>
        <antcall target="ssm-webstart"/>

        <!--
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        -->
        <copy todir="${tomcat.home}/webapps">
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>
        <mkdir dir="${tomcat.home}/common/classpath"/>
        <copy todir="${tomcat.home}/common/classpath">
            <fileset dir="${src.root}/lib">
                <include name="jsk-*.jar"/>
            </fileset>

            <!-- Needed for PKCS#12 keystore -->
            <fileset dir="${src.root}/lib/crypto/bc">
                <include name="bcprov-*.jar"/>
            </fileset>
        </copy>

        <!--
          ** Java 1.4 changed the rules as to to how packages beginning in java.* and javax.*
          **  get loaded. Specifically, they only get loaded from endorsed directories.
          ** jaxrpc.jar and saaj.jar contain javax packages, so may not get picked up.
          ** Copy such libraries into $TOMCAT_HOME/common/lib
          **  -->
        <!-- Obsolete in later Tomcat versions
        <copy todir="${tomcat.home}/common/lib">
            <fileset dir="${src.root}/lib" includes="${common.lib.jars}"/>
        </copy>
        -->

        <!--
          this server.xml is ready to be modified by sslGen.sh who will later
          make the ssl cert and record it's keystore password in it
        -->
        <copy todir="${tomcat.home}/conf">
            <fileset dir="${src.root}/etc/tomcat" includes="server.xml, catalina.policy"/>
        </copy>
        <copy todir="${tomcat.home}/bin">
            <fileset dir="${src.root}/etc/tomcat" includes="setclasspath.*"/>
        </copy>

    </target>

    <!--
      ** configure and invoke unit tests
      -->
    <target name="test" depends="dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off">
            <classpath>
                <pathelement path="${test.class.path}"/>
                <pathelement path="${build.dir}/classes"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>
            <test name="com.l7tech.common.util.ThreadPoolTest" haltonfailure="no"/>
            <test name="com.l7tech.common.locator.AbstractLocatorTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgManagerTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.FunctionalTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.ClientPolicyTest" haltonfailure="no"/>
            <test name="com.l7tech.service.WsdlTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.policy.ClientPolicyFactoryTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.policy.ClientXpathAssertionsTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.ServerPolicyFactoryTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.server.filter.FilterTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.ExceptionUtilsTest" haltonfailure="no"/>
            <test name="com.l7tech.identity.StubDataStoreTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.RequestXpathAssertionTest" fork="yes" haltonfailure="no"/>
            <test name="com.l7tech.common.util.XmlUtilTest" haltonfailure="no"/>

            <!--
             ** add policy tests into the com.l7tech.policy.AllTests class
            -->
            <test name="com.l7tech.policy.AllTests" haltonfailure="no"/>
            <test name="com.l7tech.common.security.KeysTest" haltonfailure="no"/>
            <test name="com.l7tech.server.MockServletApiTest" haltonfailure="no"/>
            <test name="com.l7tech.common.xml.XpathEvaluatorTest" haltonfailure="no"/>
            <test name="com.l7tech.common.xml.SoapMessageGeneratorTest" haltonfailure="no" fork="yes"/>
            <!--
            ** TODO: make sure -security flag is added to the 'nightly' build/test
            ** Tomcat config. When done enable the tests below.
            **
           <test name="com.l7tech.logging.LogCLientTest" haltonfailure="no"/>
           <test name="com.l7tech.identity.ClientTest" haltonfailure="no"/>
           <test name="com.l7tech.service.ServiceAdminTest" haltonfailure="no"/>
           -->
            <!--
              ** add tests here **
              -->
        </junit>
    </target>

    <!--
      ** Clean the directory structure.
      ** This is used only by developer's build.
      -->
    <target name="clean" depends="init-dev">
        <delete dir="${build.classes}"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.lib}"/>
        <delete dir="${build.dir}"/>
        <delete includeEmptyDirs="true">
	  <fileset dir="${src.root}/installer">
            <include name="Manager-*"/>
            <include name="Agent-*"/>
          </fileset>
        </delete>
        <delete dir="${javadoc.home}"/>

        <delete file="${src.root}/src/com/l7tech/util/Version.java"/>
    </target>

    <!-- javadoc target -->
    <target name="javadoc" depends="prepare">
        <javadoc packagenames="com.*" sourcepath="src"
            destdir="${javadoc.home}">
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!--
      ** Non 'build' targets from this point; just various helper targets.
      ** Please do not invoke below targets as main targets.
    -->

    <!--
      ** 'package' target.
      ** package the application ( both client and server) in their
      ** respective archives (war, jar).
      ** This target is invoked by other targets such as deploy and dist.
      -->
    <target name="package" depends="init-dev, compile">
        <!-- the ssg war -->
        <war warfile="${build.dir}/${war}" webxml="${build.etc}/web.xml">
            <lib dir="${build.dir}/lib">
                <include name="axis.jar"/>
                <!-- This needs to go in the system classpath now because the SSL keystore is BCPKCS12 -->
                <!-- <include name="bcprov-jdk14-124.jar"/> -->
                <include name="commons-collections.jar"/>
                <include name="commons-dbcp-1.1.jar"/>
                <include name="commons-discovery.jar"/>
                <include name="commons-httpclient-2.0.jar"/>
                <include name="commons-lang.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-pool.jar"/>
                <include name="dom4j.jar"/>
                <include name="hibernate2.jar"/>
                <include name="spring-core.jar"/>
                <include name="spring-orm.jar"/>
                <include name="spring-dao.jar"/>
                <include name="cglib-2.0-rc2.jar"/>
                <include name="ehcache.jar"/>
                <include name="jta.jar"/>
                <include name="jaxen-1.1-beta-2.jar"/>
                <include name="jaxrpc.jar"/>
                <include name="jini-core.jar"/>
                <include name="jini-ext.jar"/>
                <include name="jms-1.1.jar"/>
                <include name="jnlp.jar"/>
                <include name="jnlp-servlet.jar"/>
                <include name="odmg.jar"/>
                <include name="oswego-concurrent.jar"/>
                <include name="qname.jar"/>
                <include name="reggie-dl.jar"/>
                <include name="reggie.jar"/>
                <include name="saaj.jar"/>
                <include name="saxpath.jar"/>
                <include name="sdm-dl.jar"/>
                <include name="start.jar"/>
                <include name="wsdl4j.jar"/>
                <include name="xbean.jar"/>
                <include name="xbean-saml.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xml-apis.jar"/>
                <include name="xpp3-1.1.3.3.jar"/>
                <include name="xss4j.jar"/>

                <!-- Include OpenJMS on dev builds -->
                <include name="openjms-client-0.7.6.jar" if="include.jms.openjms"/>
                <include name="exolabcore-0.3.7.jar" if="include.jms.openjms"/>

                <!-- Include MQSeries on dev builds -->
                <include name="com.ibm.mqbind.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mq.jar" if="include.jms.mqseries"/>
                <include name="com.ibm.mqjms.jar" if="include.jms.mqseries"/>
                <include name="connector.jar" if="include.jms.mqseries"/>

                <include name="classes111.jar" if="db.oracle8"/>
                <include name="ojdbc14.jar" if="db.oracle9"/>
                <include name="ojdbc14.jar" if="db.oracle10"/>

                <include name="mysql-connector-java-3.0.14-stable-bin.jar" if="db.mysql"/>
                <include name="postgresql.jar" if="db.postgres"/>
            </lib>

            <classes dir="${build.classes}">
                <exclude name="com/l7tech/console/**/*"/>
                <exclude name="com/l7tech/test/**/*"/>
                <exclude name="com/l7tech/server/jms/**/*" unless="include.jms"/>
            </classes>

            <zipfileset dir="${src.root}/etc" prefix="WEB-INF">
                <include name="server-config.wsdd"/>
            </zipfileset>
            <zipfileset dir="${src.root}/web" includes="index.html" prefix="ssg"/>
            <zipfileset dir="${src.root}/web" includes="index.html"/>
            <!-- Jini config -->
            <zipfileset dir="${src.root}/etc/jini" includes="start-services.config, services.config, services.policy" prefix="WEB-INF/classes"/>
            <zipfileset dir="${src.root}/etc/jini" includes="PREFERRED.LIST" prefix="WEB-INF/classes/META-INF"/>

        </war>
        <!-- the client proxy jar -->
        <jar jarfile="${build.dir}/Agent.jar" manifest="${src.root}/etc/Agent.mf">
            <fileset dir="${build.dir}/classes">
                <!-- Omit the third-party crypto drivers unless we need to ship with one or more of them.  Including it causes testpackage to fail -->
                <exclude name="com/l7tech/common/security/prov/phaos/**/*"/>
                <exclude name="com/l7tech/common/security/prov/rsa/**/*"/>
                <exclude name="com/l7tech/common/security/prov/ncipher/**/*"/>
                <exclude name="com/l7tech/common/security/prov/entrust/**/*"/>
                <exclude name="com/l7tech/common/security/TrustedCert**" />

                <exclude name="com/l7tech/policy/server/**/*"/>
                <exclude name="com/l7tech/policy/validator/RequestXpathAssertionValidator.class"/>
                <exclude name="com/l7tech/policy/validator/ValidatorFactory.class"/>

                <include name="com/l7tech/proxy/**/*"/>
                <exclude name="com/l7tech/common/transport/jms/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <exclude name="com/l7tech/policy/assertion/ext/**/*"/>
            </fileset>
        </jar>

        <jar jarfile="${build.dir}/Manager.jar" manifest="${src.root}/etc/Manager.mf">
            <fileset dir="${build.dir}/classes">
                <exclude name="com/l7tech/logging/rmi/**/*"/>
                <exclude name="com/l7tech/policy/server/**/*"/>
                <include name="com/l7tech/identity/*Exception*"/>
                <include name="com/l7tech/identity/cert/ClientCertManager.class"/>
                <include name="com/l7tech/identity/cert/ClientCertManagerRemote.class"/>
                <include name="com/l7tech/identity/*Client*"/>
                <include name="com/l7tech/identity/Group*"/>
                <include name="com/l7tech/identity/User*"/>
                <include name="com/l7tech/identity/Identity*"/>
                <exclude name="com/l7tech/identity/*Server*"/>
                <exclude name="com/l7tech/identity/IdentityProviderFactory.class"/>
                <include name="com/l7tech/identity/internal/InternalUser.class"/>
                <include name="com/l7tech/identity/internal/InternalGroup.class"/>
                <include name="com/l7tech/identity/ldap/*.class"/>
                <exclude name="com/l7tech/identity/ldap/LdapGroupManager.class"/>
                <exclude name="com/l7tech/identity/ldap/LdapUserManager.class"/>
                <exclude name="com/l7tech/identity/ldap/LdapIdentityProvider.class"/>
                <exclude name="com/l7tech/identity/ldap/LdapConfigTemplateManager.class"/>
                <include name="com/l7tech/common/**/*"/>
                <exclude name="com/l7tech/common/security/prov/**/*"/>
                <exclude name="com/l7tech/common/security/saml/**/*"/>
                <include name="com/l7tech/common/security/TrustedCert*.class" />
                <exclude name="com/l7tech/common/security/AesKey.class"/>
                <exclude name="com/l7tech/common/security/Cert*.class"/>
                <exclude name="com/l7tech/common/security/Jce*.class"/>
                <exclude name="com/l7tech/common/security/Rsa*.class"/>
                <!-- <exclude name="com/l7tech/common/security/**/*"/>-->
                <exclude name="com/l7tech/common/util/Pkcs12*.class"/>
                <exclude name="com/l7tech/common/security/xml/Wss*.class"/>
                <exclude name="com/l7tech/common/security/xml/*SecurityProcessor*.class"/>
                <exclude name="com/l7tech/common/security/xml/SoapMsgSigner.class"/>
                <exclude name="com/l7tech/common/security/xml/XmlMangler.class"/>
                <include name="com/l7tech/common/security/xml/ElementSecurity.class"/>

                <include name="com/l7tech/cluster/ClusterNodeInfo.class"/>
                <include name="com/l7tech/cluster/ClusterStatusAdmin.class"/>
                <include name="com/l7tech/cluster/ServiceUsage.class"/>
                <include name="com/l7tech/cluster/GatewayStatus.class"/>
                <include name="com/l7tech/cluster/LogRequest.class"/>
                <include name="com/l7tech/console/**/*"/>
                <include name="com/l7tech/remote/jini/lookup/*ServiceLookup*"/>
                <include name="com/l7tech/remote/jini/lookup/ServiceFactory.class"/>
                <include name="com/l7tech/remote/jini/export/RemoteService.class" />
                <include name="com/l7tech/logging/**/*"/>
                <include name="com/l7tech/message/**/*"/>
                <include name="com/l7tech/objectmodel/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionsRegistrar.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Impl*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Boot*"/>
                <exclude name="com/l7tech/policy/assertion/ext/CustomAssertions.class"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Netegrity*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Descriptor*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Service*"/>
                <exclude name="com/l7tech/policy/assertion/ext/*Security*"/>
                <include name="com/l7tech/service/ServiceAdmin.class"/>
                <include name="com/l7tech/service/PublishedService.class"/>
                <include name="com/l7tech/service/ServiceStatistics.class"/>
            </fileset>
        </jar>

        <!--
           ** Layer7 API jar, pack and sign
         -->
        <jar jarfile="${build.dir}/layer7-api.jar" manifest="${src.root}/etc/layer7-api.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/policy/assertion/Assertion.class"/>
                <include name="com/l7tech/policy/assertion/PolicyAssertionException.class"/>
                <include name="com/l7tech/policy/assertion/composite/CompositeAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/Category.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertion.class"/>
                <include name="com/l7tech/policy/assertion/ext/CustomAssertionPrincipal.class"/>
                <include name="com/l7tech/policy/assertion/ext/SecurityContext.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceRequest.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceResponse.class"/>
                <include name="com/l7tech/policy/assertion/ext/ServiceInvocation.class"/>
            </fileset>
        </jar>

        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}" includes="layer7-api.jar"/>
        </signjar>

        <exec executable="perl" failonerror="true" dir="installer">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="make_installers.pl"/>
            <arg line="-N"/>
        </exec>
        <!-- invoke the dssm webstart target (conditional) -->
    </target>


    <!--
      ** Ensure that all classes in the Agent and Manager jar files are loadable when the classpath
      ** contains only the jars and their declared dependency jars.
      -->
    <target name="testpackage" depends="package">
        <javac srcdir="tools" destdir="tools" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no"/>
        <exec executable="perl" failonerror="true">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/Manager.jar"/>
            <arg line="etc/Manager.mf"/>
        </exec>
        <exec executable="perl" failonerror="true">
            <env key="JAVA_HOME" value="${java.home}"/>
            <arg line="tools/checkjar.pl"/>
            <arg line="build/Agent.jar"/>
            <arg line="etc/Agent.mf"/>
        </exec>
    </target>

    <!--
      ** The SSM Webstart target. Signs the SSM components, and adds the bundle into the applicaiton (war)
      ** The target is conditional, set the ssm.webstart property to enable it.
      -->
    <target name="ssm-webstart" if="ssm.webstart">
        <!-- sign the ssm jar  -->
        <signjar keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password">
            <fileset dir="${build.dir}/lib" includes="jini-core.jar,jini-ext.jar,reggie-dl.jar,reggie.jar,jh.jar,kunststoff.jar,
                                                       looks-1.1.3.jar,odmg.jar,hibernate2.jar,oswego-concurrent.jar,wsdl4j.jar,qname.jar, xercesImpl.jar,xml-apis.jar,
                                                       axis.jar,commons-httpclient-2.0.jar,commons-lang.jar,commons-collections.jar, commons-logging.jar, forms_rt.jar,jedit-syntax.jar,
                                                       jaxen-1.1-beta-2.jar,saxpath.jar,jaxrpc.jar,saaj.jar, dom4j.jar, commons-discovery.jar"/>
        </signjar>
        <signjar jar="${build.dir}/Manager.jar" keystore="${src.root}/etc/ssgKeyStore" alias="signer" storepass="password"/>

        <war warfile="${build.dir}/${war}" update="true">
            <!-- SSM webstart -->
            <zipfileset dir="${src.root}/etc/jnlp" includes="ssm.jnlp" prefix="ssm"/>
            <zipfileset dir="${src.root}/src/com/l7tech/console/resources" includes="layer7_logo_small_64x64.gif" prefix="ssm/images"/>
            <zipfileset dir="${build.dir}/lib" includes="jini-core.jar,jini-ext.jar,reggie-dl.jar,reggie.jar,jh.jar,kunststoff.jar,
                                                         looks-1.1.3.jar,odmg.jar,hibernate2.jar,oswego-concurrent.jar,wsdl4j.jar,qname.jar, xercesImpl.jar,xml-apis.jar,
                                                         axis.jar,commons-httpclient-2.0.jar,commons-lang.jar,commons-collections.jar, commons-logging.jar, forms_rt.jar,jedit-syntax.jar,
                                                         jaxen-1.1-beta-2.jar,saxpath.jar,jaxrpc.jar,saaj.jar, dom4j.jar,commons-discovery.jar" prefix="ssm/lib"/>
            <zipfileset dir="${build.dir}" includes="Manager.jar" prefix="ssm"/>
        </war>
    </target>


    <target name="prepare.jms" if="dev.build">
        <antcall target="prepare.jms.openjms"/>
        <antcall target="prepare.jms.mqseries"/>
    </target>

    <target name="prepare.db">
        <antcall target="prepare.db.oracle8"/>
        <antcall target="prepare.db.oracle9"/>
        <antcall target="prepare.db.oracle10"/>
        <antcall target="prepare.db.mysql"/>
        <antcall target="prepare.db.postgres"/>
    </target>

    <target name="prepare.jms.openjms" if="include.jms.openjms">
        <echo>Copying OpenJMS jars from ${src.root}/lib/gateway/jms/openjms to ${build.lib}...</echo>
        <copy todir="${build.lib}">
             <fileset dir="${src.root}/lib/gateway/jms/openjms">
                 <include name="*.jar"/>
             </fileset>
        </copy>
    </target>

    <target name="prepare.jms.mqseries" if="include.jms.mqseries">
        <echo>Copying MQSeries jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jms/mqseries">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.mysql" if="db.mysql">
        <echo>Copying MySQL jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/mysql">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.postgres" if="db.postgres">
        <echo>Copying PostgreSQL jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/postgres">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle8" if="db.oracle8">
        <echo>Copying Oracle 8 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle8">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle9" if="db.oracle9">
        <echo>Copying Oracle 9 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle9">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>

    <target name="prepare.db.oracle10" if="db.oracle10">
        <echo>Copying Oracle 10 jars...</echo>
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib/gateway/jdbc/oracle10">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
    </target>


    <!--
      ** Create the directory structure, copy the resources, libs and
      ** update version tokens
      -->
    <target name="prepare">
        <!-- time stamp -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <!-- lib -->
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib">
                <include name="*.jar"/>
		        <include name="*.zip"/>
                <exclude name="**/CVS/*"/>
                <exclude name="**/**ant*"/>
                <exclude name="**/optional.jar"/>
                <exclude name="**/*junit.jar"/>
                <exclude name="**/jsdk23.jar"/>
            </fileset>

            <!-- the default crypto provider -->
            <fileset dir="${src.root}/lib/crypto/bc">
                <include name="bcprov*.jar"/>
            </fileset>
        </copy>

        <!-- the web.xml -->
        <copy todir="${build.etc}">
            <fileset dir="${src.root}/etc">
		<include name="web.xml"/>
	    </fileset>
        </copy>

        <!-- Resources -->
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <!-- <include name="hibernate.cfg.xml"/> -->
                <include name="hibernate.properties"/>
            </fileset>

            <fileset dir="${src.root}/etc/db">
                <include name="SSG.hbm.xml"/>
            </fileset>

            <fileset dir="${src.root}/etc">
                <include name="keystore.properties" if="dev.build"/>
                <include name="ssglog.properties"/>
		        <include name="spring.xml"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="**/resources/*"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/console/**/*.properties"/>
                <include name="com/l7tech/console/resources/helpset/**/*"/>
            </fileset>

            <fileset dir="${src.root}/tests">
                <include name="com/l7tech/**/*.properties" if="dev.build"/>
                <include name="com/l7tech/common/security/xml/test_*" if="dev.build"/>
            </fileset>


            <fileset dir="${src.root}/src">
                <include name="com/l7tech/proxy/resources/**"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/remote/jini/lookup/*.config"/>
            </fileset>
        </copy>
        
        <antcall target="prepare.jms"/>
        <antcall target="prepare.db"/>

        <!-- make sure that the tomcat path is properly referenced in the keystore properties -->
        <antcall target="keystore.properties"/>


        <propertyfile file="${build.classes}/ssglog.properties">
            <entry key="com.l7tech.server.log.FileHandler.path" value="${tomcat.home}/logs"/>
        </propertyfile>

        <!-- html and other static web files -->
        <copy todir="${doc.root}">
            <fileset dir="${src.root}/web" includes="**/*"
                excludes="**/CVS/*"/>
        </copy>

        <mkdir dir="${javadoc.home}"/>
    </target>

    <target name="keystore.properties" if="dev.build">
        <propertyfile file="${build.classes}/keystore.properties">
            <entry key="keystoredir" value="${tomcat.home}/kstores"/>
            <entry key="rootcakspasswd" value="${ca.keystore.password}"/>
            <entry key="sslkspasswd" value="${ssl.keystore.password}"/>
        </propertyfile>
    </target>

    <!--
      ** main compile target
      -->
    <target name="compile" depends="prepare, configure_properties" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/src">
                <!-- TODO: Emil, tell us why this is evil! -->
                <include name="com/l7tech/common/locator/services.properties"/>
            </fileset>
            <fileset dir="${src.root}/etc">
                <include name="serverconfig.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="db.properties" depends="db.properties.mysql, db.properties.postgres, db.properties.oracle8, db.properties.oracle9, db.properties.oracle10"/>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <property name="database.driver" value="${my.database.driver}"/>
        <property name="database.url" value="${my.database.url}"/>
        <property name="database.user" value="${my.database.user}"/>
        <property name="database.password" value="${my.database.password}"/>
        <property name="database.pingstmt" value="${my.database.pingstmt}"/>
    </target>

    <target name="db.properties.postgres" if="db.postgres">
        <echo>Setting database properties for PostgreSQL...</echo>
        <property name="database.driver" value="${pg.database.driver}"/>
        <property name="database.url" value="${pg.database.url}"/>
        <property name="database.user" value="${pg.database.user}"/>
        <property name="database.password" value="${pg.database.password}"/>
        <property name="database.pingstmt" value="${pg.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle8" if="db.oracle8">
        <echo>Setting database properties for Oracle 8...</echo>
        <property name="database.driver" value="${oracle8.database.driver}"/>
        <property name="database.url" value="${oracle8.database.url}"/>
        <property name="database.user" value="${oracle8.database.user}"/>
        <property name="database.password" value="${oracle8.database.password}"/>
        <property name="database.pingstmt" value="${oracle8.database.pingstmt}"/>
    </target>

    <target name="db.properties.oracle9" if="db.oracle9">
        <echo>Setting database properties for Oracle 9...</echo>
        <property name="database.driver" value="${oracle9.database.driver}"/>
        <property name="database.url" value="${oracle9.database.url}"/>
        <property name="database.user" value="${oracle9.database.user}"/>
        <property name="database.password" value="${oracle9.database.password}"/>
        <property name="database.pingstmt" value="${oracle9.database.pingstmt}"/>
    </target>


    <target name="db.properties.oracle10" if="db.oracle10">
        <echo>Setting database properties for Oracle 10...</echo>
        <property name="database.driver" value="${oracle10.database.driver}"/>
        <property name="database.url" value="${oracle10.database.url}"/>
        <property name="database.user" value="${oracle10.database.user}"/>
        <property name="database.password" value="${oracle10.database.password}"/>
        <property name="database.pingstmt" value="${oracle10.database.pingstmt}"/>
    </target>

    <!--
     ** token replacement target.
     ** This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties" depends="db.properties">

        <echo message="database.driver   = '${database.driver}'"/>
        <echo message="database.url      = '${database.url}'"/>
        <echo message="database.user     = '${database.user}'"/>
        <echo message="database.pingstmt = '${database.pingstmt}'"/>

        <replace file="${build.classes}/hibernate.properties"
            token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_URL" value="${database.url}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_USER" value="${database.user}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_PASSWORD" value="${database.password}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_PINGSTMT" value="${database.pingstmt}"/>
        <replace file="${build.etc}/web.xml"
            token="TOMCAT_HOME" value="${tomcat.home}"/>
    </target>


    <!-- ** main compile target -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="tests" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="tests">
                <include name="**/resources/*"/>
            </fileset>
        </copy>
    </target>

    <target name="test-ssg">
        <parallel>
            <antcall target="start-tomcat"/>
            <sequential>
                <waitfor maxwait="20" maxwaitunit="second" checkevery="500">
                    <http url="http://localhost:8080/"/>
                </waitfor>

                <!-- Do some tests -->

                <antcall target="stop-tomcat"/>
            </sequential>
        </parallel>
    </target>

    <target name="start-tomcat"> <!-- depends="deploy" -->
        <exec executable="${java.home}/bin/java" dir="${tomcat.home}">
            <arg line="-Djava.security.policy=${tomcat.home}/conf/catalina.policy"/>
            <arg line="-Dcatalina.home=${tomcat.home}"/>
            <arg line="-jar ${tomcat.home}/bin/bootstrap.jar"/>
            <arg line="start"/>
        </exec>

        <!--
        <java classname="org.apache.catalina.startup.Bootstrap"
            dir="${tomcat.home}"
            fork="yes"
            jvm="${java.home}/bin/java"
            maxmemory="512m">
            <sysproperty key="catalina.home" value="${tomcat.home}"/>
            <sysproperty key="java.security.policy" value="${tomcat.home}/conf/catalina.policy"/>
            <arg value="start"/>

            <classpath>
                <fileset dir="${tomcat.home}/bin">
                    <include name="bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
        -->
    </target>

    <target name="stop-tomcat">
        <exec executable="${java.home}/bin/java" dir="${tomcat.home}">
            <arg line="-Djava.security.policy=${tomcat.home}/conf/catalina.policy"/>
            <arg line="-Dcatalina.home=${tomcat.home}"/>
            <arg line="-jar ${tomcat.home}/bin/bootstrap.jar"/>
            <arg line="stop"/>
        </exec>

        <!--
        <java classname="org.apache.catlina.startup.Bootstrap"
            dir="${tomcat.home}"
            fork="yes">
            <sysproperty key="catalina.home" value="${tomcat.home}"/>
            <arg value="stop"/>
            <classpath>
                <fileset dir="${tomcat.home}/bin">
                    <include name="bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
        -->
    </target>

    <target name="make-install-image">
        <echo>Please use ssg-install-full or ssg-install-upgrade instead!</echo>
    </target>

    <target name="ssg-install-full">
        <antcall target="INTERNAL-ssg-install">
            <param name="install.full" value="true"/>
        </antcall>
    </target>

    <target name="ssg-install-upgrade">
        <antcall target="INTERNAL-ssg-install"/>
    </target>

    <target name="INTERNAL-ssg-install-optional-1" depends="INTERNAL-ssg-install-genpass, INTERNAL-ssg-install-properties-full"/>
    <target name="INTERNAL-ssg-install-optional-2" depends="INTERNAL-ssg-install-war, INTERNAL-ssg-install-keystores, INTERNAL-ssg-install-properties-upgrade"/>

    <target name="INTERNAL-ssg-install-war">
        <!-- Expand ROOT-bxxxx.war into tomcat/webapps -->
        <echo>Expanding ${install.src.war}...</echo>
        <unwar src="${install.src.war}" dest="${install.src.tomcat}/webapps/ROOT"/>

        <move todir="${install.src.conf}">
            <fileset dir="${install.src.tomcat}/webapps/ROOT/WEB-INF/classes">
                <include name="hibernate.properties"/>
            </fileset>
        </move>

    </target>

    <target name="INTERNAL-ssg-install-genpass" if="install.full">
        <echo>Generating passwords...</echo>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.root"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.gateway"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.dbadmin"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.dbuser"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ca.keystore"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ssl.keystore"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ssgadmin"/>
        <exec executable="${src.root}/etc/md5passwd.pl" outputproperty="install.pass.ssgadmin.md5">
            <arg value="admin:L7SSGDigestRealm:${install.pass.ssgadmin}"/>
        </exec>

        <echo>Writing passwords to ${install.src.passwords.txt}...</echo>
        <echo file="${install.src.passwords.txt}">root = '${install.pass.root}'
gateway = '${install.pass.gateway}'
dbadmin = '${install.pass.dbadmin}'
dbuser = '${install.pass.dbuser}'
cakeys = '${install.pass.ca.keystore}'
sslkeys = '${install.pass.ssl.keystore}'
ssgadmin = '${install.pass.ssgadmin}'
ssgadmin.md5 = '${install.pass.ssgadmin.md5}'
</echo>
    </target>

    <target name="INTERNAL-ssg-install-properties-full" if="install.full">
        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}"/>
        <echo>Patching ${install.src.keystore.properties}...</echo>

        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>
        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="rootcakspasswd=.*"/>
            <substitution expression="rootcakspasswd=${install.pass.ca.keystore}"/>
        </replaceregexp>
        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="sslkspasswd=.*"/>
            <substitution expression="sslkspasswd=${install.pass.ssl.keystore}"/>
        </replaceregexp>

        <copy file="${src.root}/etc/ssglog.properties" tofile="${install.src.ssglog.properties}"/>
        <echo>Patching ${install.src.ssglog.properties}...</echo>
        <replaceregexp file="${install.src.ssglog.properties}">
            <regexp pattern="com.l7tech.server.log.FileHandler.path=.*"/>
            <substitution expression="com.l7tech.server.log.FileHandler.path=${install.target.logs}"/>
        </replaceregexp>

        <!-- Copy cluster_hostname -->
        <copy file="${src.root}/etc/cluster_hostname" tofile="${install.src.cluster_hostname}-dist"/>
    </target>

    <target name="INTERNAL-ssg-install-properties-upgrade" unless="install.full">
        <!-- Delete stock server.xml, catalina.policy & hibernate.properties so as not to replace in-place ones -->
        <delete file="${install.src.tomcat}/conf/server.xml"/> 
        <delete file="${install.src.tomcat}/conf/catalina.policy"/>
        <delete file="${install.src.conf}/hibernate.properties"/>

        <copy file="${src.root}/etc/tomcat/server.xml" tofile="${install.src.tomcat}/conf/server.xml-dist"/>
        <copy file="${src.root}/etc/tomcat/catalina.policy" tofile="${install.src.tomcat}/conf/catalina.policy-dist"/>

        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}-dist"/>
        <replaceregexp file="${install.src.keystore.properties}-dist">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>

        <copy file="${src.root}/etc/ssglog.properties" tofile="${install.src.ssglog.properties}-dist"/>
        <echo>Patching ${install.src.ssglog.properties}-dist...</echo>
        <replaceregexp file="${install.src.ssglog.properties}-dist">
            <regexp pattern="com.l7tech.server.log.FileHandler.path=.*"/>
            <substitution expression="com.l7tech.server.log.FileHandler.path=${install.target.logs}"/>
        </replaceregexp>

        <!-- Copy hibernate.properties -->
        <property name="install.src.hibernate.properties.dist" value="${install.src.conf}/hibernate.properties-dist"/>
        <copy file="${src.root}/etc/db/${database.type}/hibernate.properties" tofile="${install.src.hibernate.properties.dist}"/>

        <!-- Copy cluster_hostname -->
        <copy file="${src.root}/etc/cluster_hostname" tofile="${install.src.cluster_hostname}-dist"/>
    </target>

    <target name="INTERNAL-ssg-install-keystores" if="install.full" depends="INTERNAL-ssg-install-genpass">
        <path id="keytool.classpath">
            <fileset dir="${src.root}/lib/crypto/bc">
                <include name="*.jar"/>
            </fileset>
        </path>

        <pathconvert refid="keytool.classpath" property="keytool.cp" pathSep=":"/>

        <echo>${keytool.cp}</echo>

        <!-- Create CA keystore -->

        <echo>Generating CA key &amp; cert...</echo>
        <delete file="${install.src.ca.keystore}"/>
        <fail unless="install.ca.hostname" message="install.ca.hostname property not set! Check install.properties!"/>

        <exec executable="java">
            <arg line="-classpath ${keytool.cp}"/>
            <arg line="sun.security.tools.KeyTool"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-keystore ${install.src.ca.keystore}"/>
            <arg line="-keypass ${install.pass.ca.keystore}"/>
            <arg line="-storepass ${install.pass.ca.keystore}"/>
            <arg line="-alias ${install.alias.ca.keystore}"/>
            <arg line="-genkey"/>
            <arg line="-dname cn=${install.ca.hostname}"/>
            <arg line="-keyalg RSA"/>
            <arg line="-sigalg SHA1withRSA"/>
        </exec>

        <!-- $KEYTOOL -export -alias ssgroot -storepass "$KEYSTORE_PASSWORD" -file "$ROOT_CERT_FILE" -keystore "$ROOT_KEYSTORE_FILE" -->
        <echo>Exporting CA cert...</echo>
        <delete file="${install.src.ca.cer}"/>
        <java classname="sun.security.tools.KeyTool" fork="true">
            <classpath refid="keytool.classpath"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-keystore ${install.src.ca.keystore}"/>
            <arg line="-export"/>
            <arg line="-alias ${install.alias.ca.keystore}"/>
            <arg line="-keypass ${install.pass.ca.keystore}"/>
            <arg line="-storepass ${install.pass.ca.keystore}"/>
            <arg line="-file ${install.src.ca.cer}"/>
        </java>

        <!-- Create SSL keystore -->
        <echo>Generating SSL key &amp; cert...</echo>
        <delete file="${install.src.ssl.keystore}"/>
        <fail unless="install.ssg.hostname" message="install.ssg.hostname property not set! Check install.properties!"/>
        <java classname="sun.security.tools.KeyTool" fork="true">
            <classpath refid="keytool.classpath"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-genkey"/>
            <arg line="-alias ${install.alias.ssl.keystore}"/>
            <arg line="-dname cn=${install.ssg.hostname}"/>
<!--            <arg line="-keyalg RSA"/>-->
<!--            <arg line="-sigalg SHA1withRSA"/>-->
            <arg line="-keypass ${install.pass.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <!-- Create SSL CSR -->
        <echo>Exporting SSL CSR...</echo>
        <delete file="${install.src.ssl.csr}"/>
        <java classname="sun.security.tools.KeyTool" fork="true">
            <classpath refid="keytool.classpath"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-certreq"/>
            <arg line="-keyalg RSA"/>
            <arg line="-alias ${install.alias.ssl.keystore}"/>
            <arg line="-file '${install.src.ssl.csr}'"/>
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <path id="classpath">
            <pathelement path="${src.root}/build/classes"/>
            <fileset dir="${src.root}/lib">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
        </path>

        <!-- Sign it! -->
        <echo>Signing SSL certificate...</echo>
        <delete file="${install.src.ssl.cer}"/>
        <java classname="com.l7tech.identity.cert.RsaCertificateSigner" classpathref="classpath">
            <arg line="${install.src.ca.keystore}"/>
            <arg line="${install.pass.ca.keystore}"/>
            <arg line="${install.alias.ca.keystore}"/>
            <arg line="${install.pass.ca.keystore}"/>
            <arg line="${install.src.ssl.csr}"/>
            <arg line="${install.src.ssl.cer}"/>
        </java>

        <!--
        $KEYTOOL -import -noprompt -file $ROOT_CERT_FILE -alias ssgroot -keystore $SSL_KEYSTORE_FILE -storepass $KEYSTORE_PASSWORD
        $KEYTOOL -import -noprompt -file $SSL_CERT_FILE -alias tomcat -keystore $SSL_KEYSTORE_FILE -storepass $KEYSTORE_PASSWORD
        -->
        <echo>Importing CA certificate into SSL keystore...</echo>
        <java classname="sun.security.tools.KeyTool" fork="true">
            <classpath refid="keytool.classpath"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-import"/>
            <arg line="-noprompt"/>
            <arg line="-file ${install.src.ca.cer}"/>
            <arg line="-alias ${install.alias.ca.keystore}"/>
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <echo>Importing signed SSL certificate into SSL keystore...</echo>
        <java classname="sun.security.tools.KeyTool" fork="true">
            <classpath refid="keytool.classpath"/>
            <arg line="-provider org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            <arg line="-storetype BCPKCS12"/>
            <arg line="-import"/>
            <arg line="-noprompt"/>
            <arg line="-file ${install.src.ssl.cer}"/>
            <arg line="-alias ${install.alias.ssl.keystore}"/>
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <!-- Copy server.xml & catalina.policy -->
        <copy todir="${install.src.tomcat}/conf">
            <fileset dir="${src.root}/etc/tomcat">
                <include name="server.xml"/>
                <include name="catalina.policy"/>
            </fileset>
        </copy>

        <!-- Hack server.xml -->
        <echo>Patching ${install.src.server.xml}...</echo>
        <replaceregexp file="${install.src.server.xml}">
            <regexp pattern='keystoreFile\s*=\s*"[a-zA-Z0-9 \/\-\.\\]*"'/>
            <substitution expression='keystoreFile="${install.target.ssl.keystore}"'/>
        </replaceregexp>

        <replaceregexp file="${install.src.server.xml}">
            <regexp pattern='keystorePass\s*=\s*"[a-zA-Z0-9 \/\-\.\\]*"'/>
            <substitution expression='keystorePass="${install.pass.ssl.keystore}"'/>
        </replaceregexp>

    </target>

    <target name="INTERNAL-ssg-install" depends="init-dev">
        <fail unless="install.build.number" message="Set the install.build.number property before running this target!"/>
        <property file="etc/install.properties"/>

        <fail unless="install.tomcat.tar.gz" message="Set the install.tomcat.tar.gz property or create install.properties!"/>
        <fail unless="install.jdk.tar.gz" message="Set the install.jdk.tar.gz property or create install.properties!"/>

        <condition property="tomcat.exists">
            <available file="${install.tomcat.tar.gz}"/>
        </condition>

        <condition property="jdk.exists">
            <available file="${install.jdk.tar.gz}"/>
        </condition>

        <fail unless="tomcat.exists" message="Couldn't find ${install.tomcat.tar.gz}! Check your install.properties file!"/>
        <fail unless="jdk.exists" message="Couldn't find ${install.jdk.tar.gz}! Check your install.properties file!"/>

        <!-- Relative pathnames -->
        <property name="install.rel.dist" value="dist"/>
        <property name="install.rel.doc" value="doc"/>
        <property name="install.rel.etc" value="etc"/>
        <property name="install.rel.bin" value="bin"/>
        <property name="install.rel.logs" value="logs"/>
        <property name="install.rel.ldap" value="${install.rel.etc}/ldapTemplates"/>
        <property name="install.rel.conf" value="${install.rel.etc}/conf"/>
        <property name="install.rel.keys" value="${install.rel.etc}/keys"/>
        <property name="install.rel.sql" value="${install.rel.etc}/sql"/>
        <property name="install.rel.ca.keystore" value="${install.rel.keys}/ca.ks"/>
        <property name="install.rel.ssl.keystore" value="${install.rel.keys}/ssl.ks"/>
        <property name="install.rel.ssl.csr" value="${install.rel.keys}/ssl.csr"/>
        <property name="install.rel.ssl.cer" value="${install.rel.keys}/ssl.cer"/>

        <!-- Absolute source paths -->
        <property name="install.src.base" value="${build.dir}/install/ssg"/>
        <property name="install.src.bin" value="${install.src.base}/${install.rel.bin}"/>
        <property name="install.src.lib" value="${install.src.base}/lib"/>
        <property name="install.src.dist" value="${install.src.base}/${install.rel.dist}"/>
        <property name="install.src.doc" value="${install.src.base}/${install.rel.doc}"/>
        <property name="install.src.jdk" value="${install.src.base}/${install.rel.jdk}"/>
        <property name="install.src.tomcat" value="${install.src.base}/${install.rel.tomcat}"/>

        <property name="install.src.etc" value="${install.src.base}/${install.rel.etc}"/>
        <property name="install.src.keys" value="${install.src.base}/${install.rel.keys}"/>
        <property name="install.src.sql" value="${install.src.base}/${install.rel.sql}"/>
        <property name="install.src.ca.keystore" value="${install.src.base}/${install.rel.ca.keystore}"/>
        <property name="install.src.ssl.keystore" value="${install.src.base}/${install.rel.ssl.keystore}"/>
        <property name="install.src.ssl.csr" value="${install.src.base}/${install.rel.ssl.csr}"/>
        <property name="install.src.ssl.cer" value="${install.src.base}/${install.rel.ssl.cer}"/>

        <property name="install.src.conf" value="${install.src.base}/${install.rel.conf}"/>
        <property name="install.src.passwords.txt" value="${install.src.base}/passwords.txt"/>
        <property name="install.src.keystore.properties" value="${install.src.conf}/keystore.properties"/>
        <property name="install.src.cluster_hostname" value="${install.src.conf}/cluster_hostname"/>
        <property name="install.src.ssglog.properties" value="${install.src.conf}/ssglog.properties"/>
        <property name="install.src.server.xml" value="${install.src.tomcat}/conf/server.xml"/>
        <property name="install.src.logs" value="${install.src.base}/${install.rel.logs}"/>
        <property name="install.src.web-inf" value="${install.src.tomcat}/webapps/ROOT/WEB-INF"/>
        <property name="install.src.ldap" value="${install.src.base}/${install.rel.ldap}"/>
        <property name="install.rel.jdk" value="${install.jdk.dir}"/>
        <property name="install.rel.tomcat" value="${install.tomcat.dir}"/>
        <!-- Absolute target paths -->
        <property name="install.target.base" value="/ssg"/>
        <property name="install.target.keys" value="${install.target.base}/${install.rel.keys}"/>
        <property name="install.target.ldap" value="${install.target.base}/${install.rel.ldap}"/>
        <property name="install.target.tomcat" value="${install.target.base}/${install.rel.tomcat}"/>
        <property name="install.target.jdk" value="${install.target.base}/${install.rel.jdk}"/>
        <property name="install.target.ssl.keystore" value="${install.target.keys}/${install.rel.ssl.keystore}"/>
        <property name="install.target.logs" value="${install.target.base}/${install.rel.logs}"/>

        <property name="install.alias.ca.keystore" value="ssgroot"/>
        <property name="install.alias.ssl.keystore" value="tomcat"/>
        <property name="install.src.war" value="${install.src.dist}/ROOT-b${install.build.number}.war"/>

        <echo>Making directories...</echo>
        <mkdir dir="${install.src.base}"/>
        <mkdir dir="${install.src.lib}"/>
        <mkdir dir="${install.src.dist}"/>
        <mkdir dir="${install.src.doc}"/>
        <mkdir dir="${install.src.etc}"/>
        <mkdir dir="${install.src.sql}"/>
        <mkdir dir="${install.src.ldap}"/>
        <mkdir dir="${install.src.bin}"/>
        <mkdir dir="${install.src.keys}"/>
        <mkdir dir="${install.src.conf}"/>
        <mkdir dir="${install.src.logs}"/>

        <antcall target="INTERNAL-ssg-install-optional-1"/>

        <!-- Extract Tomcat & JDK tarballs -->
        <untar src="${install.tomcat.tar.gz}" dest="${install.src.base}" compression="gzip"/>
        <untar src="${install.jdk.tar.gz}" dest="${install.src.base}" compression="gzip"/>

        <!-- Copy WAR file into position -->
        <copy file="${build.dir}/${war}" tofile="${install.src.war}"/>

        <!-- Copy LDAP templates -->
        <copy todir="${install.src.ldap}">
            <fileset dir="${src.root}/etc/ldapTemplates" includes="**/*.xml"/>
        </copy>

        <antcall target="INTERNAL-ssg-install-optional-2"/>

        <!-- Copy misc. stuff -->
        <copy todir="${install.src.sql}" file="${src.root}/etc/db/${database.type}/ssg.sql"/>
        <copy todir="${install.src.bin}">
            <fileset dir="${src.root}/etc">
                <include name="setkeys.sh"/>
                <include name="resetAdmin.sh"/>
                <include name="md5passwd.pl"/>
                <include name="rpass.pl"/>
                <include name="ssgruntimedefs.sh"/>
                <include name="clean_db.pl"/>
                <include name="dbfaildetect.sh"/>

            </fileset>
        </copy>

        <!-- Hack ssgruntimedefs.sh -->
        <echo>Patching ${install.src.bin}/ssgruntimedefs.sh...</echo>
        <replaceregexp file="${install.src.bin}/ssgruntimedefs.sh">
            <regexp pattern="TOMCAT_HOME\s*=\s*[a-zA-Z0-9 _\/\-\.\\]*"/>
            <substitution expression="TOMCAT_HOME=${install.target.tomcat}"/>
        </replaceregexp>
        <replaceregexp file="${install.src.bin}/ssgruntimedefs.sh">
            <regexp pattern="JAVA_HOME\s*=\s*[a-zA-Z0-9 _\/\-\.\\]*"/>
            <substitution expression="JAVA_HOME=${install.target.jdk}"/>
        </replaceregexp>

        <!-- Make scripts executable -->
        <echo>Setting execute permissions on scripts...</echo>
        <chmod perm="0755">
            <fileset dir="${install.src.bin}">
                <include name="*.sh"/>
                <include name="*.pl"/>
            </fileset>
            <fileset dir="${install.src.jdk}">
                <include name="bin/*"/>
                <include name="jre/bin/*"/>
            </fileset>
            <fileset dir="${install.src.tomcat}/bin">
                <include name="*.sh"/>
            </fileset>
        </chmod>

        <!-- Create tarball -->
        <property name="tarball" value="${build.dir}/ssg-${install.ssg.hostname}-b${install.build.number}.tar.gz"/>
        <echo>Creating ${tarball}...</echo>
        <exec executable="tar" dir="${build.dir}/install">
            <arg line="-czf ${tarball}"/>
            <arg line="."/>
        </exec>
        <echo>BUILD COMPLETE - Produced ${tarball}!</echo>
    </target>


    <target name="OFFICIAL-build" depends="init-dev">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>

        <input message="This will increment the OFFICIAL build count in CVS.  Are you sure you want to do this?" validargs="Y,y,N,n" addproperty="sure"/>

        <condition property="die">
            <not>
                <or>
                    <equals arg1="${sure}" arg2="y"/>
                    <equals arg1="${sure}" arg2="Y"/>
                </or>
            </not>
        </condition>
        <fail if="die" message="Aborted at user request."/>

        <input message="Enter a version number" addproperty="build.version"/>

        <echo>Running cvs update ${buildnumber.file}</echo>
        <cvs command="update -A -C build.number"/>

        <buildnumber/>

        <antcall target="clean"/>
        <antcall target="INTERNAL-buildinfo" />
        <antcall target="package"/>
        <antcall target="ssm-webstart"/>
        <antcall target="testpackage"/>

        <echo message="commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number"/>
        <cvs command="commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number"/>
    </target>

    <target name="INTERNAL-buildinfo">
        <property name="hostname" value="buildmachine.l7tech.com"/>

        <tstamp>
            <format property="build.date" pattern="yyyyMMdd"/>
            <format property="build.time" pattern="HHmmss"/>
        </tstamp>

        <echo>Setting version in Nullsoft Installer source files to ${build.version}</echo>
        <replaceregexp match='define MUI_VERSION ".*"' replace='define MUI_VERSION "${build.version}"'>
            <fileset dir="${src.root}">
                <include name="installer/proxy/win32/Agent.nsi"/>
                <include name="installer/console/win32/Manager.nsi"/>
            </fileset>
        </replaceregexp>

        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_NUMBER"/>
            <param name="param_value" value="${build.number}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_VERSION"/>
            <param name="param_value" value="${build.version}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_NAME"/>
            <param name="param_value" value="${app.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_DATE"/>
            <param name="param_value" value="${build.date}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_TIME"/>
            <param name="param_value" value="${build.time}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_USER"/>
            <param name="param_value" value="${user.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_MACHINE"/>
            <param name="param_value" value="${hostname}"/>
        </antcall>
    </target>

    <target name="INTERNAL-buildinfo-replace">
        <echo>Replacing ${param_name} with ${param_value}</echo>
        <replaceregexp match='${param_name} = ".*"' replace='${param_name} = "${param_value}"'>
            <fileset dir="${src.root}/src">
                <include name="com/l7tech/common/BuildInfo.java"/>
            </fileset>
        </replaceregexp>
    </target>
</project>
