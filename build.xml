<?xml version="1.0"?>
<project name="UneasyRooster" default="dev" basedir=".">
    <!-- Uncomment for jikes/emacs to be used
    <property name="build.compiler" value="jikes"/>
    <property name="build.compiler.emacs" value="true"/> -->

    <!-- Set src.root to ${basedir} if not already set -->
    <property name="src.root" value="${basedir}"/>

    <!-- as the file name says -->
    <property file="${src.root}/etc/ssg.version"/>

    <!-- override configuration with user properties -->
    <property file="${user.home}/build.properties"/>

    <!--
      ** Set default build properties
      ** Properties that were not specified in user properties
    -->
    <property file="${src.root}/etc/default_build.properties"/>

    <!-- where the builds go -->
    <property name="dist.build.home" value="${src.root}/dist"/>
    <property name="dev.build.home" value="${src.root}/build"/>

    <!-- distribution archive names -->
    <!--
    <property name="war" value="${app.name}.war"/>
    -->
    <property name="war" value="ROOT.war"/>
    <property name="tar" value="${app.name}.tar"/>
    <property name="tar.gz" value="${app.name}_${app.version}.tar.gz"/>

    <!-- ear not used
      <property name="ear"        value="${app.name}.ear"/>
    -->

    <!-- project classpath -->
    <path id="project.class.path">
        <pathelement location="src"/>
        <fileset dir="lib">
            <include name="*.jar"/>
            <!--
               * Issue with multiple parsers.
               * JDK 1.4 ships it's own parses and contributes to the
               * overall parser mess. java.beans.XmlEncoder and other
               * classes  do not like xerces so excluded it from project
               * classpath.
               * It is not throughly tested to see if this breaks other things.

           fla note: xercesImpl.jar and xml-apis.jar are required by xss4j for xml-enc features.
           <exclude name="*xerces*"/>
           <exclude name="*xml-api*"/>
           -->
        </fileset>
        <fileset dir="lib">
            <include name="*.zip"/>
        </fileset>
    </path>
    <property name="test.class.path" refid="project.class.path"/>

    <!--
       * jars that go in $TOMCAT_HOME/common/lib
       * currently in ant this is used in conjunction with
       * fileset (look for patternset id usage throughout this
       * build.xml for examples)
    -->
    <!-- obsolete in recent Tomcat versions
    <property name="common.lib.jars"
              value="saaj.jar, jaxrpc.jar"/>

              -->
    <!--
      ** init dev target The "dev" target depends on this target.
      -->
    <target name="init-dev">
        <property name="build.dir" value="${dev.build.home}"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>
        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
        <property name="app.name" value="Layer 7 SecureSpan Suite"/>
        <property name="app.version" value="HEAD"/>

        <condition property="db.mysql">
            <equals arg1="${database.type}" arg2="mysql"/>
        </condition>

        <condition property="db.postgres">
            <equals arg1="${database.type}" arg2="postgres"/>
        </condition>
    </target>


    <!--
      ** config dist target. The "dist" target depends on this target.
      -->
    <target name="init-dist">
        <property name="dist.build" value="true"/>
        <property name="build.dir" value="${dist.build.home}"/>

        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="doc.root" value="${build.dir}/htdocs"/>
        <property name="build.lib" value="${build.dir}/lib"/>
        <property name="build.etc" value="${build.dir}/etc"/>

        <!-- javadoc home -->
        <property name="javadoc.home" value="${doc.root}/javadoc"/>
    </target>


    <target name="cleandev" depends="clean, dev"/>
    <target name="redeploy" depends="undeploy, deploy"/>

    <!--
      ** configure and invoke developer's build
      -->
    <target name="dev" depends="init-dev">
        <property file="build.number"/>
        <property name="build.version" value="HEAD"/>

        <antcall target="INTERNAL-buildinfo"/>

        <antcall target="compile">
        </antcall>
        <antcall target="compile-tests">
        </antcall>

        <antcall target="compile-one">
        </antcall>
    </target>

    <!--
      ** configure and invoke developer's build for source files
      ** that match the pattern passed as -Dcompile.pattern
      -->
    <target name="compile-one" depends="init-dev" if="compile.pattern">
        <echo message="Compiling **/*${compile.pattern}* in ${src.root}."/>
        <javac srcdir="src" destdir="${build.classes}" debug="on"
            optimize="off"
            includes="**/*${compile.pattern}*" deprecation="on" depend="on"
            verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="undeploy" depends="init-dev">
        <delete dir="${tomcat.home}/webapps/ROOT"/>
        <delete file="${war}"/>
    </target>

    <!--
      ** developer's 'deploy' target.
      ** compile and package the application.
      ** Then deploy a package into the ${tomcat.home}/webapps ($TOMCAT_HOME/webapps)
      -->
    <target name="deploy" depends="init-dev">
        <antcall target="package">
        </antcall>

        <!--
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        -->
        <copy todir="${tomcat.home}/webapps">
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>

        <!--
          ** Java 1.4 changed the rules as to to how packages beginning in java.* and javax.*
          **  get loaded. Specifically, they only get loaded from endorsed directories.
          ** jaxrpc.jar and saaj.jar contain javax packages, so may not get picked up.
          ** Copy such libraries into $TOMCAT_HOME/common/lib
          **  -->
        <!-- Obsolete in later Tomcat versions
        <copy todir="${tomcat.home}/common/lib">
            <fileset dir="${src.root}/lib" includes="${common.lib.jars}"/>
        </copy>
        -->

        <!--
          this server.xml is ready to be modified by sslGen.sh who will later
          make the ssl cert and record it's keystore password in it
        -->
        <copy todir="${tomcat.home}/conf">
            <fileset dir="${src.root}/etc" includes="server.xml, catalina.policy"/>
        </copy>
    </target>

    <!--
      ** configure and invoke unit tests
      -->
    <target name="test" depends="dev">
        <junit printsummary="yes" haltonfailure="yes" fork="off">
            <classpath>
                <pathelement path="${test.class.path}"/>
                <pathelement path="${build.dir}/classes"/>
            </classpath>

            <formatter type="plain"/>
            <sysproperty key="src.root" value="${src.root}"/>
            <test name="com.l7tech.identity.ldap.LdapIdentityProviderServerTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.ThreadPoolTest" haltonfailure="no"/>
            <test name="com.l7tech.common.locator.AbstractLocatorTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.datamodel.SsgManagerTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.FunctionalTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.ClientPolicyTest" haltonfailure="no"/>
            <test name="com.l7tech.service.WsdlTest" haltonfailure="no"/>
            <test name="com.l7tech.proxy.policy.ClientPolicyFactoryTest" haltonfailure="no"/>
            <test name="com.l7tech.server.policy.ServerPolicyFactoryTest" haltonfailure="no"/>
            <test name="com.l7tech.policy.server.filter.FilterTest" haltonfailure="no"/>
            <test name="com.l7tech.common.util.ExceptionUtilsTest" haltonfailure="no"/>
            <!--
             ** add policy tests into the com.l7tech.policy.AllTests class
            -->
            <test name="com.l7tech.policy.AllTests" haltonfailure="no"/>
            <!--
            ** TODO: make sure -security flag is added to the 'nightly' build/test
            ** Tomcat config. When done enable the tests below.
            **
           <test name="com.l7tech.adminws.LogCLientTest" haltonfailure="no"/>
           <test name="com.l7tech.adminws.identity.ClientTest" haltonfailure="no"/>
           <test name="com.l7tech.adminws.service.ServiceManagerTest" haltonfailure="no"/>
           -->
            <!--
              ** add tests here **
              -->
        </junit>
    </target>

    <!--
      ** Clean the directory structure.
      ** This is used only by developer's build.
      -->
    <target name="clean" depends="init-dev">
        <delete dir="${build.classes}"/>
        <delete dir="${src.root}/src/com/l7tech/corba/ens"/>
        <delete dir="${doc.root}"/>
        <delete dir="${build.lib}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${javadoc.home}"/>
        <delete file="${src.root}/src/com/l7tech/util/Version.java"/>
    </target>

    <!-- javadoc target -->
    <target name="javadoc" depends="prepare">
        <javadoc packagenames="com.*" sourcepath="src"
            destdir="${javadoc.home}">
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!--
      ** Non 'build' targets from this point; just various helper
  targets.
      ** Please do not invoke below targets as main targets.
    -->

    <path id="cpjars">
        <fileset dir="${src.root}/lib">
            <include name="axis.jar"/>
            <include name="axis-ant.jar"/>
        </fileset>
    </path>

    <!--
      ** 'package' target.
      ** package the application ( both client and server) in their
      ** respective archives (war, jar).
      ** This target is invoked by other targets such as deploy and dist.
      -->
    <target name="package" depends="init-dev, compile">
        <pathconvert refid="cpjars" pathsep=" " property="foo"/>

        <!-- the ssg war -->
        <war warfile="${build.dir}/${war}" webxml="${build.etc}/web.xml">
            <lib dir="${build.dir}/lib">
                <exclude name="ant.jar"/>
                <exclude name="axis-ant.jar"/>
                <exclude name="cachedir"/>
                <exclude name="catalina*.jar"/>
                <exclude name="commons-logging.jar"/>
                <exclude name="forms_rt.jar"/>
                <exclude name="jh.jar"/>
                <exclude name="jsdk23.jar"/>
                <exclude name="jython.jar"/>
                <exclude name="kunststoff.jar"/>
                <exclude name="log4j*.jar"/>
                <exclude name="org.mortbay.jetty.jar"/>
                <exclude name="servlet.jar"/>
            </lib>
            <classes dir="${build.classes}">
                <include name="SSG.hbm.xml"/>
                <include name="*.properties"/>
                <include name="com/l7tech/adminws/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <exclude name="com/l7tech/common/gui"/>
                <include name="com/l7tech/console/event/*"/>
                <include name="com/l7tech/identity/**/*"/>
                <include name="com/l7tech/jini/**/*"/>
                <include name="com/l7tech/logging/**/*"/>
                <include name="com/l7tech/message/**/*"/>
                <include name="com/l7tech/objectmodel/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/server/**/*"/>
                <include name="com/l7tech/service/**/*"/>
            </classes>

            <zipfileset dir="${src.root}/etc" prefix="WEB-INF">
                <include name="server-config.wsdd"/>
                <include name="jboss-web.xml"/>
            </zipfileset>
            <zipfileset dir="${src.root}/src/com/l7tech/common/locator" includes="services.properties" prefix="WEB-INF/classes/com/l7tech/common/locator"/>
            <zipfileset dir="${src.root}/web" includes="index.html" prefix="ssg"/>
            <zipfileset dir="${src.root}/web" includes="index.html"/>
            <!-- Jini config -->
            <zipfileset dir="${src.root}/etc/jini" includes="start-services.config, services.config, services.policy" prefix="WEB-INF/classes"/>
        </war>
        <!-- the client proxy jar -->
        <jar jarfile="${build.dir}/Agent.jar" manifest="${src.root}/etc/Agent.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/proxy/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
            </fileset>
        </jar>
        <!-- the console jar -->
        <jar jarfile="${build.dir}/Manager.jar" manifest="${src.root}/etc/Manager.mf">
            <fileset dir="${build.dir}/classes">
                <include name="com/l7tech/adminws/**/*"/>
                <include name="com/l7tech/common/**/*"/>
                <include name="com/l7tech/console/**/*"/>
                <include name="com/l7tech/identity/**/*"/>
                <include name="com/l7tech/jini/**/*"/>
                <include name="com/l7tech/logging/**/*"/>
                <include name="com/l7tech/message/**/*"/>
                <include name="com/l7tech/objectmodel/**/*"/>
                <include name="com/l7tech/policy/**/*"/>
                <include name="com/l7tech/service/**/*"/>
            </fileset>
        </jar>
    </target>

    <!--
      ** Create the directory structure, copy the resources, libs and
      ** update version tokens
      -->
    <target name="prepare">
        <fail unless="database.type" message="The database.type property must be set!"/>

        <!-- time stamp -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.etc}"/>
        <mkdir dir="${build.etc}/deploy"/>
        <mkdir dir="${doc.root}"/>
        <!-- lib -->
        <copy todir="${build.lib}">
            <fileset dir="${src.root}/lib"
                excludes="**/CVS/*,**/**ant*,**/optional.jar,
                          **/*junit.jar, **/jsdk23.jar"/>
        </copy>

        <!-- the web.xml -->
        <copy todir="${build.etc}">
            <fileset dir="${src.root}/etc" includes="web.xml"/>
        </copy>

        <!-- Resources -->
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/etc/db/${database.type}">
                <!-- <include name="hibernate.cfg.xml"/> -->
                <include name="hibernate.properties"/>
                <include name="SSG.hbm.xml"/>
            </fileset>

            <fileset dir="${src.root}/etc">
                <include name="keystore.properties"/>
                <include name="ssglog.properties"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="**/resources/*"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/console/**/*.properties"/>
 		        <include name="com/l7tech/console/resources/helpset/**/*"/>
            </fileset>

            <fileset dir="${src.root}/tests">
                <include name="com/l7tech/**/*.properties"/>
            </fileset>


            <fileset dir="${src.root}/src">
                <include name="com/l7tech/proxy/resources/**"/>
            </fileset>

            <fileset dir="${src.root}/src">
                <include name="com/l7tech/jini/lookup/*.config"/>
            </fileset>
        </copy>

        <!-- make sure that the tomcat path is properly referenced in the keystore properties -->
        <propertyfile file="${build.classes}/keystore.properties">
            <entry key="keystoredir" value="${tomcat.home}/kstores"/>
        </propertyfile>

        <!-- html and other static web files -->
        <copy todir="${doc.root}">
            <fileset dir="${src.root}/web" includes="**/*"
                excludes="**/CVS/*"/>
        </copy>

        <mkdir dir="${javadoc.home}"/>
    </target>

    <!--
      ** main compile target
      -->
    <target name="compile" depends="init-dev, prepare, configure_properties" unless="compile.pattern">
        <javac srcdir="src" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.root}/src">
                <!-- TODO: Emil, tell us why this is evil! -->
                <include name="com/l7tech/common/locator/services.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="db.properties" depends="db.properties.mysql, db.properties.postgres"/>

    <target name="db.properties.mysql" if="db.mysql">
        <echo>Setting database properties for MySQL...</echo>
        <property name="database.driver" value="${my.database.driver}"/>
        <property name="database.url" value="${my.database.url}"/>
        <property name="database.user" value="${my.database.user}"/>
        <property name="database.password" value="${my.database.password}"/>
    </target>

    <target name="db.properties.postgres" if="db.postgres">
        <echo>Setting database properties for PostgreSQL...</echo>
        <property name="database.driver" value="${pg.database.driver}"/>
        <property name="database.url" value="${pg.database.url}"/>
        <property name="database.user" value="${pg.database.user}"/>
        <property name="database.password" value="${pg.database.password}"/>
    </target>

    <!--
     ** token replacement target.
     ** This should be done ONLY for non distribution builds.
     -->
    <target name="configure_properties" unless="dist.build" depends="db.properties">

        <!--
        <echo message="The database url is '${database.url}'"/>
        <echo message="The database url is '${database.user}'"/>
        <echo message="The database url is '${database.password}'"/>
        -->

        <replace file="${build.classes}/hibernate.properties"
            token="DB_DRIVER" value="${database.driver}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_URL" value="${database.url}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_USER" value="${database.user}"/>
        <replace file="${build.classes}/hibernate.properties"
            token="DB_PASSWORD" value="${database.password}"/>
        <replace file="${build.etc}/web.xml"
            token="TOMCAT_HOME" value="${tomcat.home}"/>
    </target>


    <!-- ** main compile target -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="tests" destdir="${build.classes}" debug="on" optimize="off"
            deprecation="on" depend="on" verbose="no">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="tests">
                <include name="**/resources/*"/>
            </fileset>
        </copy>
    </target>

    <target name="BROKEN-start-tomcat">
        <java classname="org.apache.catalina.startup.Bootstrap"
            dir="${tomcat.home}"
            fork="yes"
            jvm="${java.home}/bin/java"
            maxmemory="128m">
            <jvmarg value="-Djava.compiler=NONE"/>
            <sysproperty key="catalina.home" value="${tomcat.home}"/>
            <arg value="start"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="BROKEN-stop-tomcat">
        <java classname="org.apache.tomcat.startup.Tomcat"
            dir="${tomcat.home}"
            fork="yes">
            <sysproperty key="catalina.home" value="${tomcat.home}"/>
            <arg value="stop"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="make-install-image" depends="init-dev">
        <fail unless="install.build.number" message="Set the install.build.number property before running this target!"/>
        <property file="${src.root}/etc/install.properties"/>

        <fail unless="install.tomcat.tar.gz" message="Set the install.tomcat.tar.gz property or create install.properties!"/>
        <fail unless="install.jdk.tar.gz" message="Set the install.jdk.tar.gz property or create install.properties!"/>

        <condition property="tomcat.exists">
            <available file="${install.tomcat.tar.gz}"/>
        </condition>

        <condition property="jdk.exists">
            <available file="${install.jdk.tar.gz}"/>
        </condition>

        <fail unless="tomcat.exists" message="Couldn't find ${install.tomcat.tar.gz}! Check your install.properties file!"/>
        <fail unless="jdk.exists" message="Couldn't find ${install.jdk.tar.gz}! Check your install.properties file!"/>

        <echo>SSG hostname = ${install.ssg.hostname}</echo>
        <echo>CA hostname = ${install.ca.hostname}</echo>

        <echo>Making directories...</echo>
        <mkdir dir="${install.src.base}"/>
        <mkdir dir="${install.src.dist}"/>
        <mkdir dir="${install.src.doc}"/>
        <mkdir dir="${install.src.etc}"/>
        <mkdir dir="${install.src.keys}"/>
        <mkdir dir="${install.src.conf}"/>

        <echo>Generating passwords...</echo>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.root"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.gateway"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.dbadmin"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.dbuser"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ca.keystore"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ssl.keystore"/>
        <exec executable="${src.root}/etc/rpass.pl" outputproperty="install.pass.ssgadmin"/>
        <exec executable="${src.root}/etc/md5passwd.pl" outputproperty="install.pass.ssgadmin.md5">
            <arg value="admin:L7SSGDigestRealm:${install.pass.ssgadmin}"/>
        </exec>

        <echo>Writing passwords to ${install.src.passwords.txt}...</echo>
        <echo file="${install.src.passwords.txt}">root = '${install.pass.root}'
gateway = '${install.pass.gateway}'
dbadmin = '${install.pass.dbadmin}'
dbuser = '${install.pass.dbuser}'
cakeys = '${install.pass.ca.keystore}'
sslkeys = '${install.pass.ssl.keystore}'
ssgadmin = '${install.pass.ssgadmin}'
ssgadmin.md5 = '${install.pass.ssgadmin.md5}'
</echo>

        <copy file="${src.root}/etc/keystore.properties" tofile="${install.src.keystore.properties}"/>
        <echo>Patching ${install.src.keystore.properties}...</echo>

        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="keystoredir=.*"/>
            <substitution expression="keystoredir=${install.target.keys}"/>
        </replaceregexp>
        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="rootcakspasswd=.*"/>
            <substitution expression="rootcakspasswd=${install.pass.ca.keystore}" />
        </replaceregexp>
        <replaceregexp file="${install.src.keystore.properties}">
            <regexp pattern="sslkspasswd=.*"/>
            <substitution expression="sslkspasswd=${install.pass.ssl.keystore}"/>
        </replaceregexp>

        <untar src="${install.tomcat.tar.gz}" dest="${install.src.base}" compression="gzip"/>
        <untar src="${install.jdk.tar.gz}" dest="${install.src.base}" compression="gzip"/>

        <copy file="${build.dir}/${war}" tofile="${install.src.war}"/>
        <copy todir="${install.src.tomcat}/conf">
            <fileset dir="${src.root}/etc" includes="server.xml, catalina.policy"/>
        </copy>

        <!-- Create CA keystore -->
        <delete file="${install.src.ca.keystore}"/>
        <fail unless="install.ca.hostname" message="install.ca.hostname property not set! Check install.properties!"/>
        <java classname="sun.security.tools.KeyTool">
            <arg line="-keystore ${install.src.ca.keystore}"/>
            <arg line="-genkey"/>
            <arg line="-alias ${install.alias.ca.keystore}"/>
            <arg line="-dname cn=${install.ca.hostname}"/>
            <arg line="-keyalg RSA"/>
            <arg line="-keypass ${install.pass.ca.keystore}"/>
            <arg line="-storepass ${install.pass.ca.keystore}"/>
        </java>

        <!-- Create SSL keystore -->
        <delete file="${install.src.ssl.keystore}"/>
        <fail unless="install.ssg.hostname" message="install.ssg.hostname property not set! Check install.properties!"/>
        <java classname="sun.security.tools.KeyTool">
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-genkey"/>
            <arg line="-alias ${install.alias.ssl.keystore}"/>
            <arg line="-dname cn=${install.ssg.hostname}"/>
            <arg line="-keyalg RSA"/>
            <arg line="-keypass ${install.pass.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <!-- Create SSL CSR -->
        <delete file="${install.src.ssl.csr}"/>
        <java classname="sun.security.tools.KeyTool">
            <arg line="-certreq"/>
            <arg line="-keyalg RSA"/>
            <arg line="-alias ${install.alias.ssl.keystore}"/>
            <arg line="-file ${install.src.ssl.csr}"/>
            <arg line="-keystore ${install.src.ssl.keystore}"/>
            <arg line="-storepass ${install.pass.ssl.keystore}"/>
        </java>

        <path id="install.classpath">
            <pathelement path="${src.root}/build/classes"/>
            <fileset dir="${src.root}/lib">
                <include name="*.jar"/>
            </fileset>
        </path>

        <!-- Sign it! -->
        <!-- java RSASigner rootkstorePath rootkstorepass rootkeyAlias rootprivateKeyPass csrfilepath outputcertpath -->
        <echo>Signing SSL certificate...</echo>
        <delete file="${install.src.ssl.crt}"/>
        <java classname="com.l7tech.identity.cert.RSASigner" classpathref="install.classpath">
            <arg line="${install.src.ca.keystore}"/>
            <arg line="${install.pass.ca.keystore}"/>
            <arg line="${install.alias.ca.keystore}"/>
            <arg line="${install.pass.ca.keystore}"/>
            <arg line="${install.src.ssl.csr}"/>
            <arg line="${install.src.ssl.crt}"/>
        </java>

        <!-- symlink ROOT-bxxxx.war to tomcat/webapps -->
        <echo>Symlinking ${install.src.war}...</echo>
        <exec executable="ln">
            <arg line="-s"/>
            <arg line="../../dist/ROOT-b${install.build.number}.war"/>
            <arg line="${install.src.tomcat}/webapps/ROOT.war"/>
        </exec>

        <!-- H4x0r tomcat conf -->
        <replaceregexp file="${install.src.tomcat}/conf/server.xml">
            <regexp pattern='keystoreFile=".*"'/>
            <substitution expression='keystoreFile="${install.target.ssl.keystore}"'/>
        </replaceregexp>

        <replaceregexp file="${install.src.tomcat}/conf/server.xml">
            <regexp pattern='keystorePass=".*"'/>
            <substitution expression='keystorePass="${install.pass.ssl.keystore}"'/>
        </replaceregexp>

        <!-- Unpack WAR -->

        <!--
            * todo: add the property prompts and environment variables in the install
            * script for
            * - jini.server.hostname pointing to the name that the console clients
            * resovle to
        -->

    </target>

    <target name="OFFICIAL-build" depends="init-dev">
        <condition property="rightdir">
            <equals arg1="${user.dir}" arg2="${src.root}"/>
        </condition>
        <fail unless="rightdir" message="You must run this target from the ${src.root} directory!"/>

        <input message="This will increment the OFFICIAL build count in CVS.  Are you sure you want to do this?" validargs="Y,y,N,n" addproperty="sure"/>

        <condition property="die">
            <not>
                <or>
                    <equals arg1="${sure}" arg2="y"/>
                    <equals arg1="${sure}" arg2="Y"/>
                </or>
            </not>
        </condition>
        <fail if="die" message="Aborted at user request."/>

        <input message="Enter a version number" addproperty="build.version"/>

        <echo>Running cvs update ${buildnumber.file}</echo>
        <cvs command="update -A -C build.number"/>

        <buildnumber/>

        <antcall target="clean"/>
        <antcall target="compile"/>
        <antcall target="compile-tests"/>
        <antcall target="test"/>
        <antcall target="deploy"/>

        <echo message="commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number"/>
        <cvs command="commit -m '[OFFICIAL-build] Incremented build number to ${build.number}' build.number"/>
    </target>

    <target name="INTERNAL-buildinfo">
        <property name="hostname" value="data.l7tech.com"/>

        <tstamp>
            <format property="build.date" pattern="yyyyMMdd"/>
            <format property="build.time" pattern="HHmmss"/>
        </tstamp>

        <echo>Setting version in Nullsoft Installer source files to ${build.version}</echo>
        <replaceregexp match='define MUI_VERSION ".*"' replace='define MUI_VERSION "${build.version}"'>
            <fileset dir="${src.root}">
                <include name="installer/proxy/win32/Agent.nsi"/>
                <include name="installer/console/win32/Manager.nsi"/>
            </fileset>
        </replaceregexp>

        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_NUMBER"/>
            <param name="param_value" value="${build.number}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_VERSION"/>
            <param name="param_value" value="${build.version}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="PRODUCT_NAME"/>
            <param name="param_value" value="${app.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_DATE"/>
            <param name="param_value" value="${build.date}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_TIME"/>
            <param name="param_value" value="${build.time}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_USER"/>
            <param name="param_value" value="${user.name}"/>
        </antcall>
        <antcall target="INTERNAL-buildinfo-replace">
            <param name="param_name" value="BUILD_MACHINE"/>
            <param name="param_value" value="${hostname}"/>
        </antcall>
    </target>

    <target name="INTERNAL-buildinfo-replace">
        <echo>Replacing ${param_name} with ${param_value}</echo>
        <replaceregexp match='${param_name} = ".*"' replace='${param_name} = "${param_value}"'>
            <fileset dir="${src.root}/src">
                <include name="com/l7tech/common/BuildInfo.java"/>
            </fileset>
        </replaceregexp>
    </target>
</project>
