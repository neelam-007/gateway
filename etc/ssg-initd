#!/bin/bash
#
# Startup script for the Secure Span Gateway Server
#
# chkconfig: - 99 01
# description: Layer7's Secure Span Gateway Daemon \
#	       secures and provides access for SOAP services
# processname: tomcat
# config: /ssg/tomcat

# Source function library.
. /etc/rc.d/init.d/functions
. /etc/profile.d/ssgruntimedefs.sh
ORIGINAL_JAVA_OPTS="${JAVA_OPTS}"

if [ -z "$TOMCAT_HOME" ]; then 
	TOMCAT_HOME="/ssg/tomcat/"
fi

ssg="$TOMCAT_HOME/bin/catalina.sh"

ssguser="gateway"
prog="SSG"
tries=3
count=0

USER=`whoami`
PARTITION_BASE="$SSG_HOME/etc/conf/partitions/"
PARTITION_CONTROL="$SSG_HOME/bin/partitionControl.sh"
SINGLE_PARTITION=""

# See how we were called.
if [ $USER != "root" ] ; then
    echo "Need to be root to run this script";
    exit
fi

# handle 3 different cases:
# Run as root, run as a regular user, run as same user as ssguser.
# This script redirects STDOUT and STDERR to /dev/null as well as closing STDIN (<&-) so it can be detached from a
# terminal

start() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
	    start_ssg ${SINGLE_PARTITION}
	else
        find_tomcat
        if [ -n "$pid" ] ; then
            echo "At least one SSG Partition is already running. Please stop and restart."
            exit
        fi

        for partition_dir in ${ALL_PARTITIONS}
        do
            start_ssg ${partition_dir}
        done
        # [ $RETVAL = 0 ] && touch /var/lock/subsys/ssg
        return $RETVAL
    fi
}

stop() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        stop_ssg ${SINGLE_PARTITION}
    else
        find_tomcat;
        if [ -z "$pid" ] ; then
            echo "No SSG Partitions are Currently Running"
            return
        fi

        for partition_dir in $ALL_PARTITIONS
        do
            stop_ssg ${partition_dir}
        done
        #after shutting down all the partitions, make sure they are all fully stopped
        if [ $RETVAL = 0 ]; then
            sleep 7;
            find_tomcat;
            if [ -z "$pid" ] ; then
                echo "Success"
                return
            fi
            count=`expr $count + 1`
            if [ "$count" -gt "$tries" ]; then
                reallystop
                return
            fi
            stop;
	    else
		    sleep 2;
            count=`expr $count + 1`
            if [ "$count" -gt "$tries" ]; then
                reallystop
                return
            fi
		    stop;
	    fi
    fi
    echo
	return $RETVAL
}

stop_ssg() {
    which_partition=$1
    echo -n $"Stopping $prog (`basename "${which_partition}"`): "
	(sh $PARTITION_CONTROL stop ${which_partition} -force > /dev/null 2>&1)
    RETVAL=$?
}

start_ssg() {
    which_partition=$1
    echo -n $"Starting $prog (`basename "${which_partition}"`): "

    (sh $PARTITION_CONTROL start ${which_partition} &>/dev/null <&-)
    RETVAL=$?
    echo
}

find_tomcat() {
	pid=`pidof ${JAVA_HOME}/bin/java`
}

find_single_partition() {
    if [ -n "${1}" ] ; then
        SINGLE_PARTITION=${1}
        if [ ! -d "$PARTITION_BASE/${SINGLE_PARTITION}" ] ; then
            echo "Could not find the partition named ${SINGLE_PARTITION}"
            exit 1;
        fi
    fi
}

reallystop() {
	echo "Killing $pid"
	kill -9 $pid
}

case "$1" in
  start)
	start "$2"
	;;
  stop)
	stop  "$2"
	;;
  restart)
	stop "$2"
        sleep 5
	start "$2"
	;;
esac

exit $RETVAL
