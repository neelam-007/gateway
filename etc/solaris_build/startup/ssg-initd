#!/bin/bash
#
# Startup script for the SecureSpan Gateway Server
#
# chkconfig: - 99 01
# description: Layer 7 SecureSpan Gateway Daemon \
#	       secures and provides access for SOAP services
# processname: ssg

# startup is complicated by the fact that 
# there's no user in the /etc/init run at startup
# on Solaris only

if [ "${_INIT_RUN_LEVEL}" = 3  -o "${_INIT_RUN_LEVEL}" = 6  -o "$LOGNAME" = "root" ] ; then
    # its either startup, shutdown, or run interactively by root
    echo -n ""
else 
    echo "Must be root to run this script"
    exit
fi


# Source function library.
#. /etc/rc.d/init.d/functions
. /ssg/bin/rhstub.sh

#. /etc/profile.d/ssgruntimedefs.sh
. /ssg/bin/ssgruntimedefs.sh

ORIGINAL_JAVA_OPTS="${JAVA_OPTS}"

prog="SSG"
tries=3
count=0

PARTITION_BASE="$SSG_HOME/etc/conf/partitions/"
PARTITION_CONTROL="$SSG_HOME/bin/partitionControl.sh"
SINGLE_PARTITION=""

# This script redirects STDOUT and STDERR to /dev/null as well as closing STDIN (<&-) so it can be detached from a
# terminal

start() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        start_ssg ${SINGLE_PARTITION}
    else
        RETVAL=1
        STOPPED_PARTITIONS=""
        for partition_dir in ${ALL_PARTITIONS}
        do
            status_ssg ${partition_dir} &>/dev/null
            if [ ${?} -eq 1 ] ; then
                STOPPED_PARTITIONS="${STOPPED_PARTITIONS} ${partition_dir}" 
            fi
        done

        if [ -z "${STOPPED_PARTITIONS}" ] ; then
            echo "All partitions are active."
        else
            for partition_dir in ${STOPPED_PARTITIONS}
            do
                start_ssg ${partition_dir}
            done
        fi

#        echo -n $"$prog services started: "
#        [ $RETVAL -eq 0 ] && success || failure
#        echo

        return $RETVAL
    fi
}

stop() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        stop_ssg ${SINGLE_PARTITION}
    else
        RETVAL=1
        find_tomcat;
        if [ -z "$pid" ] ; then
            echo "No SSG Partitions are Currently Running"
        else
            for partition_dir in $ALL_PARTITIONS
            do
                stop_ssg ${partition_dir}
            done
        fi

#        echo -n $"$prog services stopped: "
#        [ $RETVAL -eq 0 ] && success || failure
#        echo
    fi
    return $RETVAL
}

status() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        status_ssg ${SINGLE_PARTITION}
    else
        for partition_dir in ${ALL_PARTITIONS}
        do
            status_ssg ${partition_dir}
        done
    fi
}

stop_ssg() {
    which_partition="${1}"
    if [ "${2}" != "silent" ] ; then
        echo -n $"Stopping $prog $(basename "${which_partition}"): "
    fi
    (bash "${PARTITION_CONTROL}" "stop" "${which_partition}" &> /dev/null)
    RETVAL=$?

    if [ ${RETVAL} -eq 0 ] ; then
        sleep 5;
        (bash "${PARTITION_CONTROL}" "status" "${which_partition}" &> /dev/null)
        if [ ${?} -eq 0 ] ; then
            count=$((count + 1))
            if [ "$count" -ge "$tries" ]; then
                (bash "${PARTITION_CONTROL}" "stop -force" "${which_partition}" &> /dev/null)    
                RETVAL=$?
                # sleep ensures TCP cleanup if process was killed
                sleep 5;
            else
                stop_ssg "${which_partition}" silent
            fi            
        fi
    fi

# Redhat called, they'd like their [OK]/[FAILURE]s back now. kthxbai
    if [ "${2}" != "silent" ] ; then
        [ $RETVAL -eq 0 ] && success || failure
        echo
    fi
}

start_ssg() {
    which_partition=$1
    echo -n $"Starting $prog $(basename "${which_partition}"): "

    (bash "${PARTITION_CONTROL}" "start" "${which_partition}" &> /dev/null)
    RETVAL=$?

    [ $RETVAL -eq 0 ] && success || failure
    echo
}

status_ssg() {
    which_partition="${1}"
    (bash "${PARTITION_CONTROL}" "status" "${which_partition}")
    return $?
}


find_tomcat() {
    pid=$(ps -a | grep java | awk '{print $1}')
}

find_single_partition() {
    if [ -n "${1}" ] ; then
        SINGLE_PARTITION=${1}
        if [ ! -d "$PARTITION_BASE/${SINGLE_PARTITION}" ] ; then
            echo "Could not find the partition named ${SINGLE_PARTITION}"
            exit 1;
        fi
    fi
}

case "$1" in
  start)
	start "$2"
	;;
  stop)
	stop  "$2"
	;;
  restart)
	stop "$2"
        sleep 5
	start "$2"
	;;
  status)
        status "$2"
        ;;
esac

exit $RETVAL
