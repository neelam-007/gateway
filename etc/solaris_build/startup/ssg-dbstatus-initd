#!/bin/bash
#
# Startup script for the SecureSpan Gateway Server db status support
#
# Disallow TCP/3306 DB connections while database replication catches up to
# the other node.
#
# We sleep before any checking to ensure that replication logs are being
# copied (else the timestamp could be up to date even though the DB is
# still not fully replicated)
#
# chkconfig: - 98 02
# description: Layer 7 Technologies SecureSpan Gateway Db Status Daemon
# processname: ssg-dbstatus

# Source function library.
#. /etc/rc.d/init.d/functions
. ./rhstub.sh

# If credentials are required to access MySQL then add them as a user config file.
# /root/.my.cnf
# [client]
# password=XXX
PROG=ssg-dbstatus
MYSQL="/usr/bin/mysql"
MYSQL_OPTS=""
MYSQL_DEFAULT_OPTIONS="/root/.my.cnf"
TIME_DESIRED=15
LOGGER="/usr/bin/logger"
PID_FILE="/var/run/${PROG}.pid"

#IPTABLES="/sbin/iptables"
#IPTABLES_RULE="INPUT -m tcp -p tcp --dport 3306 -j REJECT --reject-with tcp-reset"

if [ ! -f "${HOME}/.my.cnf" ] && [ -f "${MYSQL_DEFAULT_OPTIONS}" ] ; then
    MYSQL_OPTS="--defaults-extra-file=${MYSQL_DEFAULT_OPTIONS} ${MYSQL_OPTS}"
fi

export MYSQL MYSQL_OPTS TIME_DESIRED
# IPTABLES IPTABLES_RULE

# Check if replication is enabled
checkRequired() {
    SERVER_ID=$("${MYSQL}" ${MYSQL_OPTS} -N -B -e "select @@server_id;" 2>/dev/null)
    if [ ! -z "${SERVER_ID}" ] && [ 0 -eq ${SERVER_ID} ] ; then
        # not configured for replication
        return 1
    fi
    return 0
}

# Configuration checks, ensure process list output is usable and we can
# see the 'system user'
checkConfigured() {
#    if [ ! -f "${IPTABLES}" ] ; then
#        echo "iptables [${IPTABLES}] not found."
#        return 1
#    fi
    if [ ! -f "${MYSQL}" ] ; then
        echo "MySQL client [${MYSQL}] not found."
        return 1
    fi
    "${MYSQL}" ${MYSQL_OPTS} -B -e "show processlist;" &>/dev/null
    if [ ${?} -ne 0 ] ; then
        echo "Could not access MySQL server."
        return 1
    fi
    TIME_COLUMN_HEADER=$("${MYSQL}" ${MYSQL_OPTS} -B -e "show processlist;" 2>/dev/null | head -n 1 | awk '{print $6}')
    if [ "${TIME_COLUMN_HEADER}" != "Time" ] ; then
        echo "Could not parse 'show processlist' output."
        return 1
    fi
    SYSTEM_DATA=$("${MYSQL}" ${MYSQL_OPTS} -B -N -e "show processlist;" 2>/dev/null | grep 'system user')
    if [ -z "${SYSTEM_DATA}" ] ; then
        echo "Process information for 'system user' is not available."
        return 1
    fi
    return 0
}

# Logging
report() {
    REPORT="${1}"
    if [ -f "${LOGGER}" ] ; then
        "${LOGGER}" -t "${PROG}" "${REPORT}"
    fi
}

# Disable MySQL
disableTcpConnections() {
    # Insert iptables rule
#    "${IPTABLES}" -I ${IPTABLES_RULE}
    return ${?}
}

# Enable MySQl
enableTcpConnections() {
    # Delete iptables rule
#    "${IPTABLES}" -D ${IPTABLES_RULE}
    return ${?}
}

# Service start
start () {
    checkRequired
    if [ ${?} -eq 1 ] ; then
        echo -n $"${PROG} starting: "
        success
        echo
        exit 0    
    fi

    checkConfigured
    if [ ${?} -eq 1 ] ; then
        echo -n $"${PROG} starting: "
#        failure
        echo
        exit 1
    fi

    if [ -f "${PID_FILE}" ] && [ -d "/proc/$(<${PID_FILE})" ] ; then
        echo -n $"${PROG} starting: "
        failure
        echo
        exit 1
    fi

    disableTcpConnections
    if [ ${?} -eq 1 ] ; then
        echo -n $"${PROG} starting: "
        failure
        echo
        exit 1
    fi

    #only observes last 6 chars of template.
    export CONTINUE_FILE=$(mktemp -t myreplflag.XXXXXXXXXXXX)
    # Wait for replication to complete
    (  
        # record pid
        /bin/bash -c 'echo $PPID' > "${PID_FILE}"

        report "DB replication status check starting."

        # -5 since we sleep for 5 in the loop
        sleep $((TIME_DESIRED-5))
        COUNT=1
        while [ $COUNT -le 48 ] && [ -f "${CONTINUE_FILE}" ] ; do
            sleep 5
            echo "show processlist;"
            COUNT=$((COUNT+1))
        done;

        if [ ! -f "${CONTINUE_FILE}" ] ; then
            report "DB replication is up to date."
        else
            report "Exiting due to timeout."
            rm -f "${CONTINUE_FILE}"
        fi

        enableTcpConnections
    ) | "${MYSQL}" ${MYSQL_OPTS} -B -N -t -n 2>/dev/null | (
        # Add trap to ensure max connections reset on (subshell) exit
        trap "{ enableTcpConnections &>/dev/null; }" EXIT
        TIME_A=-1
        TIME_B=-1

        while [ 1 -eq 1 ] ; do
            read L
            if [ ${?} -ne 0 ] ; then
                break
            fi

            # Process line of input
            if [ ! -z "${L}" ] ; then
                # Ignore info for non-system processes
                echo "${L}" | grep -q 'system user' &>/dev/null
                if [ $? -eq 0  ] ; then
                    # There are 2 slave processes, use the MAX time
                    L=$(echo "${L}" | awk -F'|' '{print $7}' | sed 's/ //g')
                    if [ ${TIME_A} -eq -1 ] ; then
                        TIME_A=${L}
                    else
                        TIME_B=${L}
          
                        if [ ${TIME_A} -ge ${TIME_B} ] ; then
                            TIME=${TIME_A}
                        else
                            TIME=${TIME_B}
                        fi

                        if [ ${TIME} -le ${TIME_DESIRED} ] ; then
                            # Done, so exit
                            report "DB replication time is ${TIME}, replication up to date."
                            rm -f "${CONTINUE_FILE}"
                        else
                            report "DB replication time is ${TIME}"
                        fi

                        # Reset times
                        TIME_A=-1
                        TIME_B=-1
                    fi
                fi 
            fi

            # Read should block, but just in case
            sleep 1
        done
    ) &

    echo -n $"${PROG} starting: "
    # sleep to allow tcp connections to be enabled if everything is OK
    sleep ${TIME_DESIRED}
    success
    echo
}

# Service stop
stop () {
    echo -n $"${PROG} stopping: "
    if [ -f "${PID_FILE}" ] && [ -d "/proc/$(<${PID_FILE})" ] ; then
        kill $(<${PID_FILE})
        sleep 1
        if [ -d "/proc/$(<${PID_FILE})" ] ; then
            failure
            echo
            exit
        fi
        rm -f "${PID_FILE}"
    fi
    success
    echo
}

# Service status
status () {
    "${MYSQL}" ${MYSQL_OPTS} -B -N -t -n -e "show processlist;" 2>/dev/null | (
    TIME_A=-1
    TIME_B=-1
    TIME=Unknown
    
    while [ 1 -eq 1 ] ; do
        read L
        if [ ${?} -ne 0 ] ; then
            break 
        fi

        # Process line of input
        if [ ! -z "${L}" ] ; then
            # Ignore info for non-system processes
            echo "${L}" | grep -q 'system user' &>/dev/null
            if [ $? -eq 0  ] ; then
                # There are 2 slave processes, use the MAX time
                L=$(echo "${L}" | awk -F'|' '{print $7}' | sed 's/ //g')
                if [ ${TIME_A} -eq -1 ] ; then
                    TIME_A=${L}
                else
                    TIME_B=${L}

                    if [ ${TIME_A} -ge ${TIME_B} ] ; then
                        TIME=${TIME_A} 
                    else
                        TIME=${TIME_B}
                    fi
                fi
            fi
        fi
    done

    echo "Replication delay is ${TIME} seconds.")
}

# Commands
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
esac
