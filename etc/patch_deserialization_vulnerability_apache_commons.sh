#!/bin/bash
#
# Script to launch the fix for apache commons deserialization vulnerability involving InvokerTransformer class
# The patch will stop the Gateway and remove InvokerTransformer.class from apache commons-collection jar found inside /opt/SecureSpan/
#

GW_DIR="/opt/SecureSpan/"

function stop_ssg() {
    echo "Stopping the gateway..."
    /etc/init.d/ssg stop
}

function doWaitForSSGToShutdown() {
    local COUNTER=0
    local END=120
    local STATUS=""
    # first try with status
    /etc/init.d/ssg status
    if [ ${?} -eq 1 ]; then
        # status failed so try port 8443 instead
        STATUS=$(netstat -tnap | grep 8443 | grep -c LISTEN)
        while [ "${STATUS}" -ne "0" -a ${COUNTER} -le ${END} ]
        do
            #sleep 5
            STATUS=$(netstat -tnap | grep 8443 | grep -c LISTEN)
            COUNTER=$(($COUNTER+1))
            echo "SSG is not shutdown yet..."
            if [ ${COUNTER} -gt ${END} ]; then
                echo "Giving up waiting!!! Continuing with the patch process."
            fi
        done
    else
        STATUS=$(/etc/init.d/ssg status | grep stopped)
        while [ -z "${STATUS}" -a ${COUNTER} -le ${END} ]
        do
            #sleep 5
            STATUS=$(/etc/init.d/ssg status | grep stopped)
            COUNTER=$(($COUNTER+1))
            echo "SSG is not shutdown yet..."
            if [ ${COUNTER} -gt ${END} ]; then
                echo "Giving up waiting!!! Continuing with the patch process."
            fi
        done
    fi
}

# stop SSG and wait for it to gracefully shutdown
stop_ssg
doWaitForSSGToShutdown

echo "Locating files to patch inside: ${GW_DIR}"
echo "Working please wait ..."
echo #

BKP_EXT=".org.ssg.bkp"

# get all candidates
FILES=$(grep -Rl '\<org/apache/commons/.*InvokerTransformer.class\>' ${GW_DIR})
if [ ${?} -ne 0 ]; then
    echo "Failed to locate libraries to patch:"
    echo ${FILES}
    exit 1
fi

# Loop through all found files
for f in ${FILES}
do
    # skip original files
    if [[ "${f}" == *${BKP_EXT} ]]
    then
        echo "Skipping backup file: ${f}"
    else
        # Backup original file (with the correct permissions)
        BKPF="${f}${BKP_EXT}"
        echo "Creating backup file: ${BKPF}"
        yes | cp -pf ${f} ${BKPF}
        if [ ${?} -ne 0 ]; then
            echo "Failed to backup file: ${f} into: ${BKPF}"
            exit 2
        fi

        echo "Patching file: ${f}"

        # get the zip-entry name(s) to remove
        ENTRIES=$(zipinfo -1 ${f} | grep '\<org/apache/commons/.*InvokerTransformer.class\>')
        if [ ${?} -ne 0 ]; then
            echo "zipinfo failed to list entries for removal:"
            echo ${ENTRIES}
            exit 3
        fi

        # loop through each zip-entry to remove
        for e in ${ENTRIES}
        do
            #echo "Removing entry: \"${e}\" from library: \"${f}\""
            zip -d ${f} ${e}
            if [ ${?} -ne 0 ]; then
                echo "Failed to patch library: ${f}"
                echo "Failed to remove entry: ${e}"
                exit 4
            fi
        done

        #fix permissions
        chmod --reference="${BKPF}" ${f}
        chown --reference="${BKPF}" ${f}
    fi
    echo #
done

echo "Patching completed successfully."
echo "Please reboot your box."


