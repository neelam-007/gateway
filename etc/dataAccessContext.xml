<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC  "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
    The Spring Hibernate configuration. References Hibernate mappings, defines transaction managers
    persistence interceptors, and transactional behaviour.
 -->
<beans>

    <!--
    Hibernate Properties location

    Note that serverConfig has to initialize first, since it will set the configDirectory
    system property.
    -->
    <bean id="hibernateProperties"
          class="com.l7tech.spring.factory.config.PropertiesFactoryBean"
          depends-on="serverConfig">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
                <value>file:${com.l7tech.server.configDirectory}${file.separator}hibernate.properties</value>
            </list>
        </property>
    </bean>

    <!--
    Default Hibernate Session Manager
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="mappingResources">
            <list>
                <value>SSG.hbm.xml</value>
                <value>audit.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <ref local="hibernateProperties"/>
        </property>
        <property name="entityInterceptor">
            <ref local="persistenceEventInterceptor"/>
        </property>
    </bean>

    <!--
    Default Hibernate Transaction Manager
    -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--
    The audit events hibernate interceptor
    -->
    <bean id="persistenceEventInterceptor" class="com.l7tech.server.PersistenceEventInterceptor"/>

    <!--
    Transaction Interceptor set up to do PROPAGATION_REQUIRED on all methods
    -->
    <bean id="matchAllWithPropRequired" class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
     <property name="transactionAttribute">
         <value>PROPAGATION_REQUIRED, -Throwable, +com.l7tech.identity.AuthenticationException</value>
     </property>
    </bean>

    <bean id="matchAllTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager">
            <ref local="transactionManager"/>
        </property>
        <property name="transactionAttributeSource">
            <ref local="matchAllWithPropRequired"/>
        </property>
    </bean>

    <!--
    BeanNameAutoProxyCreator handles all beans methods to use PROPAGATION_REQUIRED
    The beans listed do not require class proxiying and use JDK dynmic proxying.
    -->
    <bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <idref local="matchAllTxInterceptor"/>
            </list>
        </property>
        <property name="beanNames">
            <list>
                <idref bean="identityProviderConfigManager"/>
                <!--
                  Removed here for performance reasons because some methods can be non-transactional (see below)
                  <idref bean="serviceManager"/>
                -->
                <idref bean="trustedCertManager"/>
                <idref bean="clientCertManager"/>
                <idref bean="auditRecordManager"/>
                <idref bean="statusUpdateManager"/>
                <idref bean="serviceAdmin"/>
                <idref bean="trustedCertAdmin"/>
                <idref bean="auditAdmin"/>
                <idref bean="identityAdmin"/>
                <idref bean="jmsAdmin"/>
                <idref bean="clusterStatusAdmin"/>
            </list>
        </property>
    </bean>

    <!--
    Transactional wrapper for service manager, not all methods are transactional
    -->
    <bean id="serviceManager" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
        <property name="target">
            <ref bean="serviceManagerTarget"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <!-- These methods only deal with cached data, so we can improve performance by avoiding transactions -->
                <prop key="getServerPolicy">PROPAGATION_SUPPORTS</prop>
                <prop key="resolve">PROPAGATION_SUPPORTS</prop>
                <prop key="getServiceStatistics">PROPAGATION_SUPPORTS</prop>
                <prop key="getAllServiceStatistics">PROPAGATION_SUPPORTS</prop>
                <!-- All other methods can be transactional -->
                <prop key="*">PROPAGATION_REQUIRED,-Throwable</prop>
            </props>
        </property>
    </bean>

    <!--
    Transactional wrapper for service metrics manager, not all methods are transactional
    -->
    <bean id="serviceMetricsManager" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
        <property name="target">
            <ref bean="serviceMetricsManagerTarget"/>
        </property>
        <property name="proxyTargetClass">
            <value>true</value>
        </property>
        <property name="transactionAttributes">
            <props>
                <!-- This method must be transactional -->
                <prop key="findBins">PROPAGATION_REQUIRED,-Throwable</prop>

                <!-- Everything else doesn't require transactions -->
                <prop key="*">PROPAGATION_SUPPORTS</prop>
            </props>
        </property>
    </bean>

    <!--
    BeanNameAutoProxyCreator with proxyTargetClass option handles all beans methods to use PROPAGATION_REQUIRED
    -->
    <bean id="autoProxyCreatorProxyTargetClass" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="proxyTargetClass">
            <value>true</value>
        </property>
        <property name="interceptorNames">
            <list>
                <idref local="matchAllTxInterceptor"/>
            </list>
        </property>
        <property name="beanNames">
            <list>
                <idref bean="internalIdentityProvider"/>
                <idref bean="internalUserManager"/>
                <idref bean="internalGroupManager"/>
                <idref bean="federatedIdentityProvider"/>
                <idref bean="federatedUserManager"/>
                <idref bean="federatedGroupManager"/>
                <idref bean="resolutionManager"/>
                <idref bean="clusterInfoManager"/>
                <idref bean="serviceUsageManager"/>
                <idref bean="jmsEndpointManager"/>
                <idref bean="jmsConnectionManager"/>
                <idref bean="auditExporter"/>
                <idref bean="counterIDManager"/>
                <idref bean="countedHitsManager"/>
                <idref bean="schemaEntryManager"/>
                <idref bean="clusterPropertyManager"/>
                <idref bean="sampleMessageManager"/>

                <!-- Identity mapping stuff -->
                <idref bean="attributeConfigManager"/>
                <idref bean="identityMappingManager"/>
                <idref bean="securityTokenMappingManager"/>
            </list>
        </property>
    </bean>

</beans>
