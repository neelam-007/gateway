#!/bin/sh
#
# Layer 7 Technologies Inc.
#
# SSG Pre/Seal Script
#


doScaTest() {
    if [ -e "/opt/sun/sca6000/sbin/scadiag" ] ; then
        # Confirm SSL card is loaded and works
        MCA=`scadiag -v mca0 | grep Firmware`
        if [ "$MCA" ] ; then
            echo ""
            echo "SCA SSL Card loaded:"
            echo $MCA
            echo ""
            MCA_FIRMWARE_VERSION="`echo $MCA | cut -d ' ' -f 3`"
            echo "Firmware version is $MCA_FIRMWARE_VERSION"
            if [ ! "$MCA_FIRMWARE_VERSION" = "1.1.2" ] ; then
                echo "****** ERROR - SSL Card has old firmware on it, update by running $0 scaupgrade"
            fi
        else
            echo ""
            echo "SCA SSL Card NOT loaded."
            echo ""
        fi
    else
        echo "****** No SCA Support software found. Is a SCA6000 SSL Card installed? ******"
    fi
}

doTarariTest() {

    TARARIFOUND=`rpm -qa | grep tarari`
    if [ -n "${TARARIFOUND}" ] ; then
        # Confirm Tarari firmware loads.
        #
        echo "Loading Tarari XML card drivers:"
        service tarari stop ; service tarari start
        echo ""

        # Ensure the drivers load
        CPP=`cat /proc/driver/cpp | grep Driver`
        if [ "$CPP" ] ; then
            [ -e /opt/SecureSpan/Gateway/runtime/etc/profile.d/tarariopts.sh ] && source /opt/SecureSpan/Gateway/runtime/etc/profile.d/tarariopts.sh
            echo ""
            echo "Tarari XML Card driver loaded:"
            echo $CPP
            echo ""

            # Run through Tarari tests.
            echo "Running Tarari XML card tests (may take a few minutes):"
            TESTS=`/usr/local/Tarari/bin/cpp_manager_static -v -t all`
            if [ "`echo $TESTS | grep PASSED`" ] ; then
                echo "Passed"
                echo ""
            else
                echo "Failed!"
                echo "Some Tarari XML card tests didn't pass, re-running in verbose mode:"
                /usr/local/Tarari/bin/cpp_manager_static -v -t all
                ERROR=1
                echo ""
            fi
        else
            echo ""
            echo "Tarari XML Card driver NOT loaded"
            echo ""
        fi
    else
        echo "***** ERROR No Tarari software was found. This is an error for hardware appliances ***** "
        ERROR=1
    fi
}

disable_sca_if_needed() {
  FOO=`lspci`
  if [ ! $? -eq 0 ] ; then
      echo ""
      echo "****** ERROR: can't run lspci - are you running as root? *****"
      echo ""
      exit 1;
  fi

  #looking for an installed SCA (Class 1000: 108e:5ca0)
  SCA_CARD_INSTALLED=`lspci -n | grep "108e:5ca0"`

  if [ -n "${SCA_CARD_INSTALLED}" ] ; then
      echo "SCA card seems to be installed - Nothing to do"
  else
      echo "***** WARNING: The SCA card does not appear to be installed - disabling *****"
      SCADIAG="/opt/sun/sca6000/sbin/scadiag"
      if [ -s ${SCADIAG} ] ; then
            echo "SCA support software appears to be installed"
      else
            echo "***** ERROR: SCA support software does not appear to be installed ***** "
      fi

      SCA_SSG_SOFTWARE="/opt/SecureSpan/Appliance/libexec/masterkey-manage.pl"
      if [ -s ${SCA_SSG_SOFTWARE} ] ; then
            echo "The SSG SCA support software appears to be installed"
      else
            echo "***** ERROR: The SSG SCA support software does not appear to be installed *****"
      fi


      SCARPMS=`rpm -qa | grep -i sca`
      if [ -n "${SCARPMS}" ] ; then
        echo ""
        echo "**********************"
        echo "Disabling SCA startup"
        echo "**********************"
        rpm -e ${SCARPMS}
        rpm -e sun-nspr sun-nss
      fi

      #echo ""
      #echo "Disabling SCA startup scripts"
      #rm -f /etc/rc3.d/S*sca.driver
      #rm -f /etc/rc3.d/S*sca.daemon
      #echo ""
      #echo "Renaming the SCA software directory"
      #mv /opt/sun/sca6000 /opt/sun/sca6000.disabled
      #echo ""
      echo "The SCA is now disabled"
  fi
}

config_or_disable_nfast() {
    HAS_NFAST=`ls /dev/nfastpci*`
    if [ -n "${HAS_NFAST}" ] ; then
        #nShield is installed, let's run the installer to ensure everything is setup
        echo "an nShield card appears to be installed, configuring the drivers"
        /opt/nfast/sbin/install
    else
        echo "***** WARNING: nShield does not appear to be installed. Removing support software ***** "
        NFASTRPM=`rpm -qa | grep ssg-nshieldpci`
        [ -n "${NFASTRPM}" ] && rpm -e ssg-nshieldpci
    fi
}

case "$1" in

preseal)

##########
# Ensure required services are enabled on boot.
#
for f in mysqld mysql ssg ssgsysconfig ssg-dbstatus tarari tcp_tune rsyslog; do chkconfig $f on; chkconfig --list $f;done
echo ""

chkconfig kudzu off
chkconfig cpuspeed off

;;

test)

ERROR=0
doScaTest
doTarariTest

##########
# SSG Version
#
echo "SSG Version = $(rpm -q ssg)"
echo ""

##########
# Tarari Serial Number
#
if [ -e "/usr/local/Tarari/bin/cpp_manager" ] ; then
  echo "Tarari Card Serial Number =$(cat /proc/driver/cpp0 | grep "Serial Number"|cut -d = -f 2|cut -d ':' -f 2)"
else
  echo " ***** ERROR cpp_manager not found. ERROR ***** "
  ERROR=1
fi
echo ""

##########
# Memory List
#
TOTAL_MEM="$[$(cat /proc/meminfo |grep MemTotal|cut -d : -f 2|cut -d k -f 1)/1024]"
echo "Memory Total = $TOTAL_MEM Megs"
if [ $TOTAL_MEM -le 7500 ] ; then
	echo "WARN: Memory is less than 8 gigabytes: $TOTAL_MEM"
	echo ""
	ERROR=1
fi
echo ""

##########
# Raid Array Status
#
# md0
echo "Checking RAID status:"
if [ "$(cat /proc/mdstat |grep md0|grep "\[0\]")" = "" ]; then
  echo "***** ERROR md0 device 0 ERROR ***** "
  md00=error
  ERROR=1
else
  echo "PASS md0 device 0"
fi
if [ "$(cat /proc/mdstat |grep md0|grep "\[1\]")" = "" ]; then
  echo "***** ERROR md0 device 1 ERROR *****"
  md01=error
  ERROR=1
else
  echo "PASS md0 device 1"
fi
echo ""

# md1
if [ "$(cat /proc/mdstat |grep md1|grep "\[0\]")" = "" ]; then
  echo "***** ERROR md1 device 0 ERROR ***** "
  md10=error
  ERROR=1
else
  echo "PASS md1 device 0"
fi
if [ "$(cat /proc/mdstat |grep md1|grep "\[1\]")" = "" ]; then
  echo "***** ERROR md1 device 1 ERROR *****"
  md11=error
  ERROR=1
else
  echo "PASS md1 device 1"
fi
# Check if a raid set is in recovery mode.
if [ "$(cat /proc/mdstat |grep recovery)" != "" ]; then
  echo "***** ERROR Failed Raid Device Rebuilding ERROR *****"
  recovery=error
  ERROR=1
fi
# Exit if there are any error with the raid sets.
if [ "$md00" = "error" ] || [ "$md01" = "error" ] || [ "$md10" = "error" ] || [ "$md11" = "error" ] || [ "$recovery" = "error" ]; then
  echo ""
  echo "#########################################"
  echo "# ***** THERE ARE RAID SET ERRORS ***** #"
  echo "#########################################"
  exit 1
fi
echo ""

if [ $ERROR -eq 1 ] ; then
	echo ""
	echo "************* WARNING *******************"
	echo "There was an error detected during the test process, please"
	echo "scroll up (using SHIFT+PG-UP and SHIFT+PG-DOWN) to verify the errors."
	echo "************* WARNING *******************"
	echo ""
	exit
fi 

;;

seal)
  /etc/init.d/rsyslog stop
  rm -f /var/log/bash_commands.log
  # Stop writing to ~/.bash_history
  export HISTSIZE=0

  # remove ~/.bash_history
  rm -f ~/.bash_history
  #chmod the log files in case anything new has been created on startup (since hardening)
  chmod o-w /var/log/*
  # Delete all log files.
  rm -f /var/log/*/*
  rm -f /var/log/*
  #stop the ssg services and clean up their logs
  service ssg stop
  rm -f /opt/SecureSpan/Appliance/controller/var/logs/*.log
  rm -f /opt/SecureSpan/Gateway/node/default/var/logs/*.log


  touch /var/log/btmp
  rm -f ~/ks-post.chroot
  rm -f ~/ks-post.nochroot

  #ensure that the correct USB module is used by the master_key_manage script
  echo "EHCI" > /etc/usbdrive_pp

  # Remove any left over traces if we happened to ssh anywhere
  rm -rf ~/.ssh

  # Remove mysql history file
  rm ~/.mysql_history

  # Remove any SCA keys that are stored on the system
  rm -rf /var/opt/sun/sca6000/log/*
  rm -rf /var/opt/sun/sca6000/lock/*
  rm -rf /var/opt/sun/sca6000/keydata/*

  # Remove Layer7 rpms.
  rm -rf /root/rpms

  ifdown eth0

  # Clear the /etc/resolv.conf file
  echo "" > /etc/resolv.conf

  # Clear the /etc/security/opasswd file
  echo "" > /etc/security/opasswd


  sed -i -e 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
  
  # Force the expiry of the root password 60 days after it has been changed (STIG requirement).
  chage -M 60 root

  #reset ssgconfig password to "7layer"
  echo "7layer" | passwd ssgconfig --stdin >/dev/null

  # Force the expiry of the ssgconfig password 60 days after it has been changed (STIG requirement).
  chage -M 60 ssgconfig

  # Force root to change her password the next time she logs in.
  chage -d 0 root
  chage -d 0 ssgconfig

  #reset pam_tally
  pam_tally --reset --user root
  pam_tally --reset --user ssgconfig

  # Delete the ssh keys to ensure they are created new
  rm -f /etc/ssh/ssh_host_*

  #Delete anything left behind in /tmp
  rm -rf /tmp/* 

  # Delete this script.
  rm -f /root/sealsys

  # poweroff the system and do not write the wtmp entry.
  poweroff -d

;;

customize)
        disable_sca_if_needed
        config_or_disable_nfast
;;

update)

echo ""
echo "updating sealsys with latest version from trunk"
echo ""
wget -nv "http://sarek.l7tech.com:9090/browse/~raw,r=trunk/UneasyRooster/trunk/etc/imagePrepTools/sealsys.x4150" -O sealsys.new
if [ -s sealsys.new ] ; then
	mv -f sealsys.new sealsys
	chmod +x ./sealsys
else 
	echo "Error updating sealsys.  Is the network up?"
fi


;;

scaupgrade)
echo "Updating SCA6000 to latest firmware"
FIRMWARE_PATH="/opt/sun/sca6000/firmware/sca6000fw"
RET=0
if [ ! -e "$FIRMWARE_PATH" ] ; then
	echo "WARNING - firmware update not found (SCA driver probably disabled)"
	RET=1
else
	UPGRADE_REQUIRED=0

	# re-run the check for MCA firmware version
    MCA=`scadiag -v mca0 | grep Firmware`
	if [ "$MCA" ] ; then
		echo "SSL Card loaded:"
		echo $MCA
		MCA_FIRMWARE_VERSION="`echo $MCA | cut -d ' ' -f 3`"
		if [ ! "$MCA_FIRMWARE_VERSION" = "1.1.2" ] ; then
			echo "Upgrade is required (Minor = $MCA_FIRMWARE_VERSION)."
			UPGRADE_REQUIRED=1
		fi
	else 
		echo "SSL Card NOT loaded, can't determine firmware version."
	fi

	if [ "$UPGRADE_REQUIRED" -eq 1 ] ; then 
		echo "Upgrading... please ignore any errors or kernel dumps due to interrupts"
		service sca start
		# you can ignore errors here about '1 file already exists', this means that the service is already running
		/opt/sun/sca6000/sbin/scadiag -z mca0
		/opt/sun/sca6000/sbin/scadiag -u /opt/sun/sca6000/firmware/sca6000fw mca0
		/opt/sun/sca6000/sbin/scadiag -r mca0
		# TODO - check return codes - return ERROR
	else
		echo "Firmware is already upgraded or no card, no need to run upgrade."
	fi
fi

;;

all)
echo "Setting the system back to factory defaults and then halting the server."
rm /root/.bash_history
$0 customize
$0 preseal
$0 scaupgrade
$0 test
# last thing to do before sealing is remove myself from the rc.local
sed -i -e '/sealsys/d' /etc/rc.local
sh $0 seal

;;

*)
  echo $"Usage: $0 (preseal|test|seal|customize|update|scaupgrade|all)"

esac

exit 1
