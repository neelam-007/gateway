Purpose:
OS level only user centralized authentication using:
	- LDAP only
	- Radius only
	- Radius with LDAP

This means the SSG system will not have users added but will provide login for users configured in the centralized
authentication server (LDAP, Radius or Radius+LDAP).

This should work for console and SSH access.

The configuration file:
- there is an example of configuration file in the SVN repository under etc/appliance/radius directory
- it should be named radius_ldap_setup.conf (if other name will be used the script will exit with error.)
- it can be placed anywhere in the system
- it must have layer7 as owner and 600 permission

The script:
- expects to be run with two parameters:
	- if the first one is --configfile the second should be the configuration file (full path and filename)
	- if the first one is --getcurrentconfig the second one will be the configuration type for which is should
	retrieve the defaults values for directives in the appropriate configuration files

These are all possible combinations:
.../authconfig/radius_ldap_setup.sh --configfile /opt/SecureSpan/Appliance/config/configfiles/radius_ldap_setup.conf
.../authconfig/radius_ldap_setup.sh --getcurrentconfig local
.../authconfig/radius_ldap_setup.sh --getcurrentconfig ldap_only
.../authconfig/radius_ldap_setup.sh --getcurrentconfig radius_only
.../authconfig/radius_ldap_setup.sh --getcurrentconfig radius_and_ldap

- when called to get the default configuration values, the info will be sent to stdout for each file relevant
to the configuration type chosen, like this:
????

- when called with the configuration file it will:
	- make backup files in ./bk_files directory for the configuration files that it is going to modify
	- change the appropriate files on the system (depending on the configuration type chosen)
	- delete the configuration file it received as parameter


The packages required:
- for LDAP auth only:
openldap-clients-2.3.43-12.el5_6.7.x86_64.rpm

- for RADIUS auth only:
libtool-ltdl-1.5.22-7.el5_4.x86_64.rpm
freeradius2-2.1.7-7.el5.x86_64.rpm
freeradius2-utils-2.1.7-7.el5.x86_64.rpm
pam_radius-1.3.17-2.el5.x86_64.rpm (this was downloaded from
ftp://ftp.muug.mb.ca/mirror/fedora/epel/5/x86_64/pam_radius-1.3.17-2.el5.x86_64.rpm as there is no such package
in the CentOS repos)

- for LDAP and RADIUS auth:
All of the above.... apparently obvious but there was a chance that some additional packages would be required
to make some kind of binding between LDAP and Radius - however it is not the case.

===================================================================
SSH/Console access via LDAP Auth only:
-------------------------------------------------------------------

# The SSG 5.4.1 64bit system has the following packages already installed:
# openldap-2.3.43-12.el5_6.7.x86_64.rpm
# nss_ldap-253-37.el5.rpm

INSTALL:
	- openldap-clients-2.3.43-12.el5_6.7.x86_64.rpm

CONFIGURE:
	- /etc/openldap/ldap.conf
		URI ldap://LDAP_SRV_IP/
		BASE LDAP_BASE
	- /etc/ldap.conf
		###host 127.0.0.1
		base dc=example,dc=com
		uri ldap://LDAP_SRV_IP/
		ssl no
		tls_cacertdir /etc/openldap/cacerts
		pam_password md5
	- /etc/nsswitch.conf
		###passwd:     files
		passwd: files ldap
		###shadow:     files
		shadow: files ldap
		###group:      files
		group: files ldap
		netgroup: files ldap
		automount: files ldap

# Configuring ldap client
# there are 2 configuration files (confusing at first):
# - /etc/ldap.conf - not part of OpenLDAP; used by LDAP PAM module
#                    and Nameservice switch libraries for authentication
#                    or name service resolution; installed by nss_ldap package
# - /etc/openldap/ldap.conf - part of/installed by OpenLDAP package; it is
#                             be sufficient to query a LDAP server with
#                             ldapsearch command made available by this package
#
# We will configure both of them (although authconfig-tui would only modify
# the /etc/ldap.conf file) in order to be able to make tests in cli using the
# ldapsearch command.

TEST:
In order to test this configuration we need an LDAP server (see Server side configuration)

Assuming we have a properly configured LDAP server:

1. Add the "ldapuser" user for testing to ldap database:

grep ldapuser /etc/passwd > /tmp/changeldappasswd.tmp
/usr/share/openldap/migration/migrate_passwd.pl /tmp/changeldappasswd.tmp /tmp/changeldappasswd.ldif.tmp
cat /tmp/changeldappasswd.ldif.tmp | sed s/padl/example/ /tmp/changeldappasswd.ldif
rm -f /tmp/changeldappasswd.*
ldapadd -x -D "cn=Manager,dc=example,dc=com" -W -f /tmp/changeldappasswd.ldif
(enter the root ldap password here)
* if successful, a message similar to this should be received:
adding new entry "uid=ldapuser,ou=People,dc=example,dc=com"

2. Test ldap server on localhost:

ldapsearch -x -h localhost -b 'uid=ldapuser,ou=People,dc=example,dc=com'

Should give something like this:

# ldapuser, People, example.com
dn: uid=ldapuser,ou=People,dc=example,dc=com
uid: ldapuser
cn: ldapuser
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
shadowLastChange: 15055
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
gidNumber: 100
homeDirectory: /home/ldapuser
uidNumber: 1001
userPassword:: e0NSWVBUfWYvVjJ0RmdqM2ZNcC4=

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1

3. Create the /home/ldapuser directory as this will be the home dir for the ldapuser
mkdir /home/ldapuser
chmod 750 /home/ldapuser

4. Run the following tests:
* make sure there are no firewall rules dropping packets on tcp/389 socket
* make sure that we have no ldapuser on the SSG appliance: cat /etc/passwd | grep ldapuser

Test 1:
ldapsearch -x -h LDAP_SRV_IP -b 'uid=ldapuser,ou=People,dc=example,dc=com'

This should output details similar to those above (when the command was issued on the LDAP server itself)

Test 2:
# try to use the ldapuser on the SSG appliance as if it is a local user:
chown ldap:ldap /home/ldapuser
There should be no errors in this case as the system is now capable to interrogate ldap
in order to find the user to execute the chown command.

Test 3:
Use putty or any other ssh client to attempt login in the SSG appliance as ldapuser:

login as: ldapuser
ldapuser@10.7.48.109's password:
Last login: Fri Apr  8 13:14:20 2011 from adic-pc.l7tech.local
grep: /opt/SecureSpan/Controller/etc/host.properties: Permission denied
-bash-3.2$

As shown, the authentication was successful even if, again, there is no local "ldapuser" user.

------
End of ldap_only authentication testing.
-------------------------------------------------------------------
===================================================================




===================================================================
SSH/Console access via Radius Auth only:
-------------------------------------------------------------------

A simple sketch of how this works is presented below:
ssh client
  > SSHD:
    /etc/ssh/sshd_config: usePAM=yes
    v
    /etc/pam.d/sshd: pam_radius_auth.so
    v
    /etc/pam_radius.conf:  server[:port] / shared_secret / timeout
  v
  > radius server:
    - LDAP
    - MySQL
    - file (/etc/passwd and /etc/raddb/users)
  v
  SSHD
  > allow/deny authentication

There is no "radius client" in the usual sense used to communicate with
Radius server. In order to make ssh authentication with Radius we need
to configure SSHD to use PAM and them use PAM Radius module to interrogate
Radius server. The configuration of PAM Radius modules is made in the
pam_radius.conf file (provided by pam_radius package).
  
INSTALL: 
	- libtool-ltdl-1.5.22-7.el5_4.x86_64.rpm
	- freeradius2-2.1.7-7.el5.x86_64.rpm
	- freeradius2-utils-2.1.7-7.el5.x86_64.rpm
	- pam_radius-1.3.17-2.el5.x86_64.rpm

CONFIGURE:
	- /etc/ssh/sshd_config
		UsePAM yes
	- /etc/pam.d/sshd
		auth       sufficient   pam_radius_auth.so
	- /etc/pam_radius.conf (0600)
		RADIUS_SRV	secret	3

The users from radius server should exist on the machine that is accessed via SSH
but they may have no password set - this is how you actually test that radius
is supplying the password to sshd to give you access.... if they have a local
password set the configuration will allows falling back to local auth if Radius
server fails for any reason

TEST:
I should mention that radius only authentication provides a very basic and not secure
way to create a centralized authentication service.

The Radius server should be configured like this:
- insert as first line the next line to /etc/raddb/users:
test1     Cleartext-Password := "pass1"
- stop radius: /etc/init.d/radiusd stop
- make sure there is no test1 local user on the SSG appliance with: cat /etc/passwd | grep test1

Test 1:
- start radius in debug, foreground mode: /usr/sbin/radiusd -X
- use another console on the same machine to test with the following command:

radtest test1 pass1 localhost 0 testing123

- we should obtain something similar to:
Sending Access-Request of id 120 to 127.0.0.1 port 1812
        User-Name = "test1"
        User-Password = "pass1"
        NAS-IP-Address = 127.0.0.1
        NAS-Port = 0
rad_recv: Access-Accept packet from host 127.0.0.1 port 1812, id=120, length=20

Test 2:
- make Radius server accept the SSG appliance as client:
vim /etc/raddb/clients.conf
add:
client 10.7.48.109 {
        secret = qwer1234
}

* where "10.7.48.109" is the IP of the SSG appliance.

radtest test1 pass1 10.7.48.130 0 qwer1234

- should output something similar to:

Sending Access-Request of id 244 to 10.7.48.130 port 1812
        User-Name = "test1"
        User-Password = "pass1"
        NAS-IP-Address = 127.0.0.1
        NAS-Port = 0
rad_recv: Access-Accept packet from host 10.7.48.130 port 1812, id=244, length=20


Test 3:
SSH login with user test1:

Using putty: test1@10.4.7.130 and "pass1":


=======================================================================================
Server side configurations:

=======================
Configure ldap server
-----------------------

mkdir /var/lib/ldap/example.com
chown ldap:ldap /var/lib/ldap/example.com
slappasswd
 - will result in: {SSHA}s/f0298UKdHxuuofGqjDCDLAm9nq7fhB

 useradd -g users ldapuser
passwd ldapuser
* this user will be migrated to ldap a few steps later.

vim /etc/openldap/slapd.conf
The below lines should exist:

database        bdb
suffix          "dc=example,dc=com"
rootdn          "cn=Manager,dc=example,dc=com"
rootpw          {SSHA}v4qLq/qy01w9my60LLX9BvfNUrRhOjQZ
directory       /var/lib/ldap/example.com


wget http://www.padl.com/download/MigrationTools.tgz
tar -xvzf MigrationTools.tgz 
mkdir -p /usr/share/openldap/migration/ 
cd MigrationTools*
cp -rv * /usr/share/openldap/migration/

sed -i 's/padl/example/' /usr/share/openldap/migration/migrate_common.ph

cp /etc/openldap/DB_CONFIG.example /var/lib/ldap/example.com/DB_CONFIG

# make sure ldap is stopped
/etc/init.d/ldap stop
cd /usr/share/openldap/migration/
./migrate_all_offline.sh

(An error like "Key/data pair already exists" can be ignored...)

chown -R ldap:ldap /var/lib/ldap/example.com
/etc/init.d/ldap start

Just a quick test to make sure ldap server is working:

ldapsearch -x -b 'dc=example,dc=com' '(objectclass=*)'

Should output a lot of info about LDAP structure...

End of LDAP server configuration.
---------------------------------------------------------------------------------



===================================================================





===================================================================
SSH/Console access via Radius + LDAP Auth:
-------------------------------------------------------------------

Still some problems....
Next idea:
http://blog.sgicc.com/?p=284

The main problem here is not related to client configuration but to
communication between Radius server and its LDAP server - it seems
that radius is not capable of extracting the password for the user
when an authentication request is beeing sent to it...

===================================================================


Possible problems:

1. UID overlapping between ldap server and clients

UID for the ldapuser on the ldap server can be identical with an UID of another user on the
SSG appliance; this will lead to apparently weird behaviour of commands like chown which will
not give an error but will apply the local UID to the target:
Example:
ldapuser on ldap server has UID 502
ssgconfig user on SSG appliance has UID 502
chown ldapuser /home/ldapuser (on SSG appliance) will work but:
ls -l /home/ldapuser (on SSG appliance) will return:
......
drwx------ 2 ssgconfig users     4096 Apr  6 16:25 ldapuser
......

which is normal but most likely not wanted.


===============================================
Some details of Radius <-> LDAP communication:

PAP:
- client authenticates itself by sending a user name and an (optionally encrypted) password
to the server, which the server compares to its secrets database.
- it requires the client to authenticate itself at startup time
- is vulnerable to traffic sniffing and repeated trial and error attacks

CHAP:

1. - the server (authenticator) sends to the client
	- a randomly generated ``challenge'' string
	- its own hostname
2. - the client:
	- uses the hostname to look up the appropriate secret
	- combines the secret with the challenge
	- encrypts the string using a one-way hashing function
	- returns the result to the server along with the client's hostname
3. - the server:
	- performs the same computation
	- acknowledges the client if it arrives at the same result

- is not vulnerable to traffic sniffing and/or brute force attacks
- it requires the client to authenticate itself at startup time
- sends challenges at regular intervals to make sure the client hasn't been replaced by an intruder
