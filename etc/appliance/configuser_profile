set -u
set -e

trap doLogout INT

SYSWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/sysconfig/systemconfig.sh"
CONFWIZARD="sudo -u layer7 /opt/SecureSpan/Gateway/config/ssgconfig.sh"
EMCONFWIZARD="sudo -u layer7 /opt/SecureSpan/EnterpriseManager/config/emconfig.sh"
MASTERKEYMANAGE="/opt/SecureSpan/Appliance/libexec/masterkey-manage.pl"
GETROOT="su -"
MASTER_KEY_BACKUP_FILE_NAME="ssg_mkey.bak"

checkForSca() {
    SCADIAG="/opt/sun/sca6000/sbin/scadiag"
    if [ -s "${SCADIAG}" ] ; then
        SCA_PRESENT="true"
    else
        SCA_PRESENT=""
    fi
}

checkForEm() {
    EM_PRESENT=""
    EM_ENABLED=""
    if [ -d "/opt/SecureSpan/EnterpriseManager" ] ; then
        EM_PRESENT="true"
    fi
}

doLogout() {
    exit
}

confirmedMessage() {
    echo "${1}"
    echo "Press [Enter] to continue";
    read;
}

doNetworkConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure networking on this appliance"
            echo "What would you like to do?"
            echo ""
            echo " 1) Configure networking"
            echo " 2) Display current network configuration"
            echo " X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                1) clear
                   (${SYSWIZARD})
                   clear;;
                2) clear
                   (${SYSWIZARD} -printConfig)
                   confirmedMessage ""
                   clear;;
                *)
                    clear;
                    isMenuValid="y";
                    clear;;
            esac
    done
}

doNodeLifecycle() {
    clear
    echo "SecureSpan Gateway status options:"
    echo ""
    if [ ${1} -eq 22 ] ; then
        echo " 1) Start the SecureSpan Gateway"
    else
        echo " 1) Stop the SecureSpan Gateway"
        echo " 2) Restart the SecureSpan Gateway"
    fi
    echo " X) Exit menu"

    echo ""
    echo -n "Please make a selection: "
    read choice

    case $choice in
            1)
                clear;
                if [ ${1} -eq 22 ] ; then
                    (${CONFWIZARD} -lifecycle start);
                else
                    (${CONFWIZARD} -lifecycle stop);
                fi
                confirmedMessage ""
                clear;;
            2)
                clear;
                (${CONFWIZARD} -lifecycle restart);
                confirmedMessage ""
                clear;;
            *)
                clear;;
    esac
}

doConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure the SecureSpan Gateway application"
            echo "What would you like to do?"
            echo ""
            echo " 1) Upgrade the SecureSpan Gateway database"
            echo " 2) Create a new SecureSpan Gateway database"
            echo " 3) Configure the SecureSpan Gateway"
            echo " 4) Change the SecureSpan Gateway cluster password"
            echo " 5) Delete the SecureSpan Gateway"
            echo " 6) Display the current SecureSpan Gateway configuration"
            echo " 7) Manage SecureSpan Gateway status"
            echo " X) Exit menu"

            echo ""
            echo -n "Please make a selection: "
            read choice

            case $choice in
                    1)
                        clear;
                        (${CONFWIZARD} -databaseUgrade);
                        confirmedMessage ""
                        clear;;
                    2)
                        clear;
                        (${CONFWIZARD} wizard appliance-full);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    3)
                        clear;
                        (${CONFWIZARD});
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    4)
                        clear;
                        (${CONFWIZARD} -changeClusterPassphrase);
                        confirmedMessage ""
                        clear;;
                    5)
                        clear;
                        (${CONFWIZARD} wizard appliance-delete);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    6)
                        clear;
                        (${CONFWIZARD} show);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    7)
                        clear;
                        (${CONFWIZARD} show status);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in status service."
                        elif [ $STATUS -eq 21 ] || [ $STATUS -eq 22 ] ; then
                            doNodeLifecycle $STATUS
                        fi
                        clear;;
                    *)
                        clear;
                        isMenuValid="y";
                        clear;;
            esac
    done
}

doEmsConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Enterprise Service Manager"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure the Enterprise Service Manager"
        /sbin/chkconfig ssem && true # && true due to set -e
        if [ ${?} -eq 0 ] ; then
            echo " 2) Disable the Enterprise Service Manager"
        else
            echo " 2) Enable the Enterprise Service Manager"
        fi
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
            1)
                clear;
                (${EMCONFWIZARD});
                confirmedMessage ""
                clear;;
            2)
                /sbin/chkconfig ssem && true # && true due to set -e
                if [ ${?} -eq 0 ] ; then
                    echo "Disabing the Enterprise Service Manager."
                    sudo /sbin/chkconfig ssem off
                    confirmedMessage "Enterprise Service Manager disabled."
                else
                    echo "Enabling the Enterprise Service Manager."
                    sudo /sbin/chkconfig ssem on
                    confirmedMessage "Enterprise Service Manager enabled."
                fi
                clear;;
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                clear;
                confirmedMessage "That is not a valid selection";
                clear;;
        esac
    done
}


checkForSca
checkForEm
isValid="n"
while [ "$isValid" != "y" ]
do
    clear
        echo "Welcome to the SecureSpan Gateway"
        echo
        echo "This user account allows you to configure the appliance"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure networking"
        echo " 2) Display SecureSpan Gateway configuration menu"
        echo " 3) Use a privileged shell (root)"
        echo " 4) Change the Master Passphrase"
        echo " 5) Display Remote Management configuration menu"
        if [ "${SCA_PRESENT}" == "true" ] ; then
            echo " 6) Configure HSM"
        fi

        if [ "${EM_PRESENT}" == "true" ] ; then
            echo " 7) Display Enterprise Service Manager configuration menu"
        fi
        echo " R) Reboot the SSG appliance (apply the new configuration)"
        echo " X) Exit (no reboot)"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1) 	clear;
                    doNetworkConfiguration
                    clear;;
                2)  clear;
                    doConfiguration
                    clear;;
                3)  clear;
                    (${GETROOT});
                    clear;;
                4)  clear;
                    (${CONFWIZARD} -changeMasterPassphrase);
                    confirmedMessage ""
                    clear;;
                5)  clear;
                    (${CONFWIZARD} -processController);
                    confirmedMessage ""
                    clear;;
                x|X)  doLogout;;
                r|R)  echo -n "Are you sure you want to reboot the SecureSpan Gateway? [y/n]: "
                    read okToReboot
                    if [ "$okToReboot" == "y" ] || [ "$okToReboot" == "yes" ] ; then
                        sudo /sbin/reboot
                    fi
                    clear;;
                *)  if [ "$choice" == "6" ] && [ "${SCA_PRESENT}" == "true" ]; then
                        clear;
                        echo "Checking for USB drive"
                        (sudo ${MASTERKEYMANAGE} probe &> /dev/null);
                        if [ ${?} != 0 ] ; then
                            echo ""
                            confirmedMessage "The USB drive could not be found. Please attach the USB drive and try again."
                        else
                            echo "Found the USB drive. Continuing..."
                            echo -n "Enter the keystore password:"
                            read -s ksPassword;
			                echo ""
                            echo -n "Enter the master key backup password:"
                            read -s masterKeyBackupPassword;
			                echo "" 
                            (sudo ${MASTERKEYMANAGE} backup ${ksPassword} ${MASTER_KEY_BACKUP_FILE_NAME} ${masterKeyBackupPassword});
                            if [ ${?} != 0 ] ; then
                                echo ""
                                confirmedMessage "The master key backup did not succeed. See the error message above for details."
                            else
                                echo ""
                                confirmedMessage "The master key backup was successfull."
                            fi
                        fi
                    elif [ "$choice" == "7" ] && [ "${EM_PRESENT}" == "true" ]; then
                        clear;
                        doEmsConfiguration
                        clear;
                    else
                        isValid="n";
                        confirmedMessage "That is not a valid selection";
                        read;
                    fi;;
        esac
done
