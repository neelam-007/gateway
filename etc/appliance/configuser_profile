
set -u
set -e

trap doLogout INT

SYSWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/config/systemconfig.sh"
CONFWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/libexec/ssgconfig_launch"
HSMCONFIG="sudo -u layer7 /opt/SecureSpan/Appliance/config/scahsmconfig.sh"
EMCONFWIZARD="sudo -u layer7 /opt/SecureSpan/EnterpriseManager/config/emconfig.sh"
MASTERKEYMANAGE="/opt/SecureSpan/Appliance/libexec/masterkey-manage.pl"
NCIPHERCONFIG="sudo -u layer7 /opt/SecureSpan/Appliance/libexec/ncipherconfig.pl"
CHECK_USB_KEY="sudo -u layer7 ${MASTERKEYMANAGE} probe &> /dev/null"
PATCHTOOL="sudo -u layer7 /opt/SecureSpan/Appliance/libexec/patchcli_launch"
VIEWLOG="sudo /opt/SecureSpan/Appliance/libexec/viewlog"
GETROOT="su -"
MASTER_KEY_BACKUP_FILE_NAME="ssgscabk"

checkForSca() {
    SCADIAG="/opt/sun/sca6000/sbin/scadiag"
    if [ -s "${SCADIAG}" ] ; then
        SCA_PRESENT="true"
    else
        SCA_PRESENT=""
    fi
}

checkForNcipher() {
    NCIPHER_PRESENT=""
    if [ -s "/opt/nfast/bin/new-world" ] ; then
        NCIPHER_PRESENT="true"
    fi
}

checkForEm() {
    EM_PRESENT=""
    EM_ENABLED=""
    if [ -r "/opt/SecureSpan/EnterpriseManager/config/emconfig.sh" ] ; then
        EM_PRESENT="true"
    fi
}

checkForEmLog() {
    EM_LOG_PRESENT=""
    if [ -r "/opt/SecureSpan/EnterpriseManager/var/logs/ssem_0_0.log" ] ; then
        EM_LOG_PRESENT="true"
    fi
}

checkForPatcher() {
    PATCHER_PRESENT=""
    if [ -e "/opt/SecureSpan/Controller/bin/patch.sh" ] ; then
        PATCHER_PRESENT="true"
    fi
}


checkForAuthMethods() {
    #check for the existence of the files allowing configuration of alternative authentication methods.
    AUTHMETHODS_CONFIG=""
    if [ -e "/opt/SecureSpan/Appliance/config/authconfig/orig_conf_files" ] && [ -e "/etc/pam.d/sshd" ] && [ -e "/etc/pam_radius.conf" ] && [ -e "/etc/openldap/ldap.conf" ] && [ -e "/etc/ldap.conf" ] && [ -e "/etc/nsswitch.conf" ] ; then
        AUTHMETHODS_CONFIG="true"
    fi
}

doLogout() {
    clear
    exit
}

confirmedMessage() {
    echo -e "${1}"
    echo "Press [Enter] to continue";
    read;
}

confirmAction() {
    confirmed=2
    echo -n "${1} [y/n]: "

    while [ "${confirmed}" -eq 2 ]
    do
        read choice
        choice=$(echo "${choice}" | tr "[:upper:]" "[:lower:]")

        case $choice in
            "y")     confirmed=0;;
            "yes")   confirmed=0;;
            "t")     confirmed=0;;
            "true")  confirmed=0;;
            "n")     confirmed=1;;
            "no")    confirmed=1;;
            "f")     confirmed=1;;
            "false") confirmed=1;;
            *) echo -n "That is not a valid choice [y/n]: ";;
        esac
    done

    return ${confirmed}
}

doSystemConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure system settings on this appliance"
            echo "What would you like to do?"
            echo ""
            echo " 1) Configure networking and system time settings"
            echo " 2) Display current network configuration"
            echo " 3) Configure keyboard layout"
            if [ "${AUTHMETHODS_CONFIG}" == "true" ] ; then
                echo " 4) Configure authentication method"
            fi
            echo " A) About system (versions)"
            echo " X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                1) clear                                                      ;
                   (${SYSWIZARD} -systemConfig)
                   confirmedMessage ""
                   clear;;
                2) clear
                   (${SYSWIZARD} -printConfig)
                   confirmedMessage ""
                   clear;;
                3) clear
                   (${SYSWIZARD} -keyboardConfig)
                   confirmedMessage ""
                   clear;;
                a|A) clear
                   echo "Layer 7 Software Versions"
                   echo "$(rpm -qa --qf '%{NAME}-%{VERSION}-%{RELEASE}_%{ARCH}\n' | grep ssg | sed "s/^/  - /")"
                   echo "$(rpm -qa --qf '%{NAME}-%{VERSION}-%{RELEASE}_%{ARCH}\n' | grep ssem | sed "s/^/  - /")"
                   confirmedMessage ""
                   clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *) if [ "$choice" == "4" ] && [ "${AUTHMETHODS_CONFIG}" == "true" ]; then
                       clear
                       (${SYSWIZARD} -authConfig)
                       confirmedMessage ""
                       clear;
                   else
                        isMenuValid="n"
                        confirmedMessage "That is not a valid selection";
                   fi;;
            esac
    done
    isMenuValid="n"
}

doNodeLifecycle() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "Layer 7 Gateway status options:"
        echo ""
        if [ ${1} -eq 22 ] ; then
            echo " 1) Start the Layer 7 Gateway"
        else
            echo " 1) Stop the Layer 7 Gateway"
            echo " 2) Restart the Layer 7 Gateway"
        fi
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    if [ ${1} -eq 22 ] ; then
                        (${CONFWIZARD} -lifecycle start);
                    else
                        (${CONFWIZARD} -lifecycle stop);
                    fi
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                2)
                    clear;
                    (${CONFWIZARD} -lifecycle restart);
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                x|X)
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

doConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure the Layer 7 Gateway application"
            echo "What would you like to do?"
            echo ""
            echo " 1) Upgrade the Layer 7 Gateway database"
            echo " 2) Create a new Layer 7 Gateway database"
            echo " 3) Configure the Layer 7 Gateway"
            echo " 4) Change the Layer 7 Gateway cluster passphrase"
            echo " 5) Delete the Layer 7 Gateway"
            echo " 6) Display the current Layer 7 Gateway configuration"
            echo " 7) Manage Layer 7 Gateway status"
            echo " X) Exit menu"

            echo ""
            echo -n "Please make a selection: "
            read choice

            case $choice in
                    1)
                        clear;
                        (${CONFWIZARD} -databaseUgrade);
                        confirmedMessage ""
                        clear;;
                    2)
                        clear;
                        echo "Accessing configuration, please wait ..."
                        (${CONFWIZARD} wizard appliance-full);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          clear
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          clear
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          clear
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    3)
                        clear;
                        echo "Accessing configuration, please wait ..."
                        (${CONFWIZARD});
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          clear
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          clear
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          clear
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    4)
                        clear;
                        (${CONFWIZARD} -changeClusterPassphrase);
                        confirmedMessage ""
                        clear;;
                    5)
                        clear;
                        echo "Accessing configuration, please wait ..."
                        (${CONFWIZARD} wizard appliance-delete);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          clear
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          clear
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          clear
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    6)
                        clear;
                        echo "Accessing configuration, please wait ..."
                        (${CONFWIZARD} show);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          clear
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          clear
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          clear
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    7)
                        clear;
                        echo "Accessing configuration, please wait ..."
                        (${CONFWIZARD} show status);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          clear
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          clear
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          clear
                          confirmedMessage "Unexpected error in status service."
                        elif [ $STATUS -eq 21 ] || [ $STATUS -eq 22 ] ; then
                            doNodeLifecycle $STATUS
                        fi
                        clear;;
                    x|X)
                        clear;
                        isMenuValid="y";
                        clear;;
                    *)
                        clear;
                        confirmedMessage "That is not a valid selection";
                        clear;;
            esac
    done
    isMenuValid="n"
}

doEmsConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Enterprise Service Manager"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure the Enterprise Service Manager"
        /sbin/chkconfig ssem && true # && true due to set -e
        if [ ${?} -eq 0 ] ; then
            echo " 2) Disable the Enterprise Service Manager"
        else
            echo " 2) Enable the Enterprise Service Manager"
        fi
        echo " 3) Reset password for ESM user account"
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
            1)
                clear;
                (${EMCONFWIZARD});
                confirmedMessage ""
                clear;;
            2)
                clear;
                if [ ! -f "/opt/SecureSpan/EnterpriseManager/var/emconfig.properties" ] ; then
                    confirmedMessage "Please configure the Enterprise Service Manager and try again."
                else
                    /sbin/chkconfig ssem && true # && true due to set -e
                    if [ ${?} -eq 0 ] ; then
                        echo "Disabling the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem off
                        confirmedMessage "Enterprise Service Manager disabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -eq 0 ] ; then
                            if confirmAction "Do you want to stop the Enterprise Service Manager?" ; then
                                echo "Stopping Enterprise Service Manager."
                                sudo /sbin/service ssem stop
                                confirmedMessage "Enterprise Service Manager stopped."
                            fi
                        fi
                    else
                        echo "Enabling the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem on
                        confirmedMessage "Enterprise Service Manager enabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -ne 0 ] ; then
                            if confirmAction "Do you want to start the Enterprise Service Manager?" ; then
                                echo "Starting Enterprise Service Manager."
                                sudo /sbin/service ssem start
                                confirmedMessage "Enterprise Service Manager started."
                            fi
                        fi
                    fi
                fi
                clear;;
            3)
                clear;
                sudo /sbin/service ssem status &>/dev/null && true # && true due to set -e
                if [ ${?} -eq 0 ] ; then
                    confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is not running."
                else
                    (${EMCONFWIZARD} wizard reset);
                    STATUS=$?
                    if [ $STATUS -eq 3 ] ; then
                        confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is configured and is not running."
                    else
                        confirmedMessage ""
                    fi
                fi
                clear;;
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                clear;
                confirmedMessage "That is not a valid selection";
                clear;;
        esac
    done
    isMenuValid="n"
}

doInitializeHsm() {
    echo "Initializing the HSM will irreversibly delete ALL data"
    echo "from the hardware keystore."
    echo ""
    echo "You may import an existing master key to this HSM or create a new one"
    echo ""
    echo "What would like to do?"
    echo "1) Create a new master key"
    echo "2) Restore an existing master key"
    echo "X) Exit menu"
    echo -n "Please make a selection: "
    read choice
    case $choice in
        1)
            clear;
            confirmedMessage "This will stop the Gateway (if it is running) and then initialize the HSM"
            (${CONFWIZARD} -lifecycle ensureStopped);
            STOPRESULT=$?
            if [ ${STOPRESULT} -eq 0 ]; then
                (${HSMCONFIG} -initializeHsm)
            else
                printf "Unable to confirm that the Gateway is stopped (code=${STOPRESULT}).\nPlease reboot and try again."
            fi;;
        2)
            clear;
            confirmedMessage "This will stop the Gateway (if it is running),\nthen restore the master key (and reinitialize) the HSM"
            (${CONFWIZARD} -lifecycle ensureStopped);
            STOPRESULT=$?
            if [ ${STOPRESULT} -eq 0 ]; then
                (${HSMCONFIG} -restoreMasterKey)
            else
                printf "Unable to confirm that the Gateway is stopped (code=${STOPRESULT}).\nPlease reboot and try again."
            fi;;
        x|X)
            clear;
            echo "The HSM will not be initialized";;
        *)
            echo "$choice is not a valid selection";;
    esac
    confirmedMessage ""
}

checkHsmStatus() {
    (${HSMCONFIG} -checkHsmStatus)
    STATUS_OF_HSM=$?
}

doEnableDisableHsm() {
    checkHsmStatus
    if [ ${STATUS_OF_HSM} -eq 0 ] ; then
        #it's enabled
        echo "The HSM is currently enabled"
        confirmedMessage "This will Disable the HSM"
        (${HSMCONFIG} -disableHsm);
    elif [ ${STATUS_OF_HSM} -eq 1 ] ; then
        #it's disabled
        echo "The HSM is currently disabled"
        confirmedMessage "This will Enable the HSM"
        (${HSMCONFIG} -enableHsm);
    else
        echo "Cannot check the status of the HSM"
    fi
    confirmedMessage ""
}

doHsmMasterKeyBackup() {
    confirmedMessage "This will back up the Master Key to USB flash drive"
    echo "Checking for USB drive"
    ${CHECK_USB_KEY};
    if [ ${?} != 0 ] ; then
        echo ""
        confirmedMessage "The USB drive could not be found. Please attach the USB drive and try again."
    else
        echo "Found the USB drive. Continuing..."
        echo -n "Enter the keystore password:"
        read -s ksPassword;
        echo ""
        echo -n "Enter the master key backup password:"
        read -s masterKeyBackupPassword;
        echo ""
        (sudo ${MASTERKEYMANAGE} backup ${ksPassword} ${MASTER_KEY_BACKUP_FILE_NAME} ${masterKeyBackupPassword});
        if [ ${?} != 0 ] ; then
            echo ""
            confirmedMessage "The master key backup did not succeed. See the error message above for details."
        else
            echo ""
            confirmedMessage "The master key backup was successful."
        fi
    fi
}

doScaOrNcipherConfiguration() {
    if [ "${NCIPHER_PRESENT}" == "true" ] ; then
        doNcipherConfiguration
    else
        doHsmConfiguration
    fi
}

doNcipherConfiguration() {
    (${NCIPHERCONFIG})
    ERR=$?
    if [ $ERR -ne 0 ] ; then
        echo ""
        confirmedMessage "There was an error while configuring the HSM."
        return 0
    else
        echo ""
        return 0
    fi
}

doHsmConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Hardware Security Module"
        echo "on the Layer 7 Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) Initialize the HSM"
        echo " 2) Enable/Disable HSM"
        echo " 3) Back up the HSM Master Key to a USB flash drive"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    doInitializeHsm
                    clear;;
                2)
                    clear;
                    doEnableDisableHsm
                    clear;;
                3)
                    clear;
                    doHsmMasterKeyBackup
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
}

doPatchManagementMenu() {
    isPatchMenuValid="n"
    while [ "$isPatchMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to manage Layer 7 patches on the"
        echo "Layer 7 Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) Upload a patch to the Gateway"
        echo " 2) Install a patch onto the Gateway"
        echo " 3) Delete a patch from the Gateway"
        echo " 4) List the patches uploaded to the Gateway"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    doPatchUpload
                    clear;;
                2)
                    clear;
                    doPatchInstall
                    clear;;
                3)
                    clear;
                    doPatchDelete
                    clear;;
                4)
                    clear;
                    doPatchList
                    clear;;
                x|X)
                    clear;
                    isPatchMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
}

uploadPatch() {
    whichone=$1
    if [ -e "$whichone" ] ; then
        echo "You have chosen to upload the patch named "
        confirmedMessage "\"$whichone\""
        echo ""
        echo "Please wait while the patch is uploaded ..."

        PATCHTMP=$(moveToTemp "${whichone}")
        if [ $? -ne 0 ] ; then
            echo ""
            confirmedMessage "There was an error while uploading the patch."
            return 0
        fi

        (${PATCHTOOL} upload "${PATCHTMP}")
        ERR=$?

        mv "${PATCHTMP}" "${whichone}" && rmdir $(dirname "${PATCHTMP}") &>/dev/null

        echo ""
        if [ $ERR -ne 0 ] ; then
            confirmedMessage "There was an error while uploading the patch."
        else
            confirmedMessage ""
        fi
        return 0
    else
        confirmedMessage "Patch file not found: $whichone"
        return $?
    fi
}

moveToTemp() {
    whichone=$1
    TMPDIR=$(mktemp -dt patch.XXXXXXXX)
    if [ $? -ne 0 ] ; then
        return 1
    fi

    chmod g+rx,a+rx "${TMPDIR}"
    if [ $? -ne 0 ] ; then
        rmdir "${TMPDIR}" &>/dev/null
        return 1
    fi

    mv "${whichone}" "${TMPDIR}/" &>/dev/null
    if [ $? -ne 0 ] ; then
        rmdir "${TMPDIR}" &>/dev/null
        return 1
    fi

    PATCHNAME=$(basename "${whichone}")
    echo "${TMPDIR}/${PATCHNAME}"

    return 0
}

installPatch() {
    patchinfo=$1
    echo ""
    echo "You have chosen to install the following patch"
    confirmedMessage "\" $patchinfo\""
    echo "Please wait while the patch is installed ..."
    ($PATCHTOOL install $patchinfo)
    ERR=$?
    if [ $ERR -ne 0 ] ; then
        echo ""
        confirmedMessage "There was an error while installing the patch."
        return 0
    else
        echo ""
        confirmedMessage ""
        return 0
    fi
}

deletePatch() {
    patchinfo=$1
    echo ""
    echo "You have chosen to delete the following patch"
    confirmedMessage "\" $patchinfo\""
    echo "Please wait while the patch is deleted ..."
    ($PATCHTOOL delete $patchinfo)
    ERR=$?
    if [ $ERR -ne 0 ] ; then
        echo ""
        confirmedMessage "There was an error while deleting the patch."
        return 0
    else
        echo ""
        confirmedMessage ""
        return 0
    fi
}

doPatchUpload() {
    isPatchUploadMenuValid="n"
    while [ "$isPatchUploadMenuValid" != "y" ]
    do

        DROPBOXPATCHES=(`find $HOME -maxdepth 1 -iname "*.L7P"`)
        LEN=${#DROPBOXPATCHES[*]}

        echo ""
        echo "This option uploads a patch supplied by Layer 7 and registers it with the Gateway."
        echo "Integrity checks are performed to ensure the patch is intact."
        echo ""
        echo "NOTE: You must upload a patch before you can install it."
        echo "      All patches from Layer 7 have an \"L7P\" extension."
        echo ""
        echo "If the patch you want to upload is not listed below,"
        echo "use the \"S\" option to locate it."

        if [ $LEN -eq 0 ] ; then
            echo ""
            echo "No patches were found in the ssgconfig directory."
        fi

        echo ""

        for (( i = 0 ; i < $LEN ; i++))
        do
            index=$[$i+1]
            patchname=${DROPBOXPATCHES[$i]}
            echo "$index) `basename $patchname`"
        done

        echo "S) Specify a patch not listed"
        echo "X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice
        case $choice in
            s|S)
                echo -n "Please enter the path to the patch you wish to upload: "
                read whichone
                uploadPatch "$whichone"
                echo ""
                clear;;
            x|X)
                clear;
                isPatchUploadMenuValid="y";
                clear;;
            *)
                if ! [[ "$choice" =~ ^[0-9]+$ ]] ; then
                    isValid="n";
                    confirmedMessage "That is not a valid selection";
                else
                    realindex=$[$choice-1]
                    if [ $realindex -ge 0 ] && [ $realindex -lt $LEN ] ; then
                        clear
                        whichone=${DROPBOXPATCHES[$realindex]}
                        uploadPatch "$whichone"
                    else
                        confirmedMessage "That is not a valid selection";
                    fi
                fi
                clear;;
        esac
    done
}

doPatchInstall() {
    isPatchInstallMenuValid="n"
    shouldReload="y"

    declare -a REGISTEREDPATCHES
    while [ "$isPatchInstallMenuValid" != "y" ]
    do
        if [ "$shouldReload" == "y" ] ; then
            echo "Please wait while the list of available patches is retrieved..."
            old=$IFS
IFS='
'
            REGISTEREDPATCHES=(`IFS=" "; $PATCHTOOL list | egrep "UPLOADED|ROLLED_BACK" || true`)
            IFS=$old
            LEN=${#REGISTEREDPATCHES[*]}
        fi

        clear;
        echo ""
        echo "This option installs a patch that has been uploaded."
        echo ""

        if [ $LEN -eq 0 ] ; then
            echo ""
            echo "No patches are available for installation."
            echo ""
            echo "Please use the patch management menu to upload a"
            echo "patch before it can be installed."
            confirmedMessage ""
            isPatchInstallMenuValid="y"
        else
            echo ""
            echo "The following patches are available for installation. "
            echo "Please make your selection via line number."
            echo ""

            declare -a patch_ids
            for (( i = 0 ; i < $LEN ; i++))
            do
                index=$[$i+1]
                patchinfo=${REGISTEREDPATCHES[$i]}
                patchid=`echo $patchinfo | awk -F'(' '{print $1}' | sed 's/Patch ID \(.*\)/\1/'`
                patchdesc=`echo $patchinfo | awk -F'(' '{print $2}' | awk -F')' '{print $1}'`
                patch_ids[$i]=$patchid
                echo "$index) ID: $patchid"
                echo "   DESCRIPTION: $patchdesc"
            done
            echo "X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                x|X)
                    isPatchInstallMenuValid="y";
                    clear;;
                *)
                    shouldReload="n"
                    if ! [[ "$choice" =~ ^[0-9]+$ ]] ; then
                        isPatchInstallMenuValid="n";
                        confirmedMessage "That is not a valid selection";
                    else
                        patch_ids_len=${#patch_ids[*]}
                        realindex=$[$choice-1]
                        if [ $realindex -ge 0 ] && [ $realindex -lt $patch_ids_len ] ; then
                            clear
                            whichone=${patch_ids[$realindex]}
                            installPatch "$whichone"
                            shouldReload="y"
                        else
                            isPatchInstallMenuValid="n";
                            confirmedMessage "That is not a valid selection";
                        fi
                    fi
                    clear;;
            esac
        fi
    done
}

doPatchDelete() {
    echo "Please wait while the list of available patches is retrieved..."
    old=$IFS
IFS='
'
    REGISTEREDPATCHES=(`IFS=" "; $PATCHTOOL list | egrep "UPLOADED|ROLLED_BACK" || true`)
    IFS=$old
    LEN=${#REGISTEREDPATCHES[*]}
    if [ $LEN -eq 0 ] ; then
        clear;
        echo ""
        echo "There are no patches that can be deleted."
        echo ""
        echo "Only patches that are currently uploaded but not yet"
        echo "installed can be deleted."
        confirmedMessage ""
    else
        clear;
        declare -a patch_ids
        for (( i = 0 ; i < $LEN ; i++))
        do
            index=$[$i+1]
            patchinfo=${REGISTEREDPATCHES[$i]}
            patchid=`echo $patchinfo | awk -F'(' '{print $1}' | sed 's/Patch ID \(.*\)/\1/'`
            patchdesc=`echo $patchinfo | awk -F'(' '{print $2}' | awk -F')' '{print $1}'`
            patch_ids[$i]=$patchid
            echo "$index) ID: $patchid"
            echo "   DESCRIPTION: $patchdesc"
        done
        echo "X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice
        case $choice in
            x|X)
                clear;
                clear;;
            *)
                realindex=$[$choice-1]
                patch_ids_len=${#patch_ids[*]}
                if [ $realindex -ge 0 ] && [ $realindex -lt $patch_ids_len ] ; then
                    whichone=${patch_ids[$realindex]}
                    deletePatch "$whichone"
                else
                    confirmedMessage "That is not a valid selection";
                fi
                clear;;
        esac
    fi
}

doPatchList() {
    echo "Please wait while the list of patches is retrieved ..."
    old=$IFS
IFS='
'
    REGISTEREDPATCHES=(`IFS=" "; $PATCHTOOL list "::id::description::state::last_mod"`)
    IFS=$old
    LEN=${#REGISTEREDPATCHES[*]}
    clear;
    for (( i = 0 ; i < $LEN ; i++))
    do
        patchinfo=${REGISTEREDPATCHES[$i]}
        index=$[$i+1]
        echo "$index) $patchinfo"
        echo ""
    done
    confirmedMessage ""
}

doLogMenu() {
    checkForEmLog
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to view log files on the"
        echo "Layer 7 Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) View system logs"
        echo " 2) View Gateway logs"
        if [ "${EM_LOG_PRESENT}" == "true" ] ; then
            echo " 3) View Enterprise Service Manager log"
        fi
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    LOG_MENU_ITEMS=( "main" "security" "command" "MySQL" )
                    LOG_FILE_PATTERNS=(
                        "/var/log/messages"
                        "/var/log/secure"
                        "/var/log/bash_commands.log"
                        "/var/log/mysqld.log"
                    )
                    doLogSubMenu "system"
                    clear;;
                2)
                    clear;
                    LOG_MENU_ITEMS=( "node" "host" "patch history" "patch client" "patch verifier" )
                    LOG_FILE_PATTERNS=(
                        "/opt/SecureSpan/Gateway/node/default/var/logs/ssg_._0.log"
                        "/opt/SecureSpan/Controller/var/logs/sspc_._0.log"
                        "/opt/SecureSpan/Controller/var/logs/patches.log"
                        "/opt/SecureSpan/Controller/var/logs/patch_cli_._0.log"
                        "/opt/SecureSpan/Controller/var/logs/patch_verifier_._0.log"
                    )
                    doLogSubMenu "Gateway"
                    clear;;
                3)
                    clear;
                    doLogViewMenu "Enterprise Service Manager" "/opt/SecureSpan/EnterpriseManager/var/logs/ssem_._0.log"
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

doLogSubMenu() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to view ${1}"
        echo "log files on the Layer 7 Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        count=0;
        while [ ! -z "${LOG_MENU_ITEMS[count]:+1}" ] ; do
            local LOG_NAME="${LOG_MENU_ITEMS[count]}"
            count=$(( $count + 1 ))
            echo " ${count}) View ${LOG_NAME} logs"
        done
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    count=0;
                    LOG_MENU_DISPLAYED=""
                    while [ ! -z "${LOG_MENU_ITEMS[count]:+1}" ] ; do
                        local LOG_NAME="${LOG_MENU_ITEMS[count]}"
                        local LOG_PATTERN="${LOG_FILE_PATTERNS[count]}"
                        count=$(( $count + 1 ))
                        if [ "${choice}" == "${count}" ] ; then
                            LOG_MENU_DISPLAYED="true"
                            doLogViewMenu "${LOG_NAME}" "${LOG_PATTERN}"
                        fi
                    done
                    if [ "${LOG_MENU_DISPLAYED}" != "true" ]; then
                        confirmedMessage "That is not a valid selection";
                    fi
                    clear;;
        esac
    done
    isMenuValid="n"
}

doLogViewMenu() {
    isMenuValid="n"
    local LOG_PATTERN="${2}"
    LOG_FILES=( $(${VIEWLOG} list "${LOG_PATTERN}" || true) )
    if [ -z "${LOG_FILES:+1}" ] ; then
        isMenuValid="y"
        confirmedMessage "No log files available for ${1}"
        clear
    elif [ "${#LOG_FILES[@]}" == "1" ] ; then
        # If there is only one log then display it
        isMenuValid="y"
        ${VIEWLOG} "${LOG_FILES[0]}"
        clear
    fi

    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to view the"
        echo "${1} log file(s)"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) View current log"
        echo " 2) View older logs"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    ${VIEWLOG} "${LOG_FILES[0]}"
                    clear;;
                2)
                    clear;
                    doLogSelection "${1}"
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

doLogSelection() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to view older"
        echo "${1} log file(s)"
        echo ""
        echo "What would you like to do?"
        echo ""
        count=1;
        while [ ! -z "${LOG_FILES[count]:+1}" ] ; do
            local LOG_NAME="${LOG_FILES[count]##*/}"
            echo " ${count}) View ${LOG_NAME} log"
            count=$(( $count + 1 ))
        done
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                [1-9])
                    clear;
                    if [ ! -z "${LOG_FILES[choice]:+1}" ] ; then
                        ${VIEWLOG} "${LOG_FILES[choice]}"
                    else
                        confirmedMessage "That is not a valid selection";
                    fi
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

checkForSca
checkForNcipher
checkForEm
checkForPatcher
checkForAuthMethods
isPatchListMenuValid="n"
while [ "$isPatchListMenuValid" != "y" ]
do
    clear
        echo "Welcome to the SecureSpan Gateway - $(cat /etc/issue | head -1 | cut -d" " -f4 | sed 's/^v/ Version /')"
        echo
        echo "This user account allows you to configure the appliance"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure system settings"
        echo " 2) Display Layer 7 Gateway configuration menu"
        echo " 3) Use a privileged shell (root)"
        echo " 4) Change the Master Passphrase"
        echo " 5) Display Remote Management configuration menu"
        if [ "${SCA_PRESENT}" == "true" -o "${NCIPHER_PRESENT}" == "true" ] ; then
            echo " 6) Manage HSM"
        fi

        if [ "${EM_PRESENT}" == "true" ] ; then
            echo " 7) Display Enterprise Service Manager configuration menu"
        fi
        if [ "${PATCHER_PRESENT}" == "true" ] ; then
            echo " 8) Display Patch Management menu"
        fi
        echo " 9) Display Log Viewing menu"

        echo " R) Reboot the SSG appliance (apply the new configuration)"
        echo " X) Exit (no reboot)"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1) 	clear;
                    doSystemConfiguration
                    clear;;
                2)  clear;
                    doConfiguration
                    clear;;
                3)  clear;
                    (${GETROOT});
                    if [ "X$?" == "X1" ]; then
                        confirmedMessage "";
                    fi
                    ;;
                4)  clear;
                    (${CONFWIZARD} -changeMasterPassphrase);
                    confirmedMessage ""
                    clear;;
                5)  clear;
                    (${CONFWIZARD} -processController);
                    confirmedMessage ""
                    clear;;
                9)  clear;
                    doLogMenu
                    clear;;
                x|X)  doLogout;;
                r|R)  echo -n "Are you sure you want to reboot the Layer 7 Gateway? [y/n]: "
                    read okToReboot
                    if [ "$okToReboot" == "y" ] || [ "$okToReboot" == "yes" ] ; then
                        sudo /sbin/reboot
                    fi
                    clear;;
                *)  if [ "$choice" == "6" ] && [ "${SCA_PRESENT}" == "true" -o "${NCIPHER_PRESENT}" == "true" ]; then
                        clear;
                        doScaOrNcipherConfiguration
                        clear;
                    elif [ "$choice" == "7" ] && [ "${EM_PRESENT}" == "true" ]; then
                        clear;
                        doEmsConfiguration
                        clear;
                    elif [ "$choice" == "8" ] && [ "${PATCHER_PRESENT}" == "true" ]; then
                        clear;
                        doPatchManagementMenu
                        clear;
                    else
                        isPatchListMenuValid="n";
                        confirmedMessage "That is not a valid selection";
                    fi;;
        esac
done
