set -u
set -e

trap doLogout INT

SYSWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/config/systemconfig.sh"
CONFWIZARD="sudo -u layer7 /opt/SecureSpan/Gateway/config/ssgconfig.sh"
HSMCONFIG="sudo -u layer7 /opt/SecureSpan/Appliance/config/scahsmconfig.sh"
EMCONFWIZARD="sudo -u layer7 /opt/SecureSpan/EnterpriseManager/config/emconfig.sh"
MASTERKEYMANAGE="/opt/SecureSpan/Appliance/libexec/masterkey-manage.pl"
CHECK_USB_KEY="sudo -u layer7 ${MASTERKEYMANAGE} probe &> /dev/null"

GETROOT="su -"
MASTER_KEY_BACKUP_FILE_NAME="ssg_mkey.bak"

checkForSca() {
    SCADIAG="/opt/sun/sca6000/sbin/scadiag"
    if [ -s "${SCADIAG}" ] ; then
        SCA_PRESENT="true"
    else
        SCA_PRESENT=""
    fi
}

checkForEm() {
    EM_PRESENT=""
    EM_ENABLED=""
    if [ -d "/opt/SecureSpan/EnterpriseManager" ] ; then
        EM_PRESENT="true"
    fi
}

doLogout() {
    exit
}

confirmedMessage() {
    echo -e "${1}"
    echo "Press [Enter] to continue";
    read;
}

confirmAction() {
    confirmed=1
    echo -n "${1} [y/n]: "
    read choice
    if [ "${choice}" == "y" ] || [ "${choice}" == "yes" ] ; then
        confirmed=0
    fi
    return ${confirmed}
}

doNetworkConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure networking on this appliance"
            echo "What would you like to do?"
            echo ""
            echo " 1) Configure networking"
            echo " 2) Display current network configuration"
            echo " X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                1) clear
                   (${SYSWIZARD})
                   clear;;
                2) clear
                   (${SYSWIZARD} -printConfig)
                   confirmedMessage ""
                   clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
            esac
    done
    isMenuValid="n"
}

doNodeLifecycle() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "SecureSpan Gateway status options:"
        echo ""
        if [ ${1} -eq 22 ] ; then
            echo " 1) Start the SecureSpan Gateway"
        else
            echo " 1) Stop the SecureSpan Gateway"
            echo " 2) Restart the SecureSpan Gateway"
        fi
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    if [ ${1} -eq 22 ] ; then
                        (${CONFWIZARD} -lifecycle start);
                    else
                        (${CONFWIZARD} -lifecycle stop);
                    fi
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                2)
                    clear;
                    (${CONFWIZARD} -lifecycle restart);
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                x|X)
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

doConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure the SecureSpan Gateway application"
            echo "What would you like to do?"
            echo ""
            echo " 1) Upgrade the SecureSpan Gateway database"
            echo " 2) Create a new SecureSpan Gateway database"
            echo " 3) Configure the SecureSpan Gateway"
            echo " 4) Change the SecureSpan Gateway cluster passphrase"
            echo " 5) Delete the SecureSpan Gateway"
            echo " 6) Display the current SecureSpan Gateway configuration"
            echo " 7) Manage SecureSpan Gateway status"
            echo " X) Exit menu"

            echo ""
            echo -n "Please make a selection: "
            read choice

            case $choice in
                    1)
                        clear;
                        (${CONFWIZARD} -databaseUgrade);
                        confirmedMessage ""
                        clear;;
                    2)
                        clear;
                        (${CONFWIZARD} wizard appliance-full);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    3)
                        clear;
                        (${CONFWIZARD});
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    4)
                        clear;
                        (${CONFWIZARD} -changeClusterPassphrase);
                        confirmedMessage ""
                        clear;;
                    5)
                        clear;
                        (${CONFWIZARD} wizard appliance-delete);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    6)
                        clear;
                        (${CONFWIZARD} show);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    7)
                        clear;
                        (${CONFWIZARD} show status);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in status service."
                        elif [ $STATUS -eq 21 ] || [ $STATUS -eq 22 ] ; then
                            doNodeLifecycle $STATUS
                        fi
                        clear;;
                    x|X)
                        clear;
                        isMenuValid="y";
                        clear;;
                    *)
                        clear;
                        confirmedMessage "That is not a valid selection";
                        clear;;
            esac
    done
    isMenuValid="n"
}

doEmsConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Enterprise Service Manager"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure the Enterprise Service Manager"
        /sbin/chkconfig ssem && true # && true due to set -e
        if [ ${?} -eq 0 ] ; then
            echo " 2) Disable the Enterprise Service Manager"
        else
            echo " 2) Enable the Enterprise Service Manager"
        fi
        echo " 3) Reset password for ESM user account"
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
            1)
                clear;
                (${EMCONFWIZARD});
                confirmedMessage ""
                clear;;
            2)
                clear;
                if [ ! -f "/opt/SecureSpan/EnterpriseManager/var/emconfig.properties" ] ; then
                    confirmedMessage "Please configure the Enterprise Service Manager and try again."                
                else
                    /sbin/chkconfig ssem && true # && true due to set -e
                    if [ ${?} -eq 0 ] ; then
                        echo "Disabing the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem off
                        confirmedMessage "Enterprise Service Manager disabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -eq 0 ] ; then
                            if confirmAction "Do you want to stop the Enterprise Service Manager?" ; then
                                echo "Stopping Enterprise Service Manager."
                                sudo /sbin/service ssem stop
                                confirmedMessage "Enterprise Service Manager stopped."
                            fi
                        fi
                    else
                        echo "Enabling the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem on
                        confirmedMessage "Enterprise Service Manager enabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -ne 0 ] ; then
                            if confirmAction "Do you want to start the Enterprise Service Manager?" ; then
                                echo "Starting Enterprise Service Manager."
                                sudo /sbin/service ssem start
                                confirmedMessage "Enterprise Service Manager started."
                            fi
                        fi
                    fi
                fi
                clear;;
            3)
                clear;
                sudo /sbin/service ssem status &>/dev/null && true # && true due to set -e
                if [ ${?} -eq 0 ] ; then
                    confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is not running."
                else
                    (${EMCONFWIZARD} wizard reset);
                    STATUS=$?
                    if [ $STATUS -eq 3 ] ; then
                        confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is configured and is not running."
                    else
                        confirmedMessage ""
                    fi
                fi
                clear;;
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                clear;
                confirmedMessage "That is not a valid selection";
                clear;;
        esac
    done
    isMenuValid="n"
}

doInitializeHsm() {
    echo "Initializing the HSM will irreversibly delete ALL data"
    echo "from the hardware keystore."
    echo ""
    echo "You may import an existing master key to this HSM or create a new one"
    echo ""
    echo "What would like to do?"
    echo "1) Create a new master key"
    echo "2) Restore an existing master key"
    echo -n "Please make a selection: "
    read choice
    case $choice in
        1)
            clear;
            confirmedMessage "This will initialize the HSM"
            (${HSMCONFIG} -initializeHsm);;
        2)
            clear;
            doHsmMasterKeyRestore;;
        x|X)
            clear;
            echo "The HSM will not be initialized";;
        *)
            echo "$choice is not a valid selection";;
    esac
    confirmedMessage ""
}

doHsmMasterKeyRestore() {
    confirmedMessage "This will restore the master key (and reinitialize) the HSM"
    (${HSMCONFIG} -restoreMasterKey)
}

checkHsmStatus() {
    (${HSMCONFIG} -checkHsmStatus)
    STATUS_OF_HSM=$?
}

doEnableDisableHsm() {
    checkHsmStatus
    if [ ${STATUS_OF_HSM} -eq 0 ] ; then
        #it's enabled
        echo "The HSM is currently enabled"
        confirmedMessage "This will Disable the HSM"
        (${HSMCONFIG} -disableHsm);
    elif [ ${STATUS_OF_HSM} -eq 1 ] ; then
        #it's disabled
        echo "The HSM is currently disabled"
        confirmedMessage "This will Enable the HSM"
        (${HSMCONFIG} -enableHsm);
    else
        echo "Cannot check the status of the HSM"
    fi
    confirmedMessage ""
}

doHsmMasterKeyBackup() {
    confirmedMessage "This will back up the Master Key to USB flash drive"
    echo "Checking for USB drive"
    ${CHECK_USB_KEY};
    if [ ${?} != 0 ] ; then
        echo ""
        confirmedMessage "The USB drive could not be found. Please attach the USB drive and try again."
    else
        echo "Found the USB drive. Continuing..."
        echo -n "Enter the keystore password:"
        read -s ksPassword;
        echo ""
        echo -n "Enter the master key backup password:"
        read -s masterKeyBackupPassword;
        echo ""
        (sudo ${MASTERKEYMANAGE} backup ${ksPassword} ${MASTER_KEY_BACKUP_FILE_NAME} ${masterKeyBackupPassword});
        if [ ${?} != 0 ] ; then
            echo ""
            confirmedMessage "The master key backup did not succeed. See the error message above for details."
        else
            echo ""
            confirmedMessage "The master key backup was successfull."
        fi
    fi
}

doHsmConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Hardware Security Module"
        echo "on the SecureSpan Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) Initialize the HSM"
        echo " 2) Enable/Disable HSM"
        echo " 3) Back up the HSM Master Key to a USB flash drive"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    doInitializeHsm
                    clear;;
                2)
                    clear;
                    doEnableDisableHsm
                    clear;;
                3)
                    clear;
                    doHsmMasterKeyBackup
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
}


checkForSca
checkForEm
isValid="n"
while [ "$isValid" != "y" ]
do
    clear
        echo "Welcome to the SecureSpan Gateway"
        echo
        echo "This user account allows you to configure the appliance"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure networking"
        echo " 2) Display SecureSpan Gateway configuration menu"
        echo " 3) Use a privileged shell (root)"
        echo " 4) Change the Master Passphrase"
        echo " 5) Display Remote Management configuration menu"
        if [ "${SCA_PRESENT}" == "true" ] ; then
            echo " 6) Manage HSM"
        fi

        if [ "${EM_PRESENT}" == "true" ] ; then
            echo " 7) Display Enterprise Service Manager configuration menu"
        fi
        echo " R) Reboot the SSG appliance (apply the new configuration)"
        echo " X) Exit (no reboot)"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1) 	clear;
                    doNetworkConfiguration
                    clear;;
                2)  clear;
                    doConfiguration
                    clear;;
                3)  clear;
                    (${GETROOT});
                    clear;;
                4)  clear;
                    (${CONFWIZARD} -changeMasterPassphrase);
                    confirmedMessage ""
                    clear;;
                5)  clear;
                    (${CONFWIZARD} -processController);
                    confirmedMessage ""
                    clear;;
                x|X)  doLogout;;
                r|R)  echo -n "Are you sure you want to reboot the SecureSpan Gateway? [y/n]: "
                    read okToReboot
                    if [ "$okToReboot" == "y" ] || [ "$okToReboot" == "yes" ] ; then
                        sudo /sbin/reboot
                    fi
                    clear;;
                *)  if [ "$choice" == "6" ] && [ "${SCA_PRESENT}" == "true" ]; then
                        clear;
                        doHsmConfiguration
                        clear;
                    elif [ "$choice" == "7" ] && [ "${EM_PRESENT}" == "true" ]; then
                        clear;
                        doEmsConfiguration
                        clear;
                    else
                        isValid="n";
                        confirmedMessage "That is not a valid selection";
                    fi;;
        esac
done
