
set -u
set -e

trap doLogout INT

SYSWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/config/systemconfig.sh"
CONFWIZARD="sudo -u layer7 /opt/SecureSpan/Appliance/libexec/ssgconfig_launch"
HSMCONFIG="sudo -u layer7 /opt/SecureSpan/Appliance/config/scahsmconfig.sh"
EMCONFWIZARD="sudo -u layer7 /opt/SecureSpan/EnterpriseManager/config/emconfig.sh"
MASTERKEYMANAGE="/opt/SecureSpan/Appliance/libexec/masterkey-manage.pl"
CHECK_USB_KEY="sudo -u layer7 ${MASTERKEYMANAGE} probe &> /dev/null"
PATCHTOOL="/opt/SecureSpan/Controller/bin/patch.sh"

GETROOT="su -"
MASTER_KEY_BACKUP_FILE_NAME="ssg_mkey.bak"

checkForSca() {
    SCADIAG="/opt/sun/sca6000/sbin/scadiag"
    if [ -s "${SCADIAG}" ] ; then
        SCA_PRESENT="true"
    else
        SCA_PRESENT=""
    fi
}

checkForEm() {
    EM_PRESENT=""
    EM_ENABLED=""
    if [ -d "/opt/SecureSpan/EnterpriseManager" ] ; then
        EM_PRESENT="true"
    fi
}

checkForPatcher() {
    PATCHER_PRESENT=""
    if [ -e "/opt/SecureSpan/Controller/bin/patch.sh" ] ; then
        PATCHER_PRESENT="true"
    fi
}

doLogout() {
    clear
    exit
}

confirmedMessage() {
    echo -e "${1}"
    echo "Press [Enter] to continue";
    read;
}

confirmAction() {
    confirmed=2
    echo -n "${1} [y/n]: "

    while [ "${confirmed}" -eq 2 ]
    do
        read choice
        choice=$(echo "${choice}" | tr "[:upper:]" "[:lower:]")

        case $choice in
            "y")     confirmed=0;;
            "yes")   confirmed=0;;
            "t")     confirmed=0;;
            "true")  confirmed=0;;
            "n")     confirmed=1;;
            "no")    confirmed=1;;
            "f")     confirmed=1;;
            "false") confirmed=1;;
            *) echo -n "That is not a valid choice [y/n]: ";;
        esac
    done

    return ${confirmed}
}

doNetworkConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure networking on this appliance"
            echo "What would you like to do?"
            echo ""
            echo " 1) Configure networking"
            echo " 2) Display current network configuration"
            echo " X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                1) clear
                   (${SYSWIZARD})
                   clear;;
                2) clear
                   (${SYSWIZARD} -printConfig)
                   confirmedMessage ""
                   clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
            esac
    done
    isMenuValid="n"
}

doNodeLifecycle() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "SecureSpan Gateway status options:"
        echo ""
        if [ ${1} -eq 22 ] ; then
            echo " 1) Start the SecureSpan Gateway"
        else
            echo " 1) Stop the SecureSpan Gateway"
            echo " 2) Restart the SecureSpan Gateway"
        fi
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    if [ ${1} -eq 22 ] ; then
                        (${CONFWIZARD} -lifecycle start);
                    else
                        (${CONFWIZARD} -lifecycle stop);
                    fi
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                2)
                    clear;
                    (${CONFWIZARD} -lifecycle restart);
                    confirmedMessage ""
                    isMenuValid="y";
                    clear;;
                x|X)
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
    isMenuValid="n"
}

doConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
            echo "This menu allows you to configure the SecureSpan Gateway application"
            echo "What would you like to do?"
            echo ""
            echo " 1) Upgrade the SecureSpan Gateway database"
            echo " 2) Create a new SecureSpan Gateway database"
            echo " 3) Configure the SecureSpan Gateway"
            echo " 4) Change the SecureSpan Gateway cluster passphrase"
            echo " 5) Delete the SecureSpan Gateway"
            echo " 6) Display the current SecureSpan Gateway configuration"
            echo " 7) Manage SecureSpan Gateway status"
            echo " X) Exit menu"

            echo ""
            echo -n "Please make a selection: "
            read choice

            case $choice in
                    1)
                        clear;
                        (${CONFWIZARD} -databaseUgrade);
                        confirmedMessage ""
                        clear;;
                    2)
                        clear;
                        (${CONFWIZARD} wizard appliance-full);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    3)
                        clear;
                        (${CONFWIZARD});
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is already configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    4)
                        clear;
                        (${CONFWIZARD} -changeClusterPassphrase);
                        confirmedMessage ""
                        clear;;
                    5)
                        clear;
                        (${CONFWIZARD} wizard appliance-delete);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        else
                          confirmedMessage ""
                        fi
                        clear;;
                    6)
                        clear;
                        (${CONFWIZARD} show);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in configuration service."
                        elif [ $STATUS -ne 0 ] ; then
                          confirmedMessage ""
                        fi
                        clear;;
                    7)
                        clear;
                        (${CONFWIZARD} show status);
                        STATUS=$?
                        if [ $STATUS -eq 2 ] ; then
                          confirmedMessage "Node is not yet configured."
                        elif [ $STATUS -eq 3 ] ; then
                          confirmedMessage "Configuration service not available (please reboot)"
                        elif [ $STATUS -eq 5 ] ; then
                          confirmedMessage "Unexpected error in status service."
                        elif [ $STATUS -eq 21 ] || [ $STATUS -eq 22 ] ; then
                            doNodeLifecycle $STATUS
                        fi
                        clear;;
                    x|X)
                        clear;
                        isMenuValid="y";
                        clear;;
                    *)
                        clear;
                        confirmedMessage "That is not a valid selection";
                        clear;;
            esac
    done
    isMenuValid="n"
}

doEmsConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Enterprise Service Manager"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure the Enterprise Service Manager"
        /sbin/chkconfig ssem && true # && true due to set -e
        if [ ${?} -eq 0 ] ; then
            echo " 2) Disable the Enterprise Service Manager"
        else
            echo " 2) Enable the Enterprise Service Manager"
        fi
        echo " 3) Reset password for ESM user account"
        echo " X) Exit menu"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
            1)
                clear;
                (${EMCONFWIZARD});
                confirmedMessage ""
                clear;;
            2)
                clear;
                if [ ! -f "/opt/SecureSpan/EnterpriseManager/var/emconfig.properties" ] ; then
                    confirmedMessage "Please configure the Enterprise Service Manager and try again."                
                else
                    /sbin/chkconfig ssem && true # && true due to set -e
                    if [ ${?} -eq 0 ] ; then
                        echo "Disabing the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem off
                        confirmedMessage "Enterprise Service Manager disabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -eq 0 ] ; then
                            if confirmAction "Do you want to stop the Enterprise Service Manager?" ; then
                                echo "Stopping Enterprise Service Manager."
                                sudo /sbin/service ssem stop
                                confirmedMessage "Enterprise Service Manager stopped."
                            fi
                        fi
                    else
                        echo "Enabling the Enterprise Service Manager."
                        sudo /sbin/chkconfig ssem on
                        confirmedMessage "Enterprise Service Manager enabled."

                        sudo /sbin/service ssem status &>/dev/null && true
                        if [ ${?} -ne 0 ] ; then
                            if confirmAction "Do you want to start the Enterprise Service Manager?" ; then
                                echo "Starting Enterprise Service Manager."
                                sudo /sbin/service ssem start
                                confirmedMessage "Enterprise Service Manager started."
                            fi
                        fi
                    fi
                fi
                clear;;
            3)
                clear;
                sudo /sbin/service ssem status &>/dev/null && true # && true due to set -e
                if [ ${?} -eq 0 ] ; then
                    confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is not running."
                else
                    (${EMCONFWIZARD} wizard reset);
                    STATUS=$?
                    if [ $STATUS -eq 3 ] ; then
                        confirmedMessage "Enterprise Service Manager configuration cannot be performed.\nPlease ensure that the ESM is configured and is not running."
                    else
                        confirmedMessage ""
                    fi
                fi
                clear;;
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                clear;
                confirmedMessage "That is not a valid selection";
                clear;;
        esac
    done
    isMenuValid="n"
}

doInitializeHsm() {
    echo "Initializing the HSM will irreversibly delete ALL data"
    echo "from the hardware keystore."
    echo ""
    echo "You may import an existing master key to this HSM or create a new one"
    echo ""
    echo "What would like to do?"
    echo "1) Create a new master key"
    echo "2) Restore an existing master key"
    echo -n "Please make a selection: "
    read choice
    case $choice in
        1)
            clear;
            confirmedMessage "This will stop the Gateway (if it is running) and then initialize the HSM"
            (${CONFWIZARD} -lifecycle ensureStopped);
            STOPRESULT=$?
            if [ ${STOPRESULT} -eq 0 ]; then
                (${HSMCONFIG} -initializeHsm)
            else
                printf "Unable to confirm that the Gateway is stopped (code=${STOPRESULT}).\nPlease reboot and try again."
            fi;;
        2)
            clear;
            confirmedMessage "This will stop the Gateway (if it is running),\nthen restore the master key (and reinitialize) the HSM"
            (${CONFWIZARD} -lifecycle ensureStopped);
            STOPRESULT=$?
            if [ ${STOPRESULT} -eq 0 ]; then
                (${HSMCONFIG} -restoreMasterKey)
            else
                printf "Unable to confirm that the Gateway is stopped (code=${STOPRESULT}).\nPlease reboot and try again."
            fi;;
        x|X)
            clear;
            echo "The HSM will not be initialized";;
        *)
            echo "$choice is not a valid selection";;
    esac
    confirmedMessage ""
}

checkHsmStatus() {
    (${HSMCONFIG} -checkHsmStatus)
    STATUS_OF_HSM=$?
}

doEnableDisableHsm() {
    checkHsmStatus
    if [ ${STATUS_OF_HSM} -eq 0 ] ; then
        #it's enabled
        echo "The HSM is currently enabled"
        confirmedMessage "This will Disable the HSM"
        (${HSMCONFIG} -disableHsm);
    elif [ ${STATUS_OF_HSM} -eq 1 ] ; then
        #it's disabled
        echo "The HSM is currently disabled"
        confirmedMessage "This will Enable the HSM"
        (${HSMCONFIG} -enableHsm);
    else
        echo "Cannot check the status of the HSM"
    fi
    confirmedMessage ""
}

doHsmMasterKeyBackup() {
    confirmedMessage "This will back up the Master Key to USB flash drive"
    echo "Checking for USB drive"
    ${CHECK_USB_KEY};
    if [ ${?} != 0 ] ; then
        echo ""
        confirmedMessage "The USB drive could not be found. Please attach the USB drive and try again."
    else
        echo "Found the USB drive. Continuing..."
        echo -n "Enter the keystore password:"
        read -s ksPassword;
        echo ""
        echo -n "Enter the master key backup password:"
        read -s masterKeyBackupPassword;
        echo ""
        (sudo ${MASTERKEYMANAGE} backup ${ksPassword} ${MASTER_KEY_BACKUP_FILE_NAME} ${masterKeyBackupPassword});
        if [ ${?} != 0 ] ; then
            echo ""
            confirmedMessage "The master key backup did not succeed. See the error message above for details."
        else
            echo ""
            confirmedMessage "The master key backup was successful."
        fi
    fi
}

doHsmConfiguration() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to configure the Hardware Security Module"
        echo "on the SecureSpan Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) Initialize the HSM"
        echo " 2) Enable/Disable HSM"
        echo " 3) Back up the HSM Master Key to a USB flash drive"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    doInitializeHsm
                    clear;;
                2)
                    clear;
                    doEnableDisableHsm
                    clear;;
                3)
                    clear;
                    doHsmMasterKeyBackup
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
}

doPatchManagementMenu() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do
        clear
        echo "This menu allows you to manage SecureSpan patches on the"
        echo "SecureSpan Gateway Appliance"
        echo ""
        echo "What would you like to do?"
        echo ""
        echo " 1) Register/Upload and verify a new patch"
        echo " 2) Install a registered and verified patch"
        echo " 3) Unregister a patch"
        echo " 4) List all registered patches and their status"
        echo " X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1)
                    clear;
                    doPatchUpload
                    clear;;
                2)
                    clear;
                    doPatchInstall
                    clear;;
                3)
                    clear;
                    doPatchDelete
                    clear;;
                4)
                    clear;
                    doPatchList
                    clear;;
                x|X)
                    clear;
                    isMenuValid="y";
                    clear;;
                *)
                    clear;
                    confirmedMessage "That is not a valid selection";
                    clear;;
        esac
    done
}

registerPatch() {
    whichone=$1
    if [ -e $whichone ] ; then
        echo "You have chosen to register the patch named "
        confirmedMessage "\"$whichone\""
        echo ""
        echo "Please wait while the patch is registered ..."
        ($PATCHTOOL upload $whichone)
        ERR=$?
        if [ $ERR -ne 0 ] ; then
            echo ""
            confirmedMessage "There was an error while registering the patch"
            return $ERR
        else
            echo ""
            confirmedMessage "The patch was registered successfully."
            return 0
        fi
    else
        confirmedMessage "Patch file not found: $whichone"
        return $?
    fi
}

installPatch() {
    patchinfo=$1
    echo ""
    echo "You have chosen to install the following patch"
    confirmedMessage "\" $patchinfo\""
    echo "Please wait while the patch is installed ..."
    ($PATCHTOOL install $patchinfo)
    ERR=$?
    if [ $ERR -ne 0 ] ; then
        echo ""
        confirmedMessage "There was an error while installing the patch"
        return $ERR
    else
        echo ""
        confirmedMessage "The patch was installed successfully."
        return 0
    fi
}

deletePatch() {
    patchinfo=$1
    echo ""
    echo "You have chosen to unregister the following patch"
    confirmedMessage "\" $patchinfo\""
    echo "Please wait while the patch is unregistered ..."
    ($PATCHTOOL delete $patchinfo)
    ERR=$?
    if [ $ERR -ne 0 ] ; then
        echo ""
        confirmedMessage "There was an error while unregistering the patch"
        return $ERR
    else
        echo ""
        confirmedMessage "The patch was successfully unregistered."
        return 0
    fi
}

doPatchUpload() {
    isMenuValid="n"
    while [ "$isMenuValid" != "y" ]
    do

        DROPBOXPATCHES=(`find $HOME -iname "*.L7P"`)
        LEN=${#DROPBOXPATCHES[*]}

        echo ""
        if [ $LEN -eq 0 ] ; then

            echo "No patches were found in the ssgconfig directory."
            echo ""
            echo "You can still specify the full path to a patch file"
            echo "using the \"S\" option below."
            echo ""
            echo "NOTE: patches supplied by Layer 7 have an L7P extension."
        else
            echo "Specify the patch you would like to register from the following list."
            echo ""
            echo "You can also specify the full path to a patch file."
            echo "using the \"S\" option below."
            echo ""
            echo "NOTE: patches supplied by Layer 7 have an L7P extension."
        fi

        echo ""

        for (( i = 0 ; i < $LEN ; i++))
        do
            index=$[$i+1]
            patchname=${DROPBOXPATCHES[$i]}
            echo "$index) `basename $patchname`"
        done

        echo "S) Specify a patch not listed here"
        echo "X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice
        case $choice in
            s|S)
                echo -n "Please enter the path to the patch you wish to register: "
                read whichone
                registerPatch "$whichone"
                echo ""
                clear;;
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                if ! [[ "$choice" =~ ^[0-9]+$ ]] ; then
                    isValid="n";
                    confirmedMessage "That is not a valid selection";
                else
                    realindex=$[$choice-1]
                    if [ $realindex -ge 0 ] && [ $realindex -lt $LEN ] ; then
                        clear
                        whichone=${DROPBOXPATCHES[$realindex]}
                        registerPatch "$whichone"
                    else
                        confirmedMessage "That is not a valid selection";
                    fi
                fi
                clear;;
        esac
    done
}

doPatchInstall() {
    isValid="n"
    shouldReload="y"

    declare -a REGISTEREDPATCHES
    while [ "$isValid" != "y" ]
    do
        if [ "$shouldReload" == "y" ] ; then
            echo "Please wait while the list of available patches is retrieved..."
            old=$IFS
IFS='
'
            REGISTEREDPATCHES=(`$PATCHTOOL list | egrep "UPLOADED|ROLLED_BACK" || true`)
            IFS=$old
            LEN=${#REGISTEREDPATCHES[*]}
        fi

        if [ $LEN -eq 0 ] ; then
            echo ""
            echo "No patches are available for installation."
            echo ""
            echo "Please use the patch management menu to register and verify a"
            echo "patch before it can be installed."
            confirmedMessage ""
            isValid="y"
        else
            echo ""
            echo "The following patches are available for installation. "
            echo "Please make your selection via line number."
            echo ""

            declare -a patch_ids
            for (( i = 0 ; i < $LEN ; i++))
            do
                index=$[$i+1]
                patchinfo=${REGISTEREDPATCHES[$i]}
                patchid=`echo $patchinfo | awk -F'(' '{print $1}' | sed 's/Patch ID \(.*\)/\1/'`
                patchdesc=`echo $patchinfo | awk -F'(' '{print $2}' | awk -F')' '{print $1}'`
                patch_ids[$i]=$patchid
                echo "$index) ID: $patchid"
                echo "   DESCRIPTION: $patchdesc"
            done
            echo "X) Exit menu"
            echo ""
            echo -n "Please make a selection: "
            read choice
            case $choice in
                x|X)
                    isValid="y";
                    clear;;
                *)
                    shouldReload="n"
                    if ! [[ "$choice" =~ ^[0-9]+$ ]] ; then
                        isValid="n";
                        confirmedMessage "That is not a valid selection";
                    else
                        patch_ids_len=${#patch_ids[*]}
                        realindex=$[$choice-1]
                        if [ $realindex -ge 0 ] && [ $realindex -lt $patch_ids_len ] ; then
                            clear
                            whichone=${patch_ids[$realindex]}
                            installPatch "$whichone"
                            shouldReload="y"
                        else
                            isValid="n";
                            confirmedMessage "That is not a valid selection";
                        fi
                    fi
                    clear;;
            esac
        fi
    done
}

doPatchDelete() {
    echo "Please wait while the list of available patches is retrieved..."
    old=$IFS
IFS='
'
    REGISTEREDPATCHES=(`$PATCHTOOL list | egrep "UPLOADED|ROLLED_BACK" || true`)
    IFS=$old
    LEN=${#REGISTEREDPATCHES[*]}
    if [ $LEN -eq 0 ] ; then
        echo ""
        echo "There are no patches that can be unregistered."
        echo ""
        echo "Only patches that are currently uploaded but not yet"
        echo "installed can be unregistered."
        confirmedMessage ""
    else
        declare -a patch_ids
        for (( i = 0 ; i < $LEN ; i++))
        do
            index=$[$i+1]
            patchinfo=${REGISTEREDPATCHES[$i]}
            patchid=`echo $patchinfo | awk -F'(' '{print $1}' | sed 's/Patch ID \(.*\)/\1/'`
            patchdesc=`echo $patchinfo | awk -F'(' '{print $2}' | awk -F')' '{print $1}'`
            patch_ids[$i]=$patchid
            echo "$index) ID: $patchid"
            echo "   DESCRIPTION: $patchdesc"
        done
        echo "X) Exit menu"
        echo ""
        echo -n "Please make a selection: "
        read choice
        case $choice in
            x|X)
                clear;
                isMenuValid="y";
                clear;;
            *)
                realindex=$[$choice-1]
                patch_ids_len=${#patch_ids[*]}
                if [ $realindex -ge 0 ] && [ $realindex -lt $patch_ids_len ] ; then
                    whichone=${patch_ids[$realindex]}
                    deletePatch "$whichone"
                else
                    confirmedMessage "That is not a valid selection";
                fi
                clear;;
        esac
    fi
}

doPatchList() {
    echo "Please wait while the list of patches is retrieved ..."
    old=$IFS
IFS='
'
    REGISTEREDPATCHES=(`$PATCHTOOL list`)
    IFS=$old
    LEN=${#REGISTEREDPATCHES[*]}
    for (( i = 0 ; i < $LEN ; i++))
    do
        patchinfo=${REGISTEREDPATCHES[$i]}
        index=$[$i+1]
        echo "$index) $patchinfo"
        echo ""
    done
    confirmedMessage ""
}

checkForSca
checkForEm
checkForPatcher
isValid="n"
while [ "$isValid" != "y" ]
do
    clear
        echo "Welcome to the SecureSpan Gateway"
        echo
        echo "This user account allows you to configure the appliance"
        echo "What would you like to do?"
        echo ""
        echo " 1) Configure networking"
        echo " 2) Display SecureSpan Gateway configuration menu"
        echo " 3) Use a privileged shell (root)"
        echo " 4) Change the Master Passphrase"
        echo " 5) Display Remote Management configuration menu"
        if [ "${SCA_PRESENT}" == "true" ] ; then
            echo " 6) Manage HSM"
        fi

        if [ "${EM_PRESENT}" == "true" ] ; then
            echo " 7) Display Enterprise Service Manager configuration menu"
        fi
        if [ "${PATCHER_PRESENT}" == "true" ] ; then
            echo " 8) Display Patch Management menu"
        fi

        echo " R) Reboot the SSG appliance (apply the new configuration)"
        echo " X) Exit (no reboot)"

        echo ""
        echo -n "Please make a selection: "
        read choice

        case $choice in
                1) 	clear;
                    doNetworkConfiguration
                    clear;;
                2)  clear;
                    doConfiguration
                    clear;;
                3)  clear;
                    (${GETROOT});
                    clear;;
                4)  clear;
                    (${CONFWIZARD} -changeMasterPassphrase);
                    confirmedMessage ""
                    clear;;
                5)  clear;
                    (${CONFWIZARD} -processController);
                    confirmedMessage ""
                    clear;;
                x|X)  doLogout;;
                r|R)  echo -n "Are you sure you want to reboot the SecureSpan Gateway? [y/n]: "
                    read okToReboot
                    if [ "$okToReboot" == "y" ] || [ "$okToReboot" == "yes" ] ; then
                        sudo /sbin/reboot
                    fi
                    clear;;
                *)  if [ "$choice" == "6" ] && [ "${SCA_PRESENT}" == "true" ]; then
                        clear;
                        doHsmConfiguration
                        clear;
                    elif [ "$choice" == "7" ] && [ "${EM_PRESENT}" == "true" ]; then
                        clear;
                        doEmsConfiguration
                        clear;
                    elif [ "$choice" == "8" ] && [ "${PATCHER_PRESENT}" == "true" ]; then
                        clear;
                        doPatchManagementMenu
                        clear;
                    else
                        isValid="n";
                        confirmedMessage "That is not a valid selection";
                    fi;;
        esac
done
