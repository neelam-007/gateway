#!/bin/bash
#
# Startup script for the SecureSpan Gateway Server
#
# chkconfig: - 99 01
# description: Layer 7 SecureSpan Gateway Daemon \
#	       secures and provides access for SOAP services
# processname: ssg

# Source function library.
. /etc/rc.d/init.d/functions
. /ssg/etc/profile
ORIGINAL_JAVA_OPTS="${JAVA_OPTS}"

prog="SSG"
tries=2
count=0

USER=$(whoami)
export LOGNAME=$USER
PARTITION_BASE="/ssg/etc/conf/partitions/"
PARTITION_CONTROL="/ssg/bin/partitionControl.sh"
SINGLE_PARTITION=""

# See how we were called.
if [ $USER != "root" ] ; then
    echo "Need to be root to run this script";
    exit
fi

# This script redirects STDOUT and STDERR to /dev/null as well as closing STDIN (<&-) so it can be detached from a
# terminal

start() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        start_ssg ${SINGLE_PARTITION}
    else
        RETVAL=1
        STOPPED_PARTITIONS=""
        for partition_dir in ${ALL_PARTITIONS}
        do
            status_ssg ${partition_dir} &>/dev/null
            if [ ${?} -eq 1 ] ; then
                STOPPED_PARTITIONS="${STOPPED_PARTITIONS} ${partition_dir}" 
            fi
        done

        if [ -z "${STOPPED_PARTITIONS}" ] ; then
            echo "All partitions are active."
        else
            for partition_dir in ${STOPPED_PARTITIONS}
            do
                start_ssg ${partition_dir}
            done
        fi

        echo -n $"$prog services started: "
        [ $RETVAL -eq 0 ] && success || failure
        echo

        return $RETVAL
    fi
}

stop() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        stop_ssg ${SINGLE_PARTITION}
    else
        RETVAL=1
        find_tomcat;
        if [ -z "$pid" ] ; then
            echo "No SSG Partitions are Currently Running"
        else
            for partition_dir in $ALL_PARTITIONS
            do
                touch /ssg/etc/conf/partitions/${partition_dir}/SHUTDOWN.NOW
                if [ "$UID" = "0" ]; then
                    chown gateway:gateway /ssg/etc/conf/partitions/${partition_dir}/SHUTDOWN.NOW
                fi
            done

            for partition_dir in $ALL_PARTITIONS
            do
                stop_ssg ${partition_dir}
            done
        fi

        echo -n $"$prog services stopped: "
        [ $RETVAL -eq 0 ] && success || failure
        echo
    fi
    return $RETVAL
}

status() {
    find_single_partition "$1"
    if [ -n "${SINGLE_PARTITION}" ] ; then
        status_ssg ${SINGLE_PARTITION}
    else
        for partition_dir in ${ALL_PARTITIONS}
        do
            status_ssg ${partition_dir}
        done
    fi
}

execute_stop_command() {
    ssg_command=$1
    which_partition=$2

    if [ "$LOG_REDIRECTION_OPERATOR" = "|" -a -n "$LOG_REDIRECTION_DEST" ]; then
        (sh "${PARTITION_CONTROL}" "$ssg_command" "${which_partition}" | `${LOG_REDIRECTION_DEST/<PARTITION_NAME>/$which_partition}` &> /dev/null)
    else
        if [ "$LOG_REDIRECTION_OPERATOR" = ">" -a -n "$LOG_REDIRECTION_DEST" ]; then
            output_file="${LOG_REDIRECTION_DEST/<PARTITION_NAME>/$which_partition}"
        else
            output_file="/dev/null"
        fi
        (sh "${PARTITION_CONTROL}" "$ssg_command" "${which_partition}" &> "$output_file")
    fi

    return $?
}

stop_ssg() {
    which_partition="${1}"
    if [ "${2}" != "silent" ] ; then
        echo -n $"Stopping $prog $(basename "${which_partition}"): "
    fi
    execute_stop_command "stop" "$which_partition"
    RETVAL=$?

    if [ ! ${RETVAL} -eq 0 ] ; then
        sleep 5;
        execute_stop_command "status" "$which_partition"
        RET=${?}
        while [ ${RET} -eq 0 ]
        do
            count=$((count + 1))
            if [ "$count" -ge "$tries" ] ; then
                execute_stop_command "forcestop" "$which_partition"
                # sleep ensures TCP cleanup if process was killed
                RET=${?}
                sleep 5;
            else
                execute_stop_command "status" "$which_partition"
                RET=${?}
            fi
        done
        RETVAL=0
    fi

    if [ "${2}" != "silent" ] ; then
        [ $RETVAL -eq 0 ] && success || failure
        echo
    fi
}

start_ssg() {
    which_partition=$1
    echo -n $"Starting $prog $(basename "${which_partition}"): "

    if [ "$LOG_REDIRECTION_OPERATOR" = "|" -a -n "$LOG_REDIRECTION_DEST" ]; then
        (sh "${PARTITION_CONTROL}" "start" "${which_partition}" | `${LOG_REDIRECTION_DEST/<PARTITION_NAME>/$which_partition}` &> /dev/null)
    else
        if [ "$LOG_REDIRECTION_OPERATOR" = ">" -a -n "$LOG_REDIRECTION_DEST" ]; then
            output_file="${LOG_REDIRECTION_DEST/<PARTITION_NAME>/$which_partition}"
        else
            output_file="/dev/null"
        fi
        (sh "${PARTITION_CONTROL}" "start" "${which_partition}" &> "$output_file")
    fi
    RETVAL=$?
    [ $RETVAL -eq 0 ] && success || failure
    echo
}

status_ssg() {
    which_partition="${1}"
    (sh "${PARTITION_CONTROL}" "status" "${which_partition}")
    return $?
}


find_tomcat() {
    pid=$(pidof "${SSG_JAVA_HOME}/bin/java")
}

find_single_partition() {
    if [ -n "${1}" ] ; then
        SINGLE_PARTITION=${1}
        if [ ! -d "$PARTITION_BASE/${SINGLE_PARTITION}" ] ; then
            echo "Could not find the partition named ${SINGLE_PARTITION}"
            exit 1;
        fi
    fi
}

case "$1" in
  start)
	start "$2"
	;;
  stop)
	stop  "$2"
	;;
  restart)
	stop "$2"
        sleep 5
	start "$2"
	;;
  status)
        status "$2"
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit $RETVAL
