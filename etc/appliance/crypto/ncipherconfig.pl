#!/usr/bin/perl -T

require 5.8.0;
use strict;
use warnings;

BEGIN {
    # Secure the PATH at compile time, before any libraries get included.  sudo is expected to have already sanitized the rest of the environment.
    $ENV{PATH} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin';

    # Clean env just in case sudo didn't do it
    delete @ENV{qw(IFS CDPATH ENV BASH_ENV PERLLIB PERL5LIB)};

    # Turn all warnings into fatal errors
    $SIG{__WARN__} = sub { die $_[0] };
};


# Include modules after the env has been secured
use English qw( -no_match_vars );
use User::pwent;
use User::grent;
use IO::File;

use constant KMDATA => '/opt/nfast/kmdata/local';
use constant NCIPHERDEFS => '/opt/SecureSpan/Gateway/runtime/etc/profile.d/ncipherdefs.sh';
use constant NCIPHERDEFS_CONTENTS => <<'EOM';
# Generated file; do not edit, as it may be deleted or regenerated by ncipherconfig
SSG_JAVA_OPTS="$SSG_JAVA_OPTS -Dcom.l7tech.common.security.jceProviderEngineName=ncipher ";
EOM

my @STOP_GATEWAY = qw(/opt/SecureSpan/Appliance/libexec/ssgconfig_launch -lifecycle stop); # already running as layer7 so no sudo
my @NOPCLEARFAIL = qw(/opt/nfast/bin/nopclearfail ca);
my @NEWWORLD = qw(/opt/nfast/bin/new-world -m 1 -s 0 -Q 2/3 -k rijndael);
my @PROGRAMWORLD = qw(/opt/nfast/bin/new-world --program --module=1);

sub stopGateway() {
    { local $/;  print "Stopping Gateway... "; }
    system(@STOP_GATEWAY) == 0
        or die "Failed to stop Gateway: $!\n";
    print "Done\n";
}

sub showMenu() {
    print <<'EOM';
This menu allows you to configure the nCipher Hardware Security Module
on the SecureSpan Gateway Appliance

What would you like to do?

 1) Manage Gateway nCipher HSM status
 2) Create new security world
 3) Program into existing security world
 X) Exit menu

EOM
}

sub checkUid() {
    die "This program must not be run as root.  Run as layer7 instead.\n"
        if $REAL_USER_ID == 0 || $EFFECTIVE_USER_ID == 0;

    my $user_layer7 = getpwnam('layer7')
        or die "There is no layer7 user on this system.\n";

    die "This program must be run as the layer7 user.\n"
        if $REAL_USER_ID != $user_layer7->uid;

    my $group_nfast = getgrnam('nfast')
        or die "There is no nfast group on this system.\n";

    die "The layer7 user must be a member of the nfast group.\n" 
        unless grep { $_ == $group_nfast->gid } split / /, $EFFECTIVE_GROUP_ID;

    die "The directory " . KMDATA . " must exist.\n"
        unless -d KMDATA;

    die "The directory " . KMDATA . " must be readable by the nfast group.\n"
        unless -x _ && -r _;

    die "The directory " . KMDATA . " must be writable by the nfast group.\n"
        unless -w _;
}

sub prompt() {
    print 'Please make a selection (X to exit): ';
    my $in = <STDIN>;
    chomp $in;
    $in;
}

sub pressEnter() {
    print "Press enter to continue: ";
    <STDIN>;
}

sub pressEnterOrCancel() {
    print "Press enter to continue, or X to cancel: ";
    my $in = <STDIN>;
    chomp $in;
    if ( uc($in) eq 'X' ) {
        return undef;
    } elsif ( $in eq '' ) {
        return 1;
    } else {
        print "Invalid selection.\n";
        return undef;
    }
}


sub createNewWorld() {
    stopGateway();
    print <<'EOM';

About to create a new security world.  Please ensure that:

* You have at least three blank cards for the card reader
* The card reader is connected to the nCipher HSM on the back of this Gateway appliance
* The module switch on the back of the HSM is in the "I" position (pre-initialization mode)

EOM

    if (pressEnterOrCancel()) {
        doCreateNewWorld();
    }
}


sub doCreateNewWorld() {
    # TODO ensure board is in pre-init mode, if possible
    # TODO check if there is any existing kmdata/local/world file and warn if so (delete it if warning ignored)
    # TODO check if node database already contains world data and warn if so (delete it if warning ignored)

    system(@NOPCLEARFAIL) == 0
        or die "Unable to reset board: $!\n";

    system(@NEWWORLD) == 0
        or die "new-world utility failed: $!\n";

    print <<'EOM';
Security world programmed successfully.

Please ensure that:

* The module switch on the back of the HSM is in the "O" position (operational mode)

It is now safe to disconnect the card reader.

Press enter to continue
EOM

    <STDIN>;

    system(@NOPCLEARFAIL) == 0
        or die "Unable to reset board: $!\n";

    manageHsmMenu();
}


sub programExistingWorld() {
    stopGateway();
    print <<'EOM';

About to program the module into an existing security world.  Please ensure that:

* You have at least two cards from the world's administrator cardset, along with their passphrases
* The card reader is connected to the nCipher HSM on the back of this Gateway appliance
* The module switch on the back of the HSM is in the "I" position (pre-initialization mode)

EOM

    if (pressEnterOrCancel()) {
        doProgramExistingWorld();
    }
}


sub doProgramExistingWorld() {
    # TODO copy existing world file from database to kmdata/local

    system(@NOPCLEARFAIL) == 0
        or die "Unable to reset board: $!\n";

    system(@PROGRAMWORLD) == 0
        or die "new-world utility failed: $!\n";

    system(@NOPCLEARFAIL) == 0
        or die "Unable to reset board: $!\n";

    print <<'EOM';
Security world created successfully.

Please ensure that:

* The module switch on the back of the HSM is in the "O" position (operational mode)

It is now safe to disconnect the card reader.

Press enter to continue
EOM

    <STDIN>;

    manageHsmMenu();
}


sub manageHsmMenu() {

    my $msg = -f NCIPHERDEFS
        ? "The Gateway is currently configured to use the nCipher HSM."
        : "The Gateway is currently NOT configured to use the nCipher HSM.";

    print "\n$msg\n";

    print <<'EOM';

What would you like to do?

 1) Enable Gateway use of the nCipher HSM
 2) Disable Gateway use of the nCipher HSM
 X) Exit menu

EOM

    my $input = prompt();
    if ( uc($input) eq 'X' ) {
        return;
    } elsif ( $input eq '1' ) {
        doEnableNcipher();
    } elsif ( $input eq '2' ) {
        doDisableNcipher();
    } else {
        print "Invalid selection.\n";
    }
    pressEnter();
}


sub doEnableNcipher() {
    if (-f NCIPHERDEFS) {
        print "\nThe Gateway is already configured to use the nCipher HSM.\n\n";
        return;
    }

    # TODO: Ensure nCipher is initialized, world is present on disk, and board is in operational mode

    stopGateway();
    unlink(NCIPHERDEFS);
    die "Unable to recreate " . NCIPHERDEFS . " as it already exists and cannot be deleted: $!\n"
        if (-e NCIPHERDEFS);
    my $fh = new IO::File();
    $fh->open(">" . NCIPHERDEFS) and do {
        print $fh NCIPHERDEFS_CONTENTS;
        undef $fh;
    };
    print "\nThe Gateway is now configured to use the nCipher HSM.\n\n";
}


sub doDisableNcipher() {
    if (!-f NCIPHERDEFS) {
        print "\nThe Gateway is not currently using the nCipher HSM.\n\n";
        return;
    }

    stopGateway();
    unlink(NCIPHERDEFS) == 1
        or die "Unable to delete " . NCIPHERDEFS . ": $!\n";
    print "\nThe Gateway is no longer configured to use the nCipher HSM.\n\n";
}


MAIN: {
    checkUid();

    my $badsleft = 30;
    my $quit = 0;

    # TODO add menu options for enabling or disabling the nCipher?
    showMenu();
    while (!$quit) {
        my $input = prompt();
        if ( $input eq '1' ) {
            manageHsmMenu();
            showMenu();
        } elsif ( $input eq '2' ) {
            createNewWorld();
            showMenu();
        } elsif ( $input eq '3' ) {
            programExistingWorld();
            showMenu();
        } elsif ( uc($input) eq 'X' ) {
            $quit = 1;
        } else {
            print "Invalid selection.\n";
            $badsleft--;
            die "Exiting.\n" if $badsleft < 1;
            showMenu() if $badsleft % 5 == 0;
        }
    }
}
