import java.io.File;
import com.sun.jini.start.ServiceDescriptor;
import com.l7tech.remote.jini.export.DefaultServiceDescriptor;
import com.l7tech.remote.jini.export.RemoteService;
import com.sun.jini.config.ConfigUtil;

/**
 * Server side service configurations that are started by the service starter
 *
 */
com.sun.jini.start {
   // change the hostName to the clients see this host
   hostName = System.getProperty("jini.server.hostname", ConfigUtil.getHostName());

   private static codebase = ConfigUtil.concat(new Object[] {"http://", hostName, ":8080/classserver/"});
   private static classpath = null;

    private static policy = "services.policy";

    // default configuration file name 
    private static config = RemoteService.DEFAULT_CONFIG;

    static reggieService =
        new DefaultServiceDescriptor(
	        codebase, policy, classpath,
	        "com.sun.jini.reggie.TransientRegistrarImpl",
	        config);

	static logService =
	        new DefaultServiceDescriptor(
	        codebase, policy, classpath,
	        "com.l7tech.logging.LogAdminImpl",
	        config);

    static identityService =
	        new DefaultServiceDescriptor(
	        codebase, policy, classpath,
	        "com.l7tech.server.identity.IdentityAdminImpl",
	        config);

	 static publishServicesService =
	        new DefaultServiceDescriptor(
	        codebase, policy, classpath,
	        "com.l7tech.server.service.ServiceAdminImpl",
	        config);

	 static clusterStatusService =
	        new DefaultServiceDescriptor(
	        codebase, policy, classpath,
	        "com.l7tech.cluster.ClusterStatusAdminImp",
	        config);

	static jmsService =
            new DefaultServiceDescriptor(
		    codebase, policy, classpath,
		    "com.l7tech.server.transport.jms.JmsAdminImpl",
		    config);

    static trustedCertService =
    	        new DefaultServiceDescriptor(
    	        codebase, policy, classpath,
    	        "com.l7tech.server.TrustedCertAdminImpl",
    	        config);

    static auditService =
    	        new DefaultServiceDescriptor(
    	        codebase, policy, classpath,
    	        "com.l7tech.server.audit.AuditAdminImpl",
    	        config);

	static customAssertionsService =
            new DefaultServiceDescriptor(
		    codebase, policy, classpath,
		    "com.l7tech.policy.assertion.ext.rmi.CustomAssertionsRegistrarImpl",
		    config);

    static serviceDescriptors =
        new ServiceDescriptor[] {
	        reggieService, logService, identityService, publishServicesService, clusterStatusService, jmsService, auditService, customAssertionsService, trustedCertService
	        };
}
