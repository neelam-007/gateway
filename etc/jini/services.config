import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.LookupLocatorDiscovery;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.entry.Entry;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.Delegation;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.security.BasicProxyPreparer;
import net.jini.lookup.entry.*;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import com.l7tech.remote.jini.lookup.AccessILFactory;
import com.l7tech.remote.jini.export.SSL;
import com.l7tech.remote.jini.security.AuthenticateClientSubjectChecker;
import com.sun.jini.config.ConfigUtil;
import com.sun.jini.discovery.DiscoveryProtocolVersion;
import net.jini.core.constraint.Delegation;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.Integrity;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.discovery.LookupDiscoveryManager;
import net.jini.discovery.DiscoveryGroupManagement;
import java.security.Permission;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;
import javax.security.auth.x500.X500Principal;
import com.sun.jini.reggie.RegistrarPermission;

/* Items used in multiple blocks below */
shared.entries {

  private static serverSubject = SSL.getSslSubject();
    private serviceLookupConstraints =
	    new BasicMethodConstraints(
	        new InvocationConstraints(
		    new InvocationConstraint[] {
		        DiscoveryProtocolVersion.TWO
		        },
		    null));

}//end shared.entries

com.sun.jini.reggie{

  // memeber groups, unused at the moment, could be used for versioning
  initialMemberGroups = new String[] { "services.l7tech.com"};

  // change the hostName to the clients see this host
  hostName = System.getProperty("jini.server.hostname", ConfigUtil.getHostName());


  // disable multicast discovery
  multicastInterfaces = new NetworkInterface[] {};
  /* Exporter for the server proxy */
   /* Exporters */
    private serviceEndpoint = SslServerEndpoint.getInstance(shared.entries.serverSubject, null, hostName, 2124);
    private serviceConstraints =
	    new BasicMethodConstraints(
	        new InvocationConstraints(
		        new InvocationConstraint[]{ Integrity.YES }, null
		    )
	    );

    private serviceILFactory = new BasicILFactory(serviceConstraints, null);

    serverExporter = new BasicJeriExporter(serviceEndpoint, serviceILFactory);

  initialLookupLocators = new LookupLocator[] {
    new ConstrainableLookupLocator(
        ConfigUtil.concat(new Object[] {"jini://", ConfigUtil.getHostName()}),
        shared.entries.serviceLookupConstraints
     )
  };
}


com.l7tech.remote.jini.export.RemoteService {
  /* Exporter for the server proxy */
  serverExporter =
        new BasicJeriExporter(
        SslServerEndpoint.getInstance(shared.entries.serverSubject, null,com.sun.jini.reggie.hostName, 2124),
            new AccessILFactory(new BasicMethodConstraints(
		        new InvocationConstraints(
		        new InvocationConstraint[] {
		            Integrity.YES
		            }, null)), null), false, false);

  /** exporter with the DGC enabled */      
  serverDgcEnabledExporter =
        new BasicJeriExporter(
        SslServerEndpoint.getInstance(shared.entries.serverSubject, null,com.sun.jini.reggie.hostName, 2124),
            new AccessILFactory(new BasicMethodConstraints(
                new InvocationConstraints(
                new InvocationConstraint[] {
                    Integrity.YES
                    }, null)), null), false, false);

  private groups = new String[] { "services.l7tech.com" };
  
  discoveryManager =
  new LookupLocatorDiscovery(
    new LookupLocator[] {
        new ConstrainableLookupLocator(
            ConfigUtil.concat(new Object[] {"jini://", ConfigUtil.getHostName()}),
            shared.entries.serviceLookupConstraints)
    });

    static registrarPreparer =
        new BasicProxyPreparer(false,
                               shared.entries.serviceLookupConstraints,
                               new Permission[] {});
    unicastLookupLocator =
        new ConstrainableLookupLocator(
                "jini://localhost",
                shared.entries.serviceLookupConstraints);

}

