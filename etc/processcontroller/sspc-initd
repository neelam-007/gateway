#!/bin/bash
#
# Startup script for the SecureSpan Process Controller
#
# chkconfig: - 99 01
# description: Layer 7 SecureSpan Process Controller Daemon
# processname: sspc

# Source function library.
. /etc/rc.d/init.d/functions

# See how we were called.
USER=$(whoami)
if [ $USER != "root" ] ; then
    echo "Need to be root to run this script";
    exit
fi

# Config
PID_FILE="sspcd"
PC_USER="layer7"
PC_SCRIPT="/opt/SecureSpan/Gateway/controller/bin/processcontroller.sh"
PC_FIREWALL_CONTROL="/opt/SecureSpan/Appliance/libexec/update_firewall"
PC_FIREWALL_RULES="/opt/SecureSpan/Gateway/controller/var/firewall_rules"
PC_CONFIG="/opt/SecureSpan/Gateway/controller/etc/host.properties"

start() {
        if [ ! -x "${PC_SCRIPT}" ] ; then
            echo "Service script not found or not executable."
            exit 5
        fi

        echo -n $"Starting Gateway Services: "
        daemon --check "${PID_FILE}" "${PC_SCRIPT}" "${PC_USER}" "/var/run/${PID_FILE}.pid"
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/sspc
        [ ! -f "${PC_FIREWALL_RULES}" ] || rm -f "${PC_FIREWALL_RULES}" &>/dev/null
        if [ -f "${PC_CONFIG}" ] ; then
            PC_ADDR=$(grep host.controller.sslIpAddress "${PC_CONFIG}" | sed 's/host.controller.sslIpAddress\s\{0,128\}=\s\{0,128\}//')
            PC_PORT=$(grep host.controller.sslPort "${PC_CONFIG}" | sed 's/host.controller.sslPort\s\{0,128\}=\s\{0,128\}//')
            if [ ! -z "${PC_ADDR}" ] && [ "${PC_ADDR}" != "127.0.0.1" ] ; then
                if [ -z "${PC_PORT}" ] ; then
                    PC_PORT="8765"
                fi
                if [ "${PC_ADDR}" != "0.0.0.0" ] ; then
                    echo "[0:0] -A INPUT -p tcp -m tcp -d ${PC_ADDR} --dport ${PC_PORT} -j ACCEPT" > "${PC_FIREWALL_RULES}"
                else
                    echo "[0:0] -A INPUT -p tcp -m tcp --dport ${PC_PORT} -j ACCEPT" > "${PC_FIREWALL_RULES}"
                fi
            fi
        fi
        [ $RETVAL -eq 0 ] && [ -x "${PC_FIREWALL_CONTROL}" ] && [ -f "${PC_FIREWALL_RULES}" ] && "${PC_FIREWALL_CONTROL}" "${PC_FIREWALL_RULES}" start
        return $RETVAL
}

stop() {
        echo -n $"Shutting down Gateway Services: "
        killproc "${PID_FILE}"
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/sspc
        [ $RETVAL -eq 0 ] && [ -x "${PC_FIREWALL_CONTROL}" ] && [ -f "${PC_FIREWALL_RULES}" ] && "${PC_FIREWALL_CONTROL}" "${PC_FIREWALL_RULES}" stop
        return $RETVAL
}

status() {
        if [ -f "/var/run/${PID_FILE}.pid" ] ; then
            PID=$(<"/var/run/${PID_FILE}.pid")
            if [ ! -z "${PID}" ] && [ -d "/proc/${PID}" ] ; then
                echo "ssg (pid $PID) is running..."
                return 0
            else
                echo "ssg dead but pid file exists"
                return 1
            fi
        else
            echo "ssg is stopped"
            return 3
        fi
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart)
	stop
        sleep 5
	start
	;;
  status)
        status sspcd
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit $RETVAL
