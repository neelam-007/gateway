#!/usr/bin/expect -f

set command [lindex $argv 0]
set talk [lindex $argv 1]
set soUsername so
set soPassword [lindex $argv 2]
set keyBackupFilename [lindex $argv 3]
set keyBackupPassword [lindex $argv 4]
set uwk1 [lindex $argv 5]
set uwk2 [lindex $argv 6]

set normalTimeout 30
set backupTimeout 600
set timeout $normalTimeout

set goodCommand 0
if { [string compare $command "backup"] == 0 } {
    set goodCommand 1
}
if { [string compare $command "probe"] == 0 } {
    set goodCommand 1
}

if { $goodCommand == 0 } {
    puts "\n\nUsage: masterkey-manage.expect [probe|backup] <talkprog> <sopasswd> <backupfile> <backuppasswd> <uwk1> <uwk2>"
    exit 99
}

spawn $talk

expect_before {
    -ex "-- adaptor not plugged in" {
        exit -onexit { exit 19 }
        puts "\n\nGDCC appears not to be connected properly.\n"
        exit 19
    }
    eof {
         exit -onexit { exit 15 }
         puts "\n\nTalk program $talk terminated prematurely"
         exit 15
    }
}

exit -onexit { puts "\n\nTimed out waiting for an expected response from $talk.  Board reset may be required -- reset board or wait two minutes before trying again\n" ; exit 1 }

# Find initial login prompt
set foundLogin 0
sleep 1
send "\r";
expect *
send "\r";
set timeout 15
expect {
    -ex "Press <ENTER> to start" { send "\r" ; exp_continue }
    -re "sca6000.*> " { send "exit\r" ; exp_continue }
    -re "Remote admin session is" { exit -onexit { exit 3 } ; puts "\n\nAn scamgr session is currently logged in.  Log out the scamgr session and try again." ; exit 3 }
    "Security Officer Password: " { send "\r" ; exp_continue }
    "Confirm password: " { expect * ; send "\r" ; exp_continue }
    "Backup file name:" { expect * ; send "\r" ; exp_continue }
    "Backup file password:" { send "\r" ; exp_continue }
    -re "Cancel UWK load.*: " { send "y\r" ; exp_continue }
    "Number of components:" { send "2\r" ; exp_continue }
    "Error submitting login to" { exit -onexit { exit 23 } ; puts "\n\nFirmware or driver wedged; reset board and try again" ; exit 23 }
    "Enter UWK component: " { 
        send "12345678901234567890123456789012\r"
        expect "Verify UWK component: "
        send "12345678901234567890123456789012\r"
        exp_continue
    }
    "Verify UWK component: " {
        send "98765432123423423423423423423333\r"
        exp_continue;
    }
    "Security Officer Login: " { 
        expect * 
        send "\r";
        expect "Security Officer Login: " {
            set foundLogin 1
        }
    }
    timeout {
        exit -onexit { exit 21 }
        puts "\n\nTimed out waiting for initial login prompt.  Cable not connected?"
        exit 21
    }
}

if { $foundLogin == 0 } {
   exit -onexit { exit 22 }
   puts "\n\nInitial login prompt probe failed"
   exit 22
}

if { [string compare $command "probe"] == 0 } {
    puts "\n\nProbe successful - GDCC is connected properly and talking to the firmware.";
    exit -onexit { exit 0 }
    exit 0
}

set timeout $normalTimeout
send "so\r"
expect "Security Officer Password: "
send "$soPassword\r"

expect {
    "Login failed." { exit -onexit { exit 2 } ; puts "\n\nInvalid security officer password." ; exit 2 }
    -re "sca6000.*> "
}

send "cancel uwk\r"
expect {
    -re "Cancel UWK load?.*: " { send "y\r" ; exp_continue }
    -re "sca6000.*> "
}

send "load uwk\r"
expect {
    "Number of components: " { send "2\r" ; exp_continue }
    "Enter UWK component: " { send "$uwk1\r" }
}

expect {
    "Invalid character in table value" { exit -onexit { exit 12 } ; puts "\n\nInvalid characters in first UWK component -- must be 32 character hex string"; exit 12 }
    "Verify UWK component: "
}
send "$uwk1\r"
expect {
    "Components do not match." { exit -onexit { exit 11 } ; puts "\n\nInternal error - reset board or wait two minutes" ; exit 11 }
    "Invalid character in table value" { exit -onexit { exit 12 } ; puts "\n\nInvalid characters in first UWK component -- must be 32 character hex string"; exit 12 }
    "Failed loading UWK: Invalid command" { exit -onexit {exit 12 } ; puts "\n\nInvalid first UWK component -- must be 32 character hex string"; exit 12 }
    "UWK component loaded."
}

expect -re "sca6000.*> "
send "exit\r"
expect {
   "Press <ENTER> to start" { send "\r" ; exp_continue }
   "Security Officer Login: " { send "so2\r" ; exp_continue }
   "Security Officer Password: " { send "$soPassword\r" ; exp_continue }
   -re "sca6000.*> "
}

send "load uwk\r"
expect "Enter UWK component: "
send "$uwk2\r"
expect {
    "Invalid character in table value" { exit -onexit { exit 13 } ; puts "\n\nInvalid characters in second UWK component -- must be 32 character hex string"; exit 12 }
    "Verify UWK component: "
}
send "$uwk2\r"
expect {
    "Components do not match." { exit -onexit { exit 11 } ; puts "\n\nInternal error - reset board or wait two minutes" ; exit 11 }
    "Invalid character in table value" { exit -onexit { exit 13 } ; puts "\n\nInvalid characters in second UWK component -- must be 32 character hex string"; exit 12 }
    "Failed loading UWK: Invalid command" { exit -onexit {exit 13 } ; puts "\n\nInvalid second UWK component -- must be 32 character
 hex string"; exit 13 }
    "UWK load complete."
}

set timeout $backupTimeout

if { [string compare $command "backup"] == 0 } {
    send "backup $keyBackupFilename\r"
    expect {
        "UWK required for FIPS" { exit -onexit { exit 5 } ; puts "\n\nInternal error - reset board or wait two minutes" ; exit 5 }
        "Backup file password: " { send "$keyBackupPassword\r" ; exp_continue }
        "Confirm password: " { send "$keyBackupPassword\r" ; exp_continue }
        "Backup file name:" { exit -onexit { exit 6 } ; puts "\n\nA key backup filename is required" ; exit 6 }
        -re "Overwrite it?.*: " { send "Y\r" ; exp_continue }
        "Error: USB device not" { exit -onexit { exit 9 } ; puts "\n\nKey backup failed -- USB not connected or not recognized" ; exit 9 }
        "Error:" { exit -onexit { exit 7 } ; puts "\n\nKey backup failed" ; exit 7 }
        "Idle timeout logoff" { exit -onexit { exit 8 } ; puts "\n\nKey backup failed -- bad USB drive?" ; exit 8 }
        "successful." {
            expect -re "sca6000.*> "
            send "exit\r"
            expect "Press <ENTER> to start"
            exit -onexit { exit 0 } ; puts "\n\nKey backup succeeded" ; exit 0
        }
    }
    exit -onexit { exit 31 } ; puts "\n\nKey backup failed" ; exit 31
}

exit -onexit { exit 77 }
puts "\n\nUnrecognized command: $command"
exit 77

