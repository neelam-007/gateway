Index: sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java	(revision 1178641)
+++ sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java	(revision )
@@ -25,7 +25,6 @@
 import java.io.OutputStream;
 import java.util.Arrays;
 
-import org.apache.sshd.common.util.DirectoryScanner;
 import org.apache.sshd.server.Command;
 import org.apache.sshd.server.Environment;
 import org.apache.sshd.server.ExitCallback;
@@ -173,33 +172,7 @@
                 }
             } else if (optF) {
                 String pattern = path;
-                int idx = pattern.indexOf('*');
-                if (idx >= 0) {
                     String basedir = "";
-                    int lastSep = pattern.substring(0, idx).lastIndexOf('/');
-                    if (lastSep >= 0) {
-                        basedir = pattern.substring(0, lastSep);
-                        pattern = pattern.substring(lastSep + 1);
-                    }
-                    String[] included = new DirectoryScanner(basedir, pattern).scan();
-                    for (String path : included) {
-                        SshFile file = root.getFile(basedir + "/" + path);
-                        if (file.isFile()) {
-                            readFile(file);
-                        } else if (file.isDirectory()) {
-                            if (!optR) {
-                                out.write(WARNING);
-                                out.write((path + " not a regular file\n").getBytes());
-                            } else {
-                                readDir(file);
-                            }
-                        } else {
-                            out.write(WARNING);
-                            out.write((path + " unknown file type\n").getBytes());
-                        }
-                    }
-                } else {
-                    String basedir = "";
                     int lastSep = pattern.lastIndexOf('/');
                     if (lastSep >= 0) {
                         basedir = pattern.substring(0, lastSep);
@@ -220,7 +193,6 @@
                     } else {
                         throw new IOException(file + ": unknown file type");
                     }
-                }
             } else {
                 throw new IOException("Unsupported mode");
             }
Index: sshd-core/src/main/java/org/apache/sshd/common/util/Buffer.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/common/util/Buffer.java	(revision 1178641)
+++ sshd-core/src/main/java/org/apache/sshd/common/util/Buffer.java	(revision )
@@ -488,6 +488,8 @@
     }
 
     private static int getNextPowerOf2(int i) {
+        if ( i > 0x40000000 ) return Integer.MAX_VALUE;
+
         int j = 1;
         while (j < i) {
             j <<= 1;
Index: sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java	(revision 1178641)
+++ sshd-core/src/main/java/org/apache/sshd/server/sftp/SftpSubsystem.java	(revision )
@@ -223,13 +223,13 @@
     private OutputStream out;
     private OutputStream err;
     private Environment env;
-    private ServerSession session;
+    protected ServerSession session;
     private boolean closed = false;
 
     private FileSystemView root;
 
-    private int version;
-    private Map<String, Handle> handles = new HashMap<String, Handle>();
+    protected int version;
+    protected Map<String, Handle> handles = new HashMap<String, Handle>();
 
 
     protected static abstract class Handle {
@@ -350,10 +350,11 @@
     public void run() {
         DataInputStream dis = null;
         try {
+            final int maxReadSize = session.getIntProperty( "maximum-read-size-in-bytes", 128*1024 );
             dis = new DataInputStream(in);
             while (true) {
                 int length = dis.readInt();
-                if (length < 5) {
+                if (length < 5 || length > maxReadSize ) {
                     throw new IllegalArgumentException();
                 }
                 Buffer buffer = new Buffer(length + 4);
@@ -997,7 +998,7 @@
         closed = true;
     }
 
-    private SshFile resolveFile(String path) {
+    protected SshFile resolveFile(String path) {
     	return this.root.getFile(path);
     }
 
Index: sshd-core/src/main/java/org/apache/sshd/server/auth/UserAuthPublicKey.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/auth/UserAuthPublicKey.java	(revision 1178641)
+++ sshd-core/src/main/java/org/apache/sshd/server/auth/UserAuthPublicKey.java	(revision )
@@ -47,12 +47,15 @@
     }
 
     public Boolean auth(ServerSession session, String username, Buffer buffer) throws Exception {
+        final int maxReadSize = session.getIntProperty( "maximum-read-size-in-bytes", 128*1024 );
         boolean hasSig = buffer.getBoolean();
         String alg = buffer.getString();
 
         int oldLim = buffer.wpos();
         int oldPos = buffer.rpos();
         int len = buffer.getInt();
+        if ( len > maxReadSize )
+            throw new Exception("Key verification failed (size limit exceeded)");
         buffer.wpos(buffer.rpos() + len);
         PublicKey key = buffer.getRawPublicKey();
         String keyAlg = (key instanceof RSAPublicKey) ? KeyPairProvider.SSH_RSA : KeyPairProvider.SSH_DSS;
