Index: sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java	(working copy)
@@ -423,7 +423,7 @@
         return true;
     }
 
-    protected void prepareCommand() {
+    protected void prepareCommand() throws IOException {
         // Add the user
         addEnvVariable(Environment.ENV_USER, ((ServerSession) session).getUsername());
         // If the shell wants to be aware of the session, let's do that
@@ -433,7 +433,7 @@
         // If the shell wants to be aware of the file system, let's do that too
         if (command instanceof FileSystemAware) {
             FileSystemFactory factory = ((ServerSession) session).getServerFactoryManager().getFileSystemFactory();
-            ((FileSystemAware) command).setFileSystemView(factory.createFileSystemView(((ServerSession) session).getUsername()));
+            ((FileSystemAware) command).setFileSystemView(factory.createFileSystemView((ServerSession) session));
         }
         out = new ChannelOutputStream(this, remoteWindow, log, SshConstants.Message.SSH_MSG_CHANNEL_DATA);
         err = new ChannelOutputStream(this, remoteWindow, log, SshConstants.Message.SSH_MSG_CHANNEL_EXTENDED_DATA);
Index: sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java	(working copy)
@@ -20,20 +20,18 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.EOFException;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.Arrays;
 
 import org.apache.sshd.common.util.DirectoryScanner;
-import org.apache.sshd.common.util.SelectorUtils;
 import org.apache.sshd.server.Command;
-import org.apache.sshd.server.CommandFactory;
 import org.apache.sshd.server.Environment;
 import org.apache.sshd.server.ExitCallback;
+import org.apache.sshd.server.FileSystemAware;
+import org.apache.sshd.server.FileSystemView;
+import org.apache.sshd.server.SshFile;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,7 +42,7 @@
  *
  * @author <a href="mailto:dev@mina.apache.org">Apache MINA SSHD Project</a>
  */
-public class ScpCommand implements Command, Runnable {
+public class ScpCommand implements Command, Runnable, FileSystemAware {
 
     protected static final Logger log = LoggerFactory.getLogger(ScpCommand.class);
     protected static final int OK = 0;
@@ -58,7 +56,10 @@
     protected boolean optV;
     protected boolean optD;
     protected boolean optP;
-    protected String root;
+
+    protected FileSystemView root;
+    protected String path;
+    
     protected InputStream in;
     protected OutputStream out;
     protected OutputStream err;
@@ -70,7 +71,7 @@
         if (log.isDebugEnabled()) {
             log.debug("Executing command {}", name);
         }
-        root = ".";
+        path = ".";
         for (int i = 1; i < args.length; i++) {
             if (args[i].charAt(0) == '-') {
                 for (int j = 1; j < args[i].length(); j++) {
@@ -99,7 +100,7 @@
                     }
                 }
             } else if (i == args.length - 1) {
-                root = args[args.length - 1];
+                path = args[args.length - 1];
             }
         }
         if (!optF && !optT) {
@@ -163,15 +164,15 @@
 
                     if (optR && isDir)
                     {
-                        writeDir(line, new File(root));
+                        writeDir(line, root.getFile(path));
                     }
                     else
                     {
-                        writeFile(line, new File(root));
+                        writeFile(line, root.getFile(path));
                     }
                 }
             } else if (optF) {
-                String pattern = root;
+                String pattern = path;
                 int idx = pattern.indexOf('*');
                 if (idx >= 0) {
                     String basedir = "";
@@ -182,7 +183,7 @@
                     }
                     String[] included = new DirectoryScanner(basedir, pattern).scan();
                     for (String path : included) {
-                        File file = new File(basedir, path);
+                        SshFile file = root.getFile(basedir + "/" + path);
                         if (file.isFile()) {
                             readFile(file);
                         } else if (file.isDirectory()) {
@@ -204,8 +205,8 @@
                         basedir = pattern.substring(0, lastSep);
                         pattern = pattern.substring(lastSep + 1);
                     }
-                    File file = new File(basedir, pattern);
-                    if (!file.exists()) {
+                    SshFile file = root.getFile(basedir + "/" + pattern);
+                    if (!file.doesExist()) {
                         throw new IOException(file + ": no such file or directory");
                     }
                     if (file.isFile()) {
@@ -242,7 +243,7 @@
         }
     }
 
-    protected void writeDir(String header, File path) throws IOException {
+    protected void writeDir(String header, SshFile path) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug("Writing dir {}", path);
         }
@@ -257,15 +258,15 @@
         if (length != 0) {
             throw new IOException("Expected 0 length for directory but got " + length);
         }
-        File file;
-        if (path.exists() && path.isDirectory()) {
-            file = new File(path, name);
-        } else if (!path.exists() && path.getParentFile().exists() && path.getParentFile().isDirectory()) {
+        SshFile file;
+        if (path.doesExist() && path.isDirectory()) {
+            file = root.getFile(path, name);
+        } else if (!path.doesExist() && path.getParentFile().doesExist() && path.getParentFile().isDirectory()) {
             file = path;
         } else {
             throw new IOException("Can not write to " + path);
         }
-        if (!(file.exists() && file.isDirectory()) && !file.mkdir()) {
+        if (!(file.doesExist() && file.isDirectory()) && !file.mkdir()) {
             throw new IOException("Could not create directory " + file);
         }
 
@@ -287,7 +288,7 @@
 
     }
 
-    protected void writeFile(String header, File path) throws IOException {
+    protected void writeFile(String header, SshFile path) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug("Writing file {}", path);
         }
@@ -299,22 +300,22 @@
         long length = Long.parseLong(header.substring(6, header.indexOf(' ', 6)));
         String name = header.substring(header.indexOf(' ', 6) + 1);
 
-        File file;
-        if (path.exists() && path.isDirectory()) {
-            file = new File(path, name);
-        } else if (path.exists() && path.isFile()) {
+        SshFile file;
+        if (path.doesExist() && path.isDirectory()) {
+            file = root.getFile(path, name);
+        } else if (path.doesExist() && path.isFile()) {
             file = path;
-        } else if (!path.exists() && path.getParentFile().exists() && path.getParentFile().isDirectory()) {
+        } else if (!path.doesExist() && path.getParentFile().doesExist() && path.getParentFile().isDirectory()) {
             file = path;
         } else {
             throw new IOException("Can not write to " + path);
         }
-        if (file.exists() && file.isDirectory()) {
+        if (file.doesExist() && file.isDirectory()) {
             throw new IOException("File is a directory: " + file);
-        } else if (file.exists() && !file.canWrite()) {
+        } else if (file.doesExist() && !file.isWritable()) {
             throw new IOException("Can not write to file: " + file);
         }
-        OutputStream os = new FileOutputStream(file);
+        OutputStream os = file.createOutputStream(0);
         try {
             ack();
 
@@ -350,7 +351,7 @@
         }
     }
 
-    protected void readFile(File path) throws IOException {
+    protected void readFile(SshFile path) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug("Reading file {}", path);
         }
@@ -358,7 +359,7 @@
         buf.append("C");
         buf.append("0644"); // what about perms
         buf.append(" ");
-        buf.append(path.length()); // length
+        buf.append(path.getSize()); // length
         buf.append(" ");
         buf.append(path.getName());
         buf.append("\n");
@@ -366,7 +367,7 @@
         out.flush();
         readAck(false);
 
-        InputStream is = new FileInputStream(path);
+        InputStream is = path.createInputStream(0);
         try {
             byte[] buffer = new byte[8192];
             for (;;) {
@@ -383,7 +384,7 @@
         readAck(false);
     }
 
-    protected void readDir(File path) throws IOException {
+    protected void readDir(SshFile path) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug("Reading directory {}", path);
         }
@@ -399,7 +400,7 @@
         out.flush();
         readAck(false);
 
-        for (File child : path.listFiles()) {
+        for (SshFile child : path.listSshFiles()) {
             if (child.isFile()) {
                 readFile(child);
             } else if (child.isDirectory()) {
@@ -438,4 +439,9 @@
         return c;
     }
 
+	public void setFileSystemView(FileSystemView view) {
+		this.root = view;	
+	}
+	
+    
 }
Index: sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemFactory.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemFactory.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemFactory.java	(working copy)
@@ -21,10 +21,12 @@
 
 import org.apache.sshd.server.FileSystemFactory;
 import org.apache.sshd.server.FileSystemView;
+import org.apache.sshd.server.session.ServerSession;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
+import java.io.IOException;
 
 /**
  * Native file system factory. It uses the OS file system.
@@ -77,7 +79,9 @@
     /**
      * Create the appropriate user file system view.
      */
-    public FileSystemView createFileSystemView(String userName) {
+    public FileSystemView createFileSystemView(ServerSession session) throws IOException {
+    	
+    	String userName = session.getUsername();
         // create home if does not exist
         if (createHome) {
             String homeDirStr = "/home/" + userName;
@@ -87,7 +91,7 @@
 //                    throw new FtpException("Not a directory :: " + homeDirStr);
             }
             if ((!homeDir.exists()) && (!homeDir.mkdirs())) {
-                LOG.warn("Cannot create user home :: " + homeDirStr);
+            	LOG.warn("Cannot create user home :: " + homeDirStr);
 //                    throw new FtpException("Cannot create user home :: "
 //                            + homeDirStr);
             }
Index: sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemView.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemView.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/filesystem/NativeFileSystemView.java	(working copy)
@@ -76,11 +76,18 @@
      * Get file object.
      */
     public SshFile getFile(String file) {
-
-        // get actual file object
+    	return getFile(currDir, file);
+    }
+    
+    public SshFile getFile(SshFile baseDir, String file) {
+    	return getFile(baseDir.getAbsolutePath(), file);
+    }
+    
+    protected SshFile getFile(String dir, String file) {
+    	// get actual file object
         String physicalName = NativeSshFile.getPhysicalName("/",
-                currDir, file, caseInsensitive);
-        File fileObj = new File(physicalName);
+                dir, file, caseInsensitive);
+    	File fileObj = new File(physicalName);
 
         // strip the root directory and return
         String userFileName = physicalName.substring("/".length() - 1);
Index: sshd-core/src/main/java/org/apache/sshd/server/FileSystemFactory.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/FileSystemFactory.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/FileSystemFactory.java	(working copy)
@@ -19,6 +19,10 @@
 
 package org.apache.sshd.server;
 
+import java.io.IOException;
+
+import org.apache.sshd.server.session.ServerSession;
+
 /**
  * Factory for file system implementations - it returns the file system view for user.
  *
@@ -28,9 +32,10 @@
 
     /**
      * Create user specific file system view.
-     * @param userName The user for which the file system should be created
-     * @return The current {@link FileSystemView} for the provided user
+     * @param session The session created for the user 
+     * @return The current {@link FileSystemView} for the provided session
+     * @throws IOException when the filesystem view can not be created
      */
-    FileSystemView createFileSystemView(String userName);
+    FileSystemView createFileSystemView(ServerSession session) throws IOException;
 
 }
Index: sshd-core/src/main/java/org/apache/sshd/server/FileSystemView.java
===================================================================
--- sshd-core/src/main/java/org/apache/sshd/server/FileSystemView.java	(revision 1033978)
+++ sshd-core/src/main/java/org/apache/sshd/server/FileSystemView.java	(working copy)
@@ -32,5 +32,13 @@
      * @return The {@link SshFile} for the provided path
      */
     SshFile getFile(String file);
+    
+    /**
+     * Get file object.
+     * @param baseDir The reference towards which the file should be resolved
+     * @param file The path to the file to get
+     * @return The {@link SshFile} for the provided path
+     */    
+    SshFile getFile(SshFile baseDir, String file);
 
 }
