*** XSLTElementProcessor.java.ORIG	2014-08-13 16:28:57.000000000 -0700
--- XSLTElementProcessor.java	2014-08-13 16:34:15.000000000 -0700
***************
*** 26,33 ****
--- 26,34 ----
  import javax.xml.transform.TransformerException;
  
  import org.apache.xalan.res.XSLMessages;
  import org.apache.xalan.res.XSLTErrorResources;
+ import org.apache.xalan.templates.ElemLiteralResult;
  import org.apache.xalan.templates.ElemTemplateElement;
  import org.apache.xml.utils.IntStack;
  import org.xml.sax.Attributes;
  import org.xml.sax.InputSource;
***************
*** 339,347 ****
        {
          //handle secure processing
          if(handler.getStylesheetProcessor()==null)
              System.out.println("stylesheet processor null");
!         if(attrDef.getName().compareTo("*")==0 && handler.getStylesheetProcessor().isSecureProcessing())
          {
              //foreign attributes are not allowed in secure processing mode
              // Then barf, because this element does not allow this attribute.
              handler.error(XSLTErrorResources.ER_ATTR_NOT_ALLOWED, new Object[]{attributes.getQName(i), rawName}, null);//"\""+attributes.getQName(i)+"\""
--- 340,356 ----
        {
          //handle secure processing
          if(handler.getStylesheetProcessor()==null)
              System.out.println("stylesheet processor null");
! 
!         boolean namespaceDecl = org.apache.xalan.templates.Constants.S_XMLNAMESPACEURI.equals( attrUri ) ||
!                         "http://www.w3.org/2000/xmlns/".equals( attrUri );
! 
!         boolean specialOrNonLiteral = !( target instanceof ElemLiteralResult ) ||
!                         isSpecialNamespace( ( ( (ElemLiteralResult) target ).getNamespace() ) );
! 
!         if ( !ALLOW_ATTRIBUTES_IN_SECURE_MODE && handler.getStylesheetProcessor().isSecureProcessing() && attrDef.getName().compareTo( "*" ) == 0
!              && !namespaceDecl && ( specialOrNonLiteral || isSpecialNamespace( attrUri ) ) )
          {
              //foreign attributes are not allowed in secure processing mode
              // Then barf, because this element does not allow this attribute.
              handler.error(XSLTErrorResources.ER_ATTR_NOT_ALLOWED, new Object[]{attributes.getQName(i), rawName}, null);//"\""+attributes.getQName(i)+"\""
***************
*** 392,396 ****
--- 401,427 ----
      }
  
      return undefines;
    }
+ 
+     private boolean isSpecialNamespace( String ns ) {
+         // Check if the specified namespace URI is one that indicates an attribute or element might have a special meaning for Xalan
+         // We will reject the Saxon internal namespace as well, just in case
+         return "http://xml.apache.org/xalan".equals( ns ) ||
+                 "http://xml.apache.org/xslt".equals( ns ) ||
+                 "http://icl.com/saxon".equals( ns ) ||
+                 "http://www.w3.org/1999/XSL/Transform".equals( ns );
+     }
+ 
+     private static final String PROP_ALLOW_ATTRIBUTES_IN_SECURE_MODE = "com.l7tech.org.apache.xalan.processor.allowAttributesInSecureMode";
+     private static final boolean ALLOW_ATTRIBUTES_IN_SECURE_MODE;
+     static {
+         boolean b = false;
+         try {
+             b = Boolean.getBoolean( PROP_ALLOW_ATTRIBUTES_IN_SECURE_MODE );
+         } catch ( Exception e ) {
+             // FALLTHROUGH and use default
+         }
+         ALLOW_ATTRIBUTES_IN_SECURE_MODE = b;
+     }
+ 
  }
