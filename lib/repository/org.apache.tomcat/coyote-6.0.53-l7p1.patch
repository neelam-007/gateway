Index: java/org/apache/coyote/http11/Http11Processor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/coyote/http11/Http11Processor.java	(revision 1816899)
+++ java/org/apache/coyote/http11/Http11Processor.java	(revision )
@@ -1042,6 +1042,9 @@
                     if (sslO != null)
                         request.setAttribute
                             (SSLSupport.SESSION_ID_KEY, sslO);
+                    sslO = sslSupport.getProtocol();
+                    if (sslO != null)
+                        request.setAttribute(SSLSupport.L7_SSLPROTOCOL_KEY, sslO);
                 }
             } catch (Exception e) {
                 log.warn(sm.getString("http11processor.socket.ssl"), e);
Index: java/org/apache/catalina/connector/Connector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/connector/Connector.java	(revision 1816899)
+++ java/org/apache/catalina/connector/Connector.java	(revision )
@@ -129,6 +129,11 @@
      */
     protected boolean xpoweredBy = false;
 
+    /*
+    * Is trim the space between the ; and charset in content type header
+    */
+    protected boolean trimContentType = true;
+
 
     /**
      * Descriptive information about this Connector implementation.
@@ -977,6 +982,14 @@
         setProperty("xpoweredBy", String.valueOf(xpoweredBy));
     }
 
+    public boolean isTrimContentType() {
+        return trimContentType;
+    }
+
+    public void setTrimContentType(boolean trimContentType) {
+        this.trimContentType = trimContentType;
+    }
+
     /**
      * Enable the use of IP-based virtual hosting.
      *
Index: java/org/apache/catalina/connector/Response.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/connector/Response.java	(revision 1816899)
+++ java/org/apache/catalina/connector/Response.java	(revision )
@@ -1017,7 +1017,7 @@
      * @param cookie Cookie to be added
      */
     public void addCookieInternal(final Cookie cookie) {
-        addCookieInternal(cookie, false);
+        addCookieInternal(cookie, cookie.isHttpOnly());
     }
 
     /**
Index: java/org/apache/coyote/Response.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/coyote/Response.java	(revision 1816899)
+++ java/org/apache/coyote/Response.java	(revision )
@@ -21,6 +21,7 @@
 import java.io.StringReader;
 import java.util.Locale;
 
+import org.apache.catalina.connector.Connector;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.parser.HttpParser;
@@ -92,6 +93,9 @@
     protected boolean commited = false;
 
 
+    protected Connector connector;
+
+
     /**
      * Action hook.
      */
@@ -229,6 +233,13 @@
         this.commited = v;
     }
 
+    public Connector getConnector() {
+        return connector;
+    }
+
+    public void setConnector(Connector connector) {
+        this.connector = connector;
+    }
 
     // -----------------Error State --------------------
 
@@ -496,7 +507,11 @@
         if (ret != null
             && characterEncoding != null
             && charsetSet) {
-            ret = ret + ";charset=" + characterEncoding;
+            if (connector != null && !connector.isTrimContentType()) {
+            ret = ret + "; charset=" + characterEncoding;
+            } else {
+                ret = ret + ";charset=" + characterEncoding;
+            }
         }
 
         return ret;
Index: java/org/apache/tomcat/util/net/jsse/JSSESupport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/util/net/jsse/JSSESupport.java	(revision 1816899)
+++ java/org/apache/tomcat/util/net/jsse/JSSESupport.java	(revision )
@@ -265,5 +265,13 @@
         }
     }
 
+    /**
+     * Added to support request attribute supporting SSL/TLS negotiation protocol
+     * returned on request.
+     */
+    public String getProtocol() {
+	return session == null ? null : session.getProtocol();
+    }
+
 }
 
Index: java/javax/servlet/http/Cookie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/javax/servlet/http/Cookie.java	(revision 1816899)
+++ java/javax/servlet/http/Cookie.java	(revision )
@@ -84,11 +84,12 @@
     private String comment;	// ;Comment=VALUE ... describes cookie's use
 				// ;Discard ... implied by maxAge < 0
     private String domain;	// ;Domain=VALUE ... domain that sees cookie
+    private boolean httpOnly;
     private int maxAge = -1;	// ;Max-Age=VALUE ... cookies auto-expire
     private String path;	// ;Path=VALUE ... URLs that see the cookie
     private boolean secure;	// ;Secure ... e.g. use SSL
     private int version = 0;	// ;Version=1 ... means RFC 2109++ style
-    
+
     
 
     /**
@@ -231,8 +232,13 @@
 	return domain;
     }
 
+    public boolean isHttpOnly() {
+        return httpOnly;
+    }
 
-
+    public void setHttpOnly(final boolean httpOnly) {
+        this.httpOnly = httpOnly;
+    }
 
     /**
      * Sets the maximum age of the cookie in seconds.
Index: java/org/apache/catalina/connector/Request.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/connector/Request.java	(revision 1816899)
+++ java/org/apache/catalina/connector/Request.java	(revision )
@@ -956,6 +956,10 @@
             if(attr != null) {
                 attributes.put(Globals.SSL_SESSION_ID_ATTR, attr);
             }
+            attr = coyoteRequest.getAttribute(Globals.L7_SSLPROTOCOL_KEY);
+            if(attr != null) {
+                attributes.put(Globals.L7_SSLPROTOCOL_KEY, attr);
+            }
             attr = attributes.get(name);
             sslAttributesParsed = true;
         }
@@ -970,7 +974,8 @@
         return Globals.CERTIFICATES_ATTR.equals(name) ||
             Globals.CIPHER_SUITE_ATTR.equals(name) ||
             Globals.KEY_SIZE_ATTR.equals(name)  ||
-            Globals.SSL_SESSION_ID_ATTR.equals(name);
+            Globals.SSL_SESSION_ID_ATTR.equals(name) ||
+            Globals.L7_SSLPROTOCOL_KEY.equals(name);
     }
 
     /**
Index: java/org/apache/catalina/Globals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/Globals.java	(revision 1816899)
+++ java/org/apache/catalina/Globals.java	(revision )
@@ -402,4 +402,10 @@
      */
     public static final String JASPER_XML_BLOCK_EXTERNAL_INIT_PARAM =
             "org.apache.jasper.XML_BLOCK_EXTERNAL";
+
+    /**
+     * Constent to represent request attribute for the ssl protocol negoatiated.
+     *
+     */
+    public static final String L7_SSLPROTOCOL_KEY =  "com.l7tech.servlet.request.sslprotocol";
 }
Index: java/org/apache/catalina/core/StandardContextValve.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/core/StandardContextValve.java	(revision 1816899)
+++ java/org/apache/catalina/core/StandardContextValve.java	(revision )
@@ -114,16 +114,6 @@
     public final void invoke(Request request, Response response)
         throws IOException, ServletException {
 
-        // Disallow any direct access to resources under WEB-INF or META-INF
-        MessageBytes requestPathMB = request.getRequestPathMB();
-        if ((requestPathMB.startsWithIgnoreCase("/META-INF/", 0))
-            || (requestPathMB.equalsIgnoreCase("/META-INF"))
-            || (requestPathMB.startsWithIgnoreCase("/WEB-INF/", 0))
-            || (requestPathMB.equalsIgnoreCase("/WEB-INF"))) {
-            notFound(response);
-            return;
-        }
-
         // Wait if we are reloading
         boolean reloaded = false;
         while (context.getPaused()) {
Index: java/org/apache/catalina/connector/CoyoteAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/catalina/connector/CoyoteAdapter.java	(revision 1816899)
+++ java/org/apache/catalina/connector/CoyoteAdapter.java	(revision )
@@ -252,6 +252,8 @@
     	                org.apache.coyote.Response res)
         throws Exception {
 
+        res.setConnector(connector);
+
         Request request = (Request) req.getNote(ADAPTER_NOTES);
         Response response = (Response) res.getNote(ADAPTER_NOTES);
 
Index: java/org/apache/tomcat/util/net/SSLSupport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/org/apache/tomcat/util/net/SSLSupport.java	(revision 1816899)
+++ java/org/apache/tomcat/util/net/SSLSupport.java	(revision )
@@ -48,6 +48,12 @@
      */
     public static final String SESSION_ID_KEY = "javax.servlet.request.ssl_session";
 
+    /**
+     * This Request attributed added to support the return the SSL/TLS protocol used
+     * to negotiate the SSL Session.
+     */
+    public static final String L7_SSLPROTOCOL_KEY = "com.l7tech.servlet.request.sslprotocol";
+
     /**
      * A mapping table to determine the number of effective bits in the key
      * when using a cipher suite containing the specified cipher name.  The
@@ -125,6 +131,7 @@
         }
     
     }
-    
+
+    public String getProtocol();
 }
 
