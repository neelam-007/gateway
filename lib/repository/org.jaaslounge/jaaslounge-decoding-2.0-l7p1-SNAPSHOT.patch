commit 2e1dfde1a3ce7113d57164433e55dfce7f22a607
Author: Wong <wonch14@wonch14mac1048.ca.com>
Date:   Thu Oct 20 11:23:14 2016 -0700

    Adding modifications.

diff --git a/pom.xml b/pom.xml
index 951b777..f81c1cd 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1,23 +1,64 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>org.jaaslounge</groupId>
-        <artifactId>jaaslounge-project</artifactId>
-        <version>2.0-SNAPSHOT</version>
-    </parent>
-
+    
+    <groupId>org.jaaslounge</groupId>
     <artifactId>jaaslounge-decoding</artifactId>
-
+    <version>2.0-l7p1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+    
     <name>JaasLounge Decoding</name>
     <description>JaasLounge decoding tools</description>
-
+    
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <phase>install</phase>
+                        <goals>
+                            <goal>copy-dependencies</goal>
+                        </goals>
+                        <configuration>
+                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
     <dependencies>
         <dependency>
             <groupId>org.bouncycastle</groupId>
-            <artifactId>bcprov-jdk15</artifactId>
-            <version>1.45</version>
+            <artifactId>bcprov-jdk16</artifactId>
+            <version>1.46</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.apache.directory.server</groupId>
+            <artifactId>apacheds-kerberos-codec</artifactId>
+            <version>2.0.0-M21</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>commons-codec</groupId>
+            <artifactId>commons-codec</artifactId>
+            <version>1.6</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>org.apache.kerby</groupId>
+            <artifactId>kerb-client-api-all</artifactId>
+            <version>1.0.0-RC2</version>
+        </dependency>
+        
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.12</version>
+            <scope>test</scope>
         </dependency>
     </dependencies>
 </project>
diff --git a/src/main/java/org/jaaslounge/decoding/kerberos/KerberosConstants.java b/src/main/java/org/jaaslounge/decoding/kerberos/KerberosConstants.java
index 67a0379..6b51d9f 100755
--- a/src/main/java/org/jaaslounge/decoding/kerberos/KerberosConstants.java
+++ b/src/main/java/org/jaaslounge/decoding/kerberos/KerberosConstants.java
@@ -21,5 +21,7 @@ public interface KerberosConstants {
     static final String HMAC_ALGORITHM = "HmacMD5";
     static final int CONFOUNDER_SIZE = 8;
     static final int CHECKSUM_SIZE = 16;
+    
+    static final int AS_OR_TGS_REP_TICKET_WITH_SRVKEY_KEYUSAGE = 2;
 
 }
\ No newline at end of file
diff --git a/src/main/java/org/jaaslounge/decoding/kerberos/KerberosEncData.java b/src/main/java/org/jaaslounge/decoding/kerberos/KerberosEncData.java
index 2a3dd46..a4e3a97 100755
--- a/src/main/java/org/jaaslounge/decoding/kerberos/KerberosEncData.java
+++ b/src/main/java/org/jaaslounge/decoding/kerberos/KerberosEncData.java
@@ -16,6 +16,12 @@ import javax.crypto.SecretKey;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 
+import org.apache.directory.server.kerberos.shared.crypto.encryption.CipherTextHandler;
+import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
+import org.apache.directory.shared.kerberos.components.EncryptedData;
+import org.apache.directory.shared.kerberos.components.EncryptionKey;
+import org.apache.directory.shared.kerberos.exceptions.KerberosException;
 import org.bouncycastle.asn1.ASN1InputStream;
 import org.bouncycastle.asn1.ASN1TaggedObject;
 import org.bouncycastle.asn1.DERApplicationSpecific;
@@ -27,13 +33,14 @@ import org.bouncycastle.asn1.DERTaggedObject;
 import org.jaaslounge.decoding.DecodingException;
 import org.jaaslounge.decoding.DecodingUtil;
 
-public class KerberosEncData {
 
+public class KerberosEncData {
+    
     private String userRealm;
     private String userPrincipalName;
     private ArrayList<InetAddress> userAddresses;
     private List<KerberosAuthData> userAuthorizations;
-
+    
     public KerberosEncData(byte[] token, Key key) throws DecodingException {
         ASN1InputStream stream = new ASN1InputStream(new ByteArrayInputStream(token));
         DERApplicationSpecific derToken;
@@ -45,7 +52,7 @@ public class KerberosEncData {
         } catch(IOException e) {
             throw new DecodingException("kerberos.ticket.malformed", null, e);
         }
-
+        
         stream = new ASN1InputStream(new ByteArrayInputStream(derToken.getContents()));
         DERSequence sequence;
         try {
@@ -54,184 +61,193 @@ public class KerberosEncData {
         } catch(IOException e) {
             throw new DecodingException("kerberos.ticket.malformed", null, e);
         }
-
+        
         Enumeration<?> fields = sequence.getObjects();
         while(fields.hasMoreElements()) {
             ASN1TaggedObject tagged = DecodingUtil.as(ASN1TaggedObject.class, fields);
-
+            
             switch (tagged.getTagNo()) {
-            case 0: // Ticket Flags
-                break;
-            case 1: // Key
-                break;
-            case 2: // Realm
-                DERGeneralString derRealm = DecodingUtil.as(DERGeneralString.class, tagged);
-                userRealm = derRealm.getString();
-                break;
-            case 3: // Principal
-                DERSequence principalSequence = DecodingUtil.as(DERSequence.class, tagged);
-                DERSequence nameSequence = DecodingUtil.as(DERSequence.class, DecodingUtil.as(
-                        DERTaggedObject.class, principalSequence, 1));
-
-                StringBuilder nameBuilder = new StringBuilder();
-                Enumeration<?> parts = nameSequence.getObjects();
-                while(parts.hasMoreElements()) {
-                    Object part = parts.nextElement();
-                    DERGeneralString stringPart = DecodingUtil.as(DERGeneralString.class, part);
-                    nameBuilder.append(stringPart.getString());
-                    if(parts.hasMoreElements())
-                        nameBuilder.append('/');
-                }
-                userPrincipalName = nameBuilder.toString();
-                break;
-            case 4: // Transited Encoding
-                break;
-            case 5: // Kerberos Time
-                // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
-                // DERGeneralizedTime.class);
-                break;
-            case 6: // Kerberos Time
-                // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
-                // DERGeneralizedTime.class);
-                break;
-            case 7: // Kerberos Time
-                // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
-                // DERGeneralizedTime.class);
-                break;
-            case 8: // Kerberos Time
-                // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
-                // DERGeneralizedTime.class);
-                break;
-            case 9: // Host Addresses
-                DERSequence adressesSequence = DecodingUtil.as(DERSequence.class, tagged);
-                Enumeration<?> adresses = adressesSequence.getObjects();
-                while(adresses.hasMoreElements()) {
-                    DERSequence addressSequence = DecodingUtil.as(DERSequence.class, adresses);
-                    DERInteger addressType = DecodingUtil.as(DERInteger.class, addressSequence, 0);
-                    DEROctetString addressOctets = DecodingUtil.as(DEROctetString.class,
-                            addressSequence, 1);
-
-                    userAddresses = new ArrayList<InetAddress>();
-                    if(addressType.getValue().intValue() == KerberosConstants.AF_INTERNET) {
-                        InetAddress userAddress = null;
-                        try {
-                            userAddress = InetAddress.getByAddress(addressOctets.getOctets());
-                        } catch(UnknownHostException e) {}
-                        userAddresses.add(userAddress);
+                case 0: // Ticket Flags
+                    break;
+                case 1: // Key
+                    break;
+                case 2: // Realm
+                    DERGeneralString derRealm = DecodingUtil.as(DERGeneralString.class, tagged);
+                    userRealm = derRealm.getString();
+                    break;
+                case 3: // Principal
+                    DERSequence principalSequence = DecodingUtil.as(DERSequence.class, tagged);
+                    DERSequence nameSequence = DecodingUtil.as(DERSequence.class, DecodingUtil.as(
+                                                                                                  DERTaggedObject.class, principalSequence, 1));
+                    
+                    StringBuilder nameBuilder = new StringBuilder();
+                    Enumeration<?> parts = nameSequence.getObjects();
+                    while(parts.hasMoreElements()) {
+                        Object part = parts.nextElement();
+                        DERGeneralString stringPart = DecodingUtil.as(DERGeneralString.class, part);
+                        nameBuilder.append(stringPart.getString());
+                        if(parts.hasMoreElements())
+                            nameBuilder.append('/');
                     }
-                }
-                break;
-            case 10: // Authorization Data
-                DERSequence authSequence = DecodingUtil.as(DERSequence.class, tagged);
-
-                userAuthorizations = new ArrayList<KerberosAuthData>();
-                Enumeration<?> authElements = authSequence.getObjects();
-                while(authElements.hasMoreElements()) {
-                    DERSequence authElement = DecodingUtil.as(DERSequence.class, authElements);
-                    DERInteger authType = DecodingUtil.as(DERInteger.class, DecodingUtil.as(
-                            DERTaggedObject.class, authElement, 0));
-                    DEROctetString authData = DecodingUtil.as(DEROctetString.class, DecodingUtil
-                            .as(DERTaggedObject.class, authElement, 1));
-
-                    userAuthorizations.addAll(KerberosAuthData.parse(
-                            authType.getValue().intValue(), authData.getOctets(), key));
-                }
-                break;
-            default:
-                Object[] args = new Object[]{tagged.getTagNo()};
-                throw new DecodingException("kerberos.field.invalid", args, null);
+                    userPrincipalName = nameBuilder.toString();
+                    break;
+                case 4: // Transited Encoding
+                    break;
+                case 5: // Kerberos Time
+                    // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
+                    // DERGeneralizedTime.class);
+                    break;
+                case 6: // Kerberos Time
+                    // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
+                    // DERGeneralizedTime.class);
+                    break;
+                case 7: // Kerberos Time
+                    // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
+                    // DERGeneralizedTime.class);
+                    break;
+                case 8: // Kerberos Time
+                    // DERGeneralizedTime derTime = KerberosUtil.readAs(tagged,
+                    // DERGeneralizedTime.class);
+                    break;
+                case 9: // Host Addresses
+                    DERSequence adressesSequence = DecodingUtil.as(DERSequence.class, tagged);
+                    Enumeration<?> adresses = adressesSequence.getObjects();
+                    while(adresses.hasMoreElements()) {
+                        DERSequence addressSequence = DecodingUtil.as(DERSequence.class, adresses);
+                        DERInteger addressType = DecodingUtil.as(DERInteger.class, addressSequence, 0);
+                        DEROctetString addressOctets = DecodingUtil.as(DEROctetString.class,
+                                                                       addressSequence, 1);
+                        
+                        userAddresses = new ArrayList<InetAddress>();
+                        if(addressType.getValue().intValue() == KerberosConstants.AF_INTERNET) {
+                            InetAddress userAddress = null;
+                            try {
+                                userAddress = InetAddress.getByAddress(addressOctets.getOctets());
+                            } catch(UnknownHostException e) {}
+                            userAddresses.add(userAddress);
+                        }
+                    }
+                    break;
+                case 10: // Authorization Data
+                    DERSequence authSequence = DecodingUtil.as(DERSequence.class, tagged);
+                    
+                    userAuthorizations = new ArrayList<KerberosAuthData>();
+                    Enumeration<?> authElements = authSequence.getObjects();
+                    while(authElements.hasMoreElements()) {
+                        DERSequence authElement = DecodingUtil.as(DERSequence.class, authElements);
+                        DERInteger authType = DecodingUtil.as(DERInteger.class, DecodingUtil.as(
+                                                                                                DERTaggedObject.class, authElement, 0));
+                        DEROctetString authData = DecodingUtil.as(DEROctetString.class, DecodingUtil
+                                                                  .as(DERTaggedObject.class, authElement, 1));
+                        
+                        userAuthorizations.addAll(KerberosAuthData.parse(
+                                                                         authType.getValue().intValue(), authData.getOctets(), key));
+                    }
+                    break;
+                default:
+                    Object[] args = new Object[]{tagged.getTagNo()};
+                    throw new DecodingException("kerberos.field.invalid", args, null);
             }
         }
     }
-
-    public static byte[] decrypt(byte[] data, Key key, int type) throws GeneralSecurityException {
+    
+    public static byte[] decrypt(byte[] data, Key key, int type) throws GeneralSecurityException
+    {
         Cipher cipher = null;
         byte[] decrypt = null;
-
+        
         switch (type) {
-        case KerberosConstants.DES_ENC_TYPE:
-            try {
-                cipher = Cipher.getInstance("DES/CBC/NoPadding");
-            } catch(GeneralSecurityException e) {
-                throw new GeneralSecurityException("Checksum failed while decrypting.");
-            }
-            byte[] ivec = new byte[8];
-            IvParameterSpec params = new IvParameterSpec(ivec);
-            
-            SecretKeySpec skSpec = new SecretKeySpec(key.getEncoded(), "DES");
-            SecretKey sk = (SecretKey)skSpec;
-
-            cipher.init(Cipher.DECRYPT_MODE, sk, params);
-            
-            byte[] result;
-            result = cipher.doFinal(data);
-            
-            decrypt = new byte[result.length];
-            System.arraycopy(result, 0, decrypt, 0, result.length);
-            
-            int tempSize = decrypt.length - 24;
-            
-            byte[] output = new byte[tempSize];
-            System.arraycopy(decrypt, 24, output, 0, tempSize);
-            
-            decrypt = output;
-            break;
-        case KerberosConstants.RC4_ENC_TYPE:
-            byte[] code = DecodingUtil.asBytes(Cipher.DECRYPT_MODE);
-            byte[] codeHmac = getHmac(code, key.getEncoded());
-
-            byte[] dataChecksum = new byte[KerberosConstants.CHECKSUM_SIZE];
-            System.arraycopy(data, 0, dataChecksum, 0, KerberosConstants.CHECKSUM_SIZE);
-
-            byte[] dataHmac = getHmac(dataChecksum, codeHmac);
-            SecretKeySpec dataKey = new SecretKeySpec(dataHmac, KerberosConstants.RC4_ALGORITHM);
-
-            cipher = Cipher.getInstance(KerberosConstants.RC4_ALGORITHM);
-            cipher.init(Cipher.DECRYPT_MODE, dataKey);
-
-            int plainDataLength = data.length - KerberosConstants.CHECKSUM_SIZE;
-            byte[] plainData = cipher.doFinal(data, KerberosConstants.CHECKSUM_SIZE,
-                    plainDataLength);
-
-            byte[] plainDataChecksum = getHmac(plainData, codeHmac);
-            if(plainDataChecksum.length >= KerberosConstants.CHECKSUM_SIZE)
-                for(int i = 0; i < KerberosConstants.CHECKSUM_SIZE; i++)
-                    if(plainDataChecksum[i] != data[i])
-                        throw new GeneralSecurityException("Checksum failed while decrypting.");
-
-            int decryptLength = plainData.length - KerberosConstants.CONFOUNDER_SIZE;
-            decrypt = new byte[decryptLength];
-            System.arraycopy(plainData, KerberosConstants.CONFOUNDER_SIZE, decrypt, 0,
-                    decryptLength);
-            break;
-        default:
-            throw new GeneralSecurityException("Unsupported encryption type.");
+            case KerberosConstants.DES_ENC_TYPE:
+                try {
+                    cipher = Cipher.getInstance("DES/CBC/NoPadding");
+                } catch(GeneralSecurityException e) {
+                    throw new GeneralSecurityException("Checksum failed while decrypting.");
+                }
+                byte[] ivec = new byte[8];
+                IvParameterSpec params = new IvParameterSpec(ivec);
+                
+                SecretKeySpec skSpec = new SecretKeySpec(key.getEncoded(), "DES");
+                SecretKey sk = (SecretKey)skSpec;
+                
+                cipher.init(Cipher.DECRYPT_MODE, sk, params);
+                
+                byte[] result;
+                result = cipher.doFinal(data);
+                
+                decrypt = new byte[result.length];
+                System.arraycopy(result, 0, decrypt, 0, result.length);
+                
+                int tempSize = decrypt.length - 24;
+                
+                byte[] output = new byte[tempSize];
+                System.arraycopy(decrypt, 24, output, 0, tempSize);
+                
+                decrypt = output;
+                break;
+            case KerberosConstants.RC4_ENC_TYPE:
+                byte[] code = DecodingUtil.asBytes(Cipher.DECRYPT_MODE);
+                byte[] codeHmac = getHmac(code, key.getEncoded());
+                
+                byte[] dataChecksum = new byte[KerberosConstants.CHECKSUM_SIZE];
+                System.arraycopy(data, 0, dataChecksum, 0, KerberosConstants.CHECKSUM_SIZE);
+                
+                byte[] dataHmac = getHmac(dataChecksum, codeHmac);
+                SecretKeySpec dataKey = new SecretKeySpec(dataHmac, KerberosConstants.RC4_ALGORITHM);
+                
+                cipher = Cipher.getInstance(KerberosConstants.RC4_ALGORITHM);
+                cipher.init(Cipher.DECRYPT_MODE, dataKey);
+                
+                int plainDataLength = data.length - KerberosConstants.CHECKSUM_SIZE;
+                byte[] plainData = cipher.doFinal(data, KerberosConstants.CHECKSUM_SIZE,
+                                                  plainDataLength);
+                
+                byte[] plainDataChecksum = getHmac(plainData, codeHmac);
+                if(plainDataChecksum.length >= KerberosConstants.CHECKSUM_SIZE)
+                    for(int i = 0; i < KerberosConstants.CHECKSUM_SIZE; i++)
+                        if(plainDataChecksum[i] != data[i])
+                            throw new GeneralSecurityException("Checksum failed while decrypting.");
+                
+                int decryptLength = plainData.length - KerberosConstants.CONFOUNDER_SIZE;
+                decrypt = new byte[decryptLength];
+                System.arraycopy(plainData, KerberosConstants.CONFOUNDER_SIZE, decrypt, 0,
+                                 decryptLength);
+                break;
+            default:
+                CipherTextHandler handler = new CipherTextHandler();
+                EncryptionType encType = EncryptionType.getTypeByValue(type);
+                EncryptionKey encKey = new EncryptionKey(encType, key.getEncoded());
+                EncryptedData encData = new EncryptedData(encType, data);
+                try {
+                    decrypt = handler.decrypt(encKey, encData, KeyUsage.getTypeByOrdinal(KerberosConstants.AS_OR_TGS_REP_TICKET_WITH_SRVKEY_KEYUSAGE));
+                } catch (KerberosException e) {
+                    throw new GeneralSecurityException("Failed to decrypt token: " + e.getMessage());
+                }
         }
         return decrypt;
     }
-
+    
     private static byte[] getHmac(byte[] data, byte[] key) throws GeneralSecurityException {
         Key macKey = new SecretKeySpec(key.clone(), KerberosConstants.HMAC_ALGORITHM);
         Mac mac = Mac.getInstance(KerberosConstants.HMAC_ALGORITHM);
         mac.init(macKey);
-
+        
         return mac.doFinal(data);
     }
-
+    
     public String getUserRealm() {
         return userRealm;
     }
-
+    
     public String getUserPrincipalName() {
         return userPrincipalName;
     }
-
+    
     public ArrayList<InetAddress> getUserAddresses() {
         return userAddresses;
     }
-
+    
     public List<KerberosAuthData> getUserAuthorizations() {
         return userAuthorizations;
     }
-
-}
+    
+}
\ No newline at end of file
diff --git a/src/main/java/org/jaaslounge/decoding/pac/Pac.java b/src/main/java/org/jaaslounge/decoding/pac/Pac.java
index 46a5201..86e6abf 100755
--- a/src/main/java/org/jaaslounge/decoding/pac/Pac.java
+++ b/src/main/java/org/jaaslounge/decoding/pac/Pac.java
@@ -7,95 +7,127 @@ import java.security.Key;
 import java.security.NoSuchAlgorithmException;
 import java.util.Arrays;
 
+import org.apache.kerby.kerberos.kerb.KrbException;
+import org.apache.kerby.kerberos.kerb.crypto.CheckSumHandler;
+import org.apache.kerby.kerberos.kerb.type.base.CheckSum;
+import org.apache.kerby.kerberos.kerb.type.base.CheckSumType;
 import org.jaaslounge.decoding.DecodingException;
 
-public class Pac {
+import static org.apache.kerby.kerberos.kerb.type.base.KeyUsage.APP_DATA_CKSUM;
 
+public class Pac {
     private PacLogonInfo logonInfo;
     private PacCredentialType credentialType;
     private PacSignature serverSignature;
     private PacSignature kdcSignature;
-
+    
     public Pac(byte[] data, Key key) throws DecodingException {
         byte[] checksumData = data.clone();
         try {
             PacDataInputStream pacStream = new PacDataInputStream(new DataInputStream(
-                    new ByteArrayInputStream(data)));
-
+                                                                                      new ByteArrayInputStream(data)));
+            
             if(data.length <= 8)
+            {
                 throw new DecodingException("pac.token.empty", null, null);
-
+            }
+            
             int bufferCount = pacStream.readInt();
             int version = pacStream.readInt();
-
+            
             if(version != PacConstants.PAC_VERSION) {
                 Object[] args = new Object[]{version};
                 throw new DecodingException("pac.version.invalid", args, null);
             }
-
+            
             for(int bufferIndex = 0; bufferIndex < bufferCount; bufferIndex++) {
+                final int sigTypeLength = 4;
                 int bufferType = pacStream.readInt();
                 int bufferSize = pacStream.readInt();
                 long bufferOffset = pacStream.readLong();
                 byte[] bufferData = new byte[bufferSize];
                 System.arraycopy(data, (int)bufferOffset, bufferData, 0, bufferSize);
-
+                
                 switch (bufferType) {
-                case PacConstants.LOGON_INFO:
-                    // PAC Credential Information
-                    logonInfo = new PacLogonInfo(bufferData);
-                    break;
-                case PacConstants.CREDENTIAL_TYPE:
-                    // PAC Credential Type
-                    credentialType = new PacCredentialType(bufferData);
-                    break;
-                case PacConstants.SERVER_CHECKSUM:
-                    // PAC Server Signature
-                    serverSignature = new PacSignature(bufferData);
-                    // Clear signature from checksum copy
-                    for(int i = 0; i < bufferSize; i++)
-                        checksumData[(int)bufferOffset + 4 + i] = 0;
-                    break;
-                case PacConstants.PRIVSVR_CHECKSUM:
-                    // PAC KDC Signature
-                    kdcSignature = new PacSignature(bufferData);
-                    // Clear signature from checksum copy
-                    for(int i = 0; i < bufferSize; i++)
-                        checksumData[(int)bufferOffset + 4 + i] = 0;
-                    break;
-                default:
+                    case PacConstants.LOGON_INFO:
+                        // PAC Credential Information
+                        logonInfo = new PacLogonInfo(bufferData);
+                        break;
+                    case PacConstants.CREDENTIAL_TYPE:
+                        // PAC Credential Type
+                        credentialType = new PacCredentialType(bufferData);
+                        break;
+                    case PacConstants.SERVER_CHECKSUM:
+                        // PAC Server Signature
+                        serverSignature = new PacSignature(bufferData);
+                        // Clear signature from checksum copy
+                        for(int i = 0; i < bufferSize - sigTypeLength; i++)
+                        {
+                            checksumData[(int)bufferOffset + sigTypeLength + i] = 0;
+                        }
+                        break;
+                    case PacConstants.PRIVSVR_CHECKSUM:
+                        // PAC KDC Signature
+                        kdcSignature = new PacSignature(bufferData);
+                        // Clear signature from checksum copy
+                        for(int i = 0; i < bufferSize - sigTypeLength; i++)
+                        {
+                            checksumData[(int)bufferOffset + sigTypeLength + i] = 0;
+                        }
+                        break;
+                    default:
                 }
             }
         } catch(IOException e) {
             throw new DecodingException("pac.token.malformed", null, e);
         }
-
-        PacMac mac = new PacMac();
-        try {
-            mac.init(key);
-            mac.update(checksumData);
-        } catch(NoSuchAlgorithmException e) {
-            throw new DecodingException("pac.check.fail", null, e);
+        
+        byte[] checksum = null;
+        
+        if (serverSignature.getType() == 15 || serverSignature.getType() == 16)
+        {
+            try
+            {
+                CheckSum chkSum = CheckSumHandler.checksumWithKey(CheckSumType.fromValue(serverSignature.getType()), checksumData, key.getEncoded(), APP_DATA_CKSUM);
+                checksum = chkSum.getChecksum();
+            }
+            catch (KrbException e)
+            {
+                throw new DecodingException("pac.check.fail", null, e);
+            }
         }
-
-        byte checksum[] = mac.doFinal();
+        else
+        {
+            PacMac mac = new PacMac();
+            try {
+                mac.init(key);
+                mac.update(checksumData);
+            } catch(NoSuchAlgorithmException e) {
+                throw new DecodingException("pac.check.fail", null, e);
+            }
+            
+            checksum = mac.doFinal();
+        }
+        
         if(!Arrays.equals(serverSignature.getChecksum(), checksum))
+        {
             throw new DecodingException("pac.signature.invalid", null, null);
+        }
     }
-
+    
     public PacLogonInfo getLogonInfo() {
         return logonInfo;
     }
-
+    
     public PacCredentialType getCredentialType() {
         return credentialType;
     }
-
+    
     public PacSignature getServerSignature() {
         return serverSignature;
     }
-
+    
     public PacSignature getKdcSignature() {
         return kdcSignature;
     }
-}
+}
\ No newline at end of file
diff --git a/src/test/java/org/jaaslounge/decoding/TestKerberos.java b/src/test/java/org/jaaslounge/decoding/TestKerberos.java
index f3b17bd..ee9d4a2 100755
--- a/src/test/java/org/jaaslounge/decoding/TestKerberos.java
+++ b/src/test/java/org/jaaslounge/decoding/TestKerberos.java
@@ -126,30 +126,6 @@ public class TestKerberos {
     }
 
     @Test
-    public void testAes128Ticket() {
-        KerberosToken token = null;
-        try {
-            token = new KerberosToken(aes128Token, aes128Keys);
-            Assert.fail("Should have thrown DecodingException.");
-        } catch(DecodingException e) {
-            Assert.assertNotNull(e);
-            Assert.assertNull(token);
-        }
-    }
-
-    @Test
-    public void testAes256Ticket() {
-        KerberosToken token = null;
-        try {
-            token = new KerberosToken(aes256Token, aes256Keys);
-            Assert.fail("Should have thrown DecodingException.");
-        } catch(DecodingException e) {
-            Assert.assertNotNull(e);
-            Assert.assertNull(token);
-        }
-    }
-
-    @Test
     public void testCorruptTicket() {
         KerberosToken token = null;
         try {
