package com.l7tech.console.panels;

import com.l7tech.policy.exporter.CustomAssertionReference;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;

import javax.swing.*;
import java.awt.*;

/**
 * This panel allows an administrator to take the appropriate action when a policy
 * being imported contains custom assertions whose type is not installed on the
 * target system.
 *
 * Because custom assertions cannot be installed through the ssm, the
 * supported actions are simply "ignore" or "delete".
 *
 * <p/>
 * <br/><br/>
 * LAYER 7 TECHNOLOGIES, INC<br/>
 * User: flascell<br/>
 * Date: Jul 28, 2004<br/>
 * $Id$<br/>
 */
public class ResolveForeignCustomAssertionPanel extends WizardStepPanel {
    private CustomAssertionReference foreignRef;
    private JPanel mainPanel;
    private JTextField assNameTxtField;
    private JRadioButton removeRadio;
    private JRadioButton ignoreRadio;

    public ResolveForeignCustomAssertionPanel(WizardStepPanel next, CustomAssertionReference foreignRef) {
        super(next);
        this.foreignRef = foreignRef;
        initialize();
    }

    public String getDescription() {
        return getStepLabel();
    }

    public String getStepLabel() {
        return "Unknown assertion type " + foreignRef.getCustomAssertionName();
    }

    public boolean canFinish() {
        if (hasNextPanel()) return false;
        return true;
    }

    private void initialize() {
        setLayout(new BorderLayout());
        add(mainPanel);

        // show details (not much there)
        assNameTxtField.setText(foreignRef.getCustomAssertionName());

        // group the radios
        ButtonGroup actionGroup = new ButtonGroup();
        actionGroup.add(removeRadio);
        actionGroup.add(ignoreRadio);
        removeRadio.setSelected(true);
    }

    public boolean onNextButton() {
        // collect actions details and store in the reference for resolution
        if (removeRadio.isSelected()) {
            foreignRef.setLocalizeDelete();
        } else if (ignoreRadio.isSelected()) {
            foreignRef.setLocalizeIgnore();
        }
        return true;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// !!! IMPORTANT !!!
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * !!! IMPORTANT !!!
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Missing Custom Assertion Type Details"));
        final JLabel label1 = new JLabel();
        label1.setText("Custom Assertion Type");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        assNameTxtField = new JTextField();
        assNameTxtField.setEditable(false);
        panel1.add(assNameTxtField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Action"));
        removeRadio = new JRadioButton();
        removeRadio.setText("Remove custom assertions of unknown type");
        panel2.add(removeRadio, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        ignoreRadio = new JRadioButton();
        ignoreRadio.setText("Import erroneous assertions as-is");
        panel2.add(ignoreRadio, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null));
    }
}
