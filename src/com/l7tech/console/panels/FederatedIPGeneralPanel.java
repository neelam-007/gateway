package com.l7tech.console.panels;

import com.l7tech.identity.fed.FederatedIdentityProviderConfig;

import javax.swing.*;
import java.util.ResourceBundle;
import java.util.Locale;
import java.util.logging.Logger;
import java.awt.*;

/**
 * <p> Copyright (C) 2004 Layer 7 Technologies Inc.</p>
 * <p> @author fpang </p>
 * $Id$
 */
public class FederatedIPGeneralPanel extends IdentityProviderStepPanel {

    private JTextField providerNameTextField;
    private JCheckBox x509CertCheckbox;
    private JCheckBox samlCheckbox;

    private JPanel mainPanel;

    private static ResourceBundle resources = ResourceBundle.getBundle("com.l7tech.console.resources.FederatedIdentityProviderDialog", Locale.getDefault());
    private static Logger logger = Logger.getLogger(FederatedIPGeneralPanel.class.getName());


    public FederatedIPGeneralPanel(WizardStepPanel next) {
        super(next);
        initComponents();
    }

    private void initComponents() {
        setLayout(new BorderLayout());
        add(mainPanel, BorderLayout.CENTER);
    }

    public String getDescription() {
        return "Enter the identity provider name, " +
                "and select the types of credential source this identity provider will handle.";
    }

    /**
     * @return the wizard step label
     */
    public String getStepLabel() {
        return "Enter Provider Information";
    }

    /**
     * Test whether the step is finished and it is safe to finish the wizard.
     *
     * @return true if the panel is valid, false otherwis
     */
    public boolean canFinish() {
        return false;
    }

    /**
     * Populate the configuration data from the wizard input object to the visual components of the panel.
     *
     * @param settings The current value of configuration items in the wizard input object.
     * @throws IllegalArgumentException if the data provided by the wizard are not valid.
     */
    public void readSettings(Object settings) throws IllegalArgumentException {

        if (!(settings instanceof FederatedIdentityProviderConfig))
            throw new IllegalArgumentException("The settings object must be FederatedIdentityProviderConfig");

        FederatedIdentityProviderConfig iProviderConfig = (FederatedIdentityProviderConfig) settings;

        if (iProviderConfig.getOid() != -1) {
            providerNameTextField.setText(iProviderConfig.getName());
        }

        x509CertCheckbox.setSelected(iProviderConfig.isX509Supported());
        samlCheckbox.setSelected(iProviderConfig.isSamlSupported());
    }


    /**
     * Store the values of all fields on the panel to the wizard object which is a used for
     * keeping all the modified values. The wizard object will be used for providing the
     * updated values when updating the server.
     *
     * @param settings the object representing wizard panel state
     */
    public void storeSettings(Object settings) {
        if (!(settings instanceof FederatedIdentityProviderConfig))
            throw new IllegalArgumentException("The settings object must be FederatedIdentityProviderConfig");

        FederatedIdentityProviderConfig iProviderConfig = (FederatedIdentityProviderConfig) settings;

        iProviderConfig.setSamlSupported(samlCheckbox.isSelected());
        iProviderConfig.setX509Supported(x509CertCheckbox.isSelected());
        iProviderConfig.setName(providerNameTextField.getText().trim());

    }

    public boolean onNextButton() {

        if(providerNameTextField.getText().length() < 3 || providerNameTextField.getText().length() > 24) {
            JOptionPane.showMessageDialog(mainPanel, resources.getString("providerNameTextField.error.empty"),
                            resources.getString("providerNameTextField.error.title"),
                            JOptionPane.ERROR_MESSAGE);

            return false;
        }

        java.util.ArrayList skippedPanels = new java.util.ArrayList();
        if (!x509CertCheckbox.isSelected()) skippedPanels.add(FederatedIPX509CertPanel.class.getName());
        if (!samlCheckbox.isSelected()) skippedPanels.add(FederatedIPSamlPanel.class.getName());

        setSkippedPanels(skippedPanels.toArray());
        return true;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        final JPanel _1;
        _1 = new JPanel();
        mainPanel = _1;
        _1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel _2;
        _2 = new JPanel();
        _1.add(_2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, 0, 3, 3, 3, null, null, null));
        final com.intellij.uiDesigner.core.Spacer _3;
        _3 = new com.intellij.uiDesigner.core.Spacer();
        _1.add(_3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, 0, 2, 1, 6, null, null, null));
        final JPanel _4;
        _4 = new JPanel();
        _4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        _1.add(_4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, 0, 3, 3, 3, null, null, null));
        final JLabel _5;
        _5 = new JLabel();
        _5.setText("Provider Name:");
        _4.add(_5, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, 8, 0, 0, 0, null, null, null));
        final JTextField _6;
        _6 = new JTextField();
        providerNameTextField = _6;
        _6.setText("");
        _4.add(_6, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, 8, 1, 6, 0, null, new Dimension(150, -1), null));
        final JPanel _7;
        _7 = new JPanel();
        _7.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 0, 0, 0), -1, -1));
        _4.add(_7, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, 0, 3, 3, 3, null, null, null));
        final JLabel _8;
        _8 = new JLabel();
        _8.setText("Credential Source Type Allowed:");
        _7.add(_8, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, 8, 0, 0, 0, null, null, null));
        final com.intellij.uiDesigner.core.Spacer _9;
        _9 = new com.intellij.uiDesigner.core.Spacer();
        _7.add(_9, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, 0, 2, 1, 6, null, null, null));
        final JPanel _10;
        _10 = new JPanel();
        _10.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 0, 10, 10), -1, -1));
        _4.add(_10, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, 0, 3, 3, 3, null, null, null));
        final JCheckBox _11;
        _11 = new JCheckBox();
        x509CertCheckbox = _11;
        _11.setText("X.509 Certificate");
        _10.add(_11, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, 8, 0, 3, 0, null, null, null));
        final JCheckBox _12;
        _12 = new JCheckBox();
        samlCheckbox = _12;
        _12.setText("SAML");
        _10.add(_12, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, 8, 0, 3, 0, null, null, null));
    }


}
