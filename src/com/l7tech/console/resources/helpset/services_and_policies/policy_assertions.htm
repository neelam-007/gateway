<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">



<html>











<head>



<title>Policy Assertions</title>







 <meta http-equiv=content-type content="text/html; charset=windows-1252">

<meta name=generator-major-version content=0.1>

<meta name=generator-minor-version content=1>

<meta name=filetype content=kadov>

<meta name=filetype-version content=1>

<meta name=page-count content=1>

<meta name=layout-height content=2397>

<meta name=layout-width content=888>









 <link rel="StyleSheet" href="../console.css">







 <META NAME="generator" CONTENT="RoboHelp by eHelp Corporation www.ehelp.com">

</head>









<body>



<h1>Policy Assertions</h1>



<p>Policy assertions are the building blocks for security policies in the 

 Manager. The assertions establish the authentication method, identities, 

 security, and message routing aspects of each policy. Once the assertions 

 have been set, their ordering logic must be <a href="validating_policies.htm">validated</a>. 

 After assertions have been added to a policy, their properties can be 

 viewed by double-clicking on the assertion name or by right-clicking on 

 the assertion name to display a menu. </p>



<p>The seven assertion categories are:</p>



<ul style="list-style: disc;"

	type=disc>

	

	<li class="kadov-p"><p><a href="../setup/identity_providers.htm">Identity 

 providers</a></p></li>

	

	<li class="kadov-p"><p><a href="../setup/policy_templates.htm">Policy 

 templates</a></p></li>

	

	<li class="kadov-p"><p><a href="#AuthenticationMethods">Authentication 

 methods</a></p></li>

	

	<li class="kadov-p"><p><a href="#TransportLayerSecurity">Transport Layer 

 Security (TLS)</a></p></li>

	

	<li class="kadov-p"><p><a href="#XMLSecurity">XML security</a></p></li>

	

	<li class="kadov-p"><p><a href="#XMLTransformAndValidation">XML transform 

 &amp; validation</a></p></li>

	

	<li class="kadov-p"><p><a href="#MessageRouting">Message routing</a></p></li>

</ul>



<p>&nbsp;</p>



<h2><a name=AuthenticationMethods></a>Authentication Methods</h2>



<p>The Manager provides a list of authentication protocols that can be 

 used for credential authentication in a policy. &nbsp;The 

 authentication method establishes the authentication requirements to access 

 the service. If an authentication method is not selected, the policy allows 

 anonymous service and a warning is issued when the policy is verified. 

 Authentication methods should be listed before identity and routing assertions 

 in the policy. </p>



<p>The available authentication methods are:</p>



<p><span style="font-weight: bold;"><B>HTTP Basic:</B></span> Includes username, 

 password, and the authentication realm as a string in the request headers. 

 </p>



<p><span style="font-weight: bold;"><B>HTTP Digest:</B></span> Includes username, 

 password, and the authentication realm in the request headers (in a form 

 called an &quot;SHA&quot; digest). This must query the server first for 

 a &quot;nonce&quot; (a unique token), guaranteeing a better level of security.</p>



<p><span style="font-weight: bold;"><B>HTTP Client Certificates:</B></span> Creates 

 an X.509 certificate on the client side. This is signed by the certificate 

 authority in the Gateway and used as a password-like token. Incoming SSL 

 sessions are verified as created using that x.509 certificate. This authentication 

 method requires the SSL Transport assertion.</p>



<p><span style="font-weight: bold;"><B>WS Token Basic:</B></span> Includes username, 

 password, and the authentication realm in a section of the XML message 

 (in cleartext, not secure without SSL).</p>



<p><span style="font-weight: bold;"><B>XML Request Security:</B></span> (a.k.a. 

 WS Secure sign &amp; encryption) A service on the Gateway creates a symmetric 

 encryption key for the entire message. The message is then signed and 

 optionally encrypted with that key. XML Request Security can only be used 

 with identities from the internal identity provider. </p>



<p>&nbsp;</p>



<h2><a name=TransportLayerSecurity></a>Transport Layer Security</h2>



<p>Transport Layer Security (TLS) is a protocol that ensures privacy between 

 communicating applications and their users on the Internet. When a server 

 and client communicate, TLS ensures that no third party may eavesdrop 

 or tamper with any message. TLS is the successor to the Secure Sockets 

 Layer (SSL).</p>



<h3>TLS/SSL Properties </h3>



<p>When using TLS in a policy, the assertion properties can be set to SSL 

 Required, SSL Optional, or SSL Forbidden. The setting is changed by right-clicking 

 on the SSL Transport assertion in the Policy pane and selecting SSL/TLS 

 Properties from the drop-down menu. HTTP Client Certificates must be used 

 as the authentication method when SSL Transport is enabled (required or 

 optional).</p>



<p>&nbsp;</p>



<h2><a name=XMLSecurity></a>XML Security</h2>



<p>XML Security included assertions that enable XML-based encryption, signing 

 of standard messages, and basic validation for single-sign on. Administrators 

 can use these assertions independently or together. </p>



<h3>XML Request and Response Security</h3>



<p>This method uses x509 certificates to encrypt a message digest for &quot;sign 

 only&quot; security or exchanges a symmetric key to encrypt the entire 

 message for &quot;sign and encrypt&quot; security. The XML Security assertions 

 are XML Request Security and/or XML Response Security. The default setting 

 for these assertions is &quot;sign only.&quot; The setting can be changed 

 in the <a href="#XMLSecurityProperties">XML security properties</a> dialog 

 box.</p>



<p>Each assertion must be placed in the correct location for the policy 

 to be validated. The XML Request Security assertion can be placed anywhere 

 in the policy, but must be located before the routing assertion. The XML 

 Response Security assertion must be located after the routing assertion.</p>



<h4><a name=XMLSecurityProperties></a>XML Security Properties</h4>



<p>XML Request Security and XML Response Security can be configured to 

 be sign-only or sign-and-encrypt. The setting is changed by right-clicking 

 on the XML Request/Response Security assertion in the Policy pane and 

 selecting XML security properties from the drop-down menu. Select the 

 required setting and click OK.</p>



<h3>SAML Security</h3>



<p>The third option under XML security is SAML Security. The Security Assertions 

 Markup Language (SAML) is an XML-based standard for authentication and 

 authorization that provides a single sign-on. Single sign-on allows users 

 to be authenticated once and then access multiple Web services. </p>



<p>In the SecureSpan Manager, administrators can implement a basic-level 

 of SAML functionality when using the SAML Security assertion. Once added 

 to a policy, SAML Security checks the date and time on the ticket. This 

 function validates whether the time and date of the SOAP message is within 

 the approved time and date period. If the validation returns as true, 

 the SecureSpan Gateway passes the message through to the Web Service.

 If the validation fails, the Gateway returns a SOAP fault.</p>



<p class="note"><span style="font-style: italic;"><I>Note:</I></span> The acceptable 

 &nbsp;time and 

 date parameters are specified in the &quot;Not Before&quot; and the &quot;NotOnOrAfter&quot; 

 attributes of the &quot;saml:Conditions&quot; in the SOAP header of the 

 &nbsp;XML documents.</p>



<p>The SAML Security assertion should be positioned at the very top of 

 the policy. Once inserted, the properties must be set for the assertion 

 to validate the appropriate parameters.</p>



<h4>SAML Security Properties</h4>



<p>The SAML Security properties are configured easily from the Policy pane. 

 Right-click on the SAML Security assertion and select SAML properties 

 from the drop-down menu. Select the required settings in the SAML Properties 

 dialog box. </p>



<p class="note">&nbsp;</p>



<h2><a name=XMLTransformAndValidation></a>XML Transform &amp; Validation</h2>



<p>In the current version of the SecureSpan Manager, Request XPath expression 

 is the only assertion in this category. &nbsp;</p>



<h3>Request XPath Expression</h3>



<p>The SecureSpan Manager allows policies to query directly into a service 

 request using XPath queries. The query addresses specific parts of an 

 XML document, so that information can be evaluated faster. XPath queries 

 can evaluate the validity of an XML request or use the request's content 

 to limit access to a Web Service. In order to validate correctly, the

 XPath assertion must be inserted in the policy before the routing assertion.</p>



<p>The XPath assertion evaluates either the validity of the structure of 

 an XML document or the data inside the document. The SecureSpan Gateway 

 returns a true or a false result, based on the evaluation of the data. 

 These results can be viewed in the Gateway logs in the Manager by selecting 

 the &quot;all&quot; setting. The XPath log entries are always listed at 

 the &quot;finest&quot; severity level. </p>



<p class="note"><span style="font-style: italic;"><I>Note:</I></span> This version 

 of the Gateway only uses XPath to evaluate and filter XML requests, not 

 XML responses.</p>



<h4>XPath Assertion Properties</h4>



<p>Once the Request XPath expression assertion is inserted into the policy, 

 you must configure the assertion properties. If the XPath assertion is 

 inserted without a specified pattern, the policy will not validate. To 

 view the properties, right-click on the assertion and select Edit Request 

 Xpath Assertion from the drop-down menu. The XPath Assertion Properties 

 dialog box appears with the namespaces displayed. </p>



<p>The displayed namespaces are retrieved from the service WSDL. They are 

 provided for easy reference and accurate insertion into the XPath pattern. 

 The XPath Assertion Properties displays all paths for the relevant soap 

 envelopes and namespaces. </p>



<p class="note"><span style="font-style: italic; color: #ff0000;"><font color=red ><I>Warning</I></font></span><span 

 style="color: #ff0000;"><font color=red >!</font></span>: Configuring XPath patterns requires 

 in-depth knowledge of the XPath and the XPath specifications. Do not insert 

 an XPath assertion if you are not well-versed in this language.</p>



<h4>XPath Resources</h4>



<p>More information about XPath can be found on the following websites:</p>



<p><a href="http://www.zvon.org/xxl/XPathTutorial/Output/">http://www.zvon.org/xxl/XPathTutorial/Output/</a></p>



<p><a href="http://www.purpletech.com/xpe/index.jsp">http://www.purpletech.com/xpe/index.jsp</a></p>



<p><a href="http://www.w3.org/TR/xpath">http://www.w3.org/TR/xpath</a></p>



<h2><a name=MessageRouting></a>Message Routing</h2>



<p>After authentication and security decisions are made, the message must 

 be sent to the protected service that handles the request. The message 

 routing assertion defines where the message is sent and what credentials 

 the service requires. </p>



<p>Every policy created in the Manager must have a routing assertion. This 

 assertion should always be the last assertion of the policy, except when 

 XML Response Security is being used. </p>



<h3>Message Routing Properties</h3>



<p>The message routing properties can be viewed and edited by right-clicking 

 on the routing assertion in the Policy pane and selecting Routing Properties. 

 If the Web Service is anonymous, no credentials are required. If the Web

 service is protected, the administrator needs to add the identity, password, 

 and realm information to the message routing properties for messages to 

 be routed through to the Web Service. </p>



</body>



</html>