/*
 * Copyright (C) 2005 Layer 7 Technologies Inc.
 *
 */

package com.l7tech.common;

import com.l7tech.common.util.ISO8601Date;
import com.l7tech.common.util.XmlUtil;
import com.l7tech.common.xml.TooManyChildElementsException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.text.ParseException;
import java.util.Date;

/**
 * Immutable in-memory representation of a License file.
 */
public class License {
    public static final String LIC_NS = "http://l7tech.com/license";
    private final Document licenseDoc;
    private final long id;
    private final Date expiryDate;

    /**
     * Parse the specified license document.
     *
     * The document must follow this schematic:
     * <pre>
     *    license id=NNN
     * </pre>
     *
     * @param licenseDoc
     */
    public License(Document licenseDoc) {
        if (licenseDoc == null) throw new NullPointerException();
        Element lic = licenseDoc.getDocumentElement();
        if (lic == null) throw new NullPointerException(); // can't happen
        if (!(LIC_NS.equals(lic.getNamespaceURI()))) throw new IllegalArgumentException("License document element not in namespace " + LIC_NS);
        if (!("license".equals(lic.getLocalName()))) throw new IllegalArgumentException("License local name is not \"license\"");
        this.licenseDoc = licenseDoc;

        try {
            id = Long.parseLong(lic.getAttribute("id"));
            if (id < 1)
                throw new IllegalArgumentException("License id is non-positive");
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("License id is missing or non-numeric");
        }

        try {
            expiryDate = parseExpiryDate();
        } catch (ParseException e) {
            throw new IllegalArgumentException("License expiry date contains invalid ISO 8601 date string", e);
        } catch (TooManyChildElementsException e) {
            throw new IllegalArgumentException("License contains multiple expiry dates", e);
        }



    }

    /**
     * Get the expiry date of this license.
     *
     * @return the expirty date of this license, or null if there isn't one.
     * @throws ParseException if there is an expiry date but it is invalid
     * @throws TooManyChildElementsException if there is more than one expires element
     */
    private Date parseExpiryDate() throws ParseException, TooManyChildElementsException {
        Element lic = licenseDoc.getDocumentElement();
        Element expires = XmlUtil.findOnlyOneChildElementByName(lic, (String)null, "expires");
        if (expires == null)
            return null;
        return ISO8601Date.parse(XmlUtil.getTextValue(expires));
    }


    /**
     * Get the ID of this license.  Every license generated by a given license issuer should have
     * a different ID.
     *
     * @return the Id of this license.  Always a positive integer.
     */
    public long getId() {
        return id;
    }

    /**
     * Get the XML document that was used to produce this License instance.
     *
     * @return the XML document from which this License instance was generated.  Never null.
     */
    public Document getDocument() {
        return licenseDoc;
    }

    /**
     * Get the expiry date for this license.
     *
     * @return the expiry date of this license, or null if it never expires.
     */
    public Date getExpiryDate() {
        return expiryDate;
    }

}
