/*
 * Copyright (C) 2003 Layer 7 Technologies Inc.
 *
 * $Id$
 */

package com.l7tech.common.protocol;

/**
 *
 * User: mike
 * Date: Sep 2, 2003
 * Time: 4:15:04 PM
 */
public class SecureSpanConstants {

    /** The HTTP user agent sent by the current version of the Client Proxy. */
    public static final String USER_AGENT = "L7 Agent; Protocol v1.0";

    /** The MIME type of the X.509 certificate sent by the certificate discovery server. */
    public static final String CERTIFICATE_MIME_TYPE = "application/x-x509-ca-cert";

    public static class HttpHeaders {
        /**
         * Contains the version number of the policy used and/or expected by the entity providing the header.
         * This number is used to identify a particular generation of a particular service policy -- ie,
         * it's incremented whenever an administrator edits a policy and then saves his changes --
         * it doesn't identify which policy assertions are used or expected to be available or any
         * other protocol versioning.
         */
        public static final String POLICY_VERSION = "l7-policy-version";

        /**
         * Contains the ID of the session established to hold security context information needed
         * by the two parties conversing.  This information includes the server write and server read
         * symmetric keys, the message sequence number, the creation timestamp, and a count of the number
         * of messages sent within the session.  The client creates a session by sending a request
         * to the session server; both client and server then keep a copy of the session fields, and
         * the session exists as long as both sides agree to recognize it.
         */
        public static final String XML_SESSID_HEADER_NAME = "L7-Session-Id";

        /**
         * Contains a random long integer generated by the entity making the request.  This can be
         * added to digitally signed replies to protect against replay attacks.  The Client Proxy provides
         * this header with a request when the policy suggests that it should expect a signed response.
         */
        public static final String XML_NONCE_HEADER_NAME = "L7-Nonce";

        /**
         * Contains an indication of the status of the session, either "valid" or "invalid".  The SSG sets
         * this header if it rejects a request because it contains a reference to a session ID that is
         * either unknown or expired.
         */
        public static final String SESSION_STATUS_HTTP_HEADER = "l7-session-status";

        /**
         * Contains the URL of the policy that should be applied to a given request.  When included in
         * a response from the message processing servlet, this header is an explicit request for the client
         * to download a new policy.  May also be returned by the policy servlet if it wants an anonymous
         * HTTP client to retry a policy download using HTTPS + Basic auth.
         */
        public static final String POLICYURL_HEADER = "PolicyUrl";

        /**
         * Contains a reconstruction of the original URL the end user client was connecting to when it
         * made contact with the Client Proxy.  This is passed on to the SSG in case the SSG wishes to
         * use the information for service routing.
         */
        public static final String ORIGINAL_URL = "L7-Original-URL";

        /**
         * Contains a hash value used for checking certificate validity.  The full header name for each
         * cert check will be this prefix followed by the numeric ID of an authentication provider that
         * contained a matching username.  The value of the header will be the hex encoded MD5 digest
         * of the raw bytes of the cert (exactly as returned by the body of the response associated with
         * this header) + H(A1), where H(A1) is the MD5 of "username:realm:password".  The hex digest
         * will be followed by a semicolon, a space, and the realm name.
         *
         * <p>Here is a complete example:  <pre>L7-Cert-Check--1: 249d90d691cdd6fdb480c80aeaddbaa3; myrealm</pre>
         *
         * <p>This means it's the cert check header for auth provider -1 (the builtin provider).  The large hex
         * number is the MD5 of "TheseAreSomeCertificateBytes" + "alice:myrealm:secret".  The username was
         * provided to the certificate server with the request and is thus already known to the client.
         * The realm is returned in plaintext since the client does not know it in advance.
         * "secret" is the password that the client is supposed to know already; if both client and server agree
         * about the value of the password, the client can trust that the certificate bytes were provided by someone
         * that knows the H(A1) of his password and that they haven't been tampered with in transit.
         */
        public static final String CERT_CHECK_PREFIX = "L7-Cert-Check-";
    }
}
